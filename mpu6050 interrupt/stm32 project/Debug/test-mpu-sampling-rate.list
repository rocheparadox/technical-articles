
test-mpu-sampling-rate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008470  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08008740  08008740  00009740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080087c8  080087c8  000097c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080087d0  080087d0  000097d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080087d4  080087d4  000097d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  080087d8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002a8  24000064  0800883c  0000a064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400030c  0800883c  0000a30c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 10 .debug_info   000161a3  00000000  00000000  0000a092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002551  00000000  00000000  00020235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001168  00000000  00000000  00022788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000db6  00000000  00000000  000238f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032d70  00000000  00000000  000246a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018560  00000000  00000000  00057416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014cae2  00000000  00000000  0006f976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001bc458  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004fe8  00000000  00000000  001bc49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  001c1484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000064 	.word	0x24000064
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08008728 	.word	0x08008728

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000068 	.word	0x24000068
 800030c:	08008728 	.word	0x08008728

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006b6:	f000 fa25 	bl	8000b04 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ba:	f000 fcc5 	bl	8001048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006be:	f000 f8c3 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f000 f9c9 	bl	8000a58 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006c6:	f000 f91d 	bl	8000904 <MX_I2C1_Init>
  MX_TIM1_Init();
 80006ca:	f000 f95b 	bl	8000984 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80006ce:	f000 f999 	bl	8000a04 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart3, (uint8_t*)"USART initialized\n", strlen("USART initialized\n"), HAL_MAX_DELAY);
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006d6:	2212      	movs	r2, #18
 80006d8:	4952      	ldr	r1, [pc, #328]	@ (8000824 <main+0x174>)
 80006da:	4853      	ldr	r0, [pc, #332]	@ (8000828 <main+0x178>)
 80006dc:	f006 fa6a 	bl	8006bb4 <HAL_UART_Transmit>
   * 3. Set SMPLRT_DIV bits. This is used to set the sampling rate
   * 4. Set INT_EN bit. This is used to set the interrupt enable bit
   * 5. Set INT_PIN_CFG bits. This is used to configure the interrupt pin itself.
   */

  uint8_t reg_value = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Read_IT(&hi2c1, dev_address, MPU6050_POWER_MGMT_REG, 1, &reg_value, 1);
 80006e4:	4b51      	ldr	r3, [pc, #324]	@ (800082c <main+0x17c>)
 80006e6:	8819      	ldrh	r1, [r3, #0]
 80006e8:	2301      	movs	r3, #1
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	f107 030b 	add.w	r3, r7, #11
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	2301      	movs	r3, #1
 80006f4:	226b      	movs	r2, #107	@ 0x6b
 80006f6:	484e      	ldr	r0, [pc, #312]	@ (8000830 <main+0x180>)
 80006f8:	f001 fc20 	bl	8001f3c <HAL_I2C_Mem_Read_IT>
  HAL_Delay(5);
 80006fc:	2005      	movs	r0, #5
 80006fe:	f000 fd35 	bl	800116c <HAL_Delay>
  uint8_t value2write = 0b00000001;
 8000702:	2301      	movs	r3, #1
 8000704:	72bb      	strb	r3, [r7, #10]
  HAL_I2C_Mem_Write_IT(&hi2c1, dev_address, MPU6050_POWER_MGMT_REG, 1, &value2write, 1);
 8000706:	4b49      	ldr	r3, [pc, #292]	@ (800082c <main+0x17c>)
 8000708:	8819      	ldrh	r1, [r3, #0]
 800070a:	2301      	movs	r3, #1
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	f107 030a 	add.w	r3, r7, #10
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2301      	movs	r3, #1
 8000716:	226b      	movs	r2, #107	@ 0x6b
 8000718:	4845      	ldr	r0, [pc, #276]	@ (8000830 <main+0x180>)
 800071a:	f001 fb85 	bl	8001e28 <HAL_I2C_Mem_Write_IT>
  HAL_Delay(5);
 800071e:	2005      	movs	r0, #5
 8000720:	f000 fd24 	bl	800116c <HAL_Delay>
//  HAL_I2C_Mem_Read_IT(&hi2c1, dev_address, MPU6050_POWER_MGMT_REG, 1, &reg_value, 1);
//  HAL_Delay(5);

  value2write = 1;
 8000724:	2301      	movs	r3, #1
 8000726:	72bb      	strb	r3, [r7, #10]
  HAL_I2C_Mem_Write_IT(&hi2c1, dev_address, MPU6050_CONFIG_REG, 1, &value2write, 1);
 8000728:	4b40      	ldr	r3, [pc, #256]	@ (800082c <main+0x17c>)
 800072a:	8819      	ldrh	r1, [r3, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	f107 030a 	add.w	r3, r7, #10
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2301      	movs	r3, #1
 8000738:	221a      	movs	r2, #26
 800073a:	483d      	ldr	r0, [pc, #244]	@ (8000830 <main+0x180>)
 800073c:	f001 fb74 	bl	8001e28 <HAL_I2C_Mem_Write_IT>
  HAL_Delay(5);
 8000740:	2005      	movs	r0, #5
 8000742:	f000 fd13 	bl	800116c <HAL_Delay>

  value2write = 4;
 8000746:	2304      	movs	r3, #4
 8000748:	72bb      	strb	r3, [r7, #10]
  HAL_I2C_Mem_Write_IT(&hi2c1, dev_address, MPU6050_SMPLRT_DIV_REG, 1, &value2write, 1);
 800074a:	4b38      	ldr	r3, [pc, #224]	@ (800082c <main+0x17c>)
 800074c:	8819      	ldrh	r1, [r3, #0]
 800074e:	2301      	movs	r3, #1
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	f107 030a 	add.w	r3, r7, #10
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	2219      	movs	r2, #25
 800075c:	4834      	ldr	r0, [pc, #208]	@ (8000830 <main+0x180>)
 800075e:	f001 fb63 	bl	8001e28 <HAL_I2C_Mem_Write_IT>
  HAL_Delay(5);
 8000762:	2005      	movs	r0, #5
 8000764:	f000 fd02 	bl	800116c <HAL_Delay>

  value2write = 0b10100000;
 8000768:	23a0      	movs	r3, #160	@ 0xa0
 800076a:	72bb      	strb	r3, [r7, #10]
  HAL_I2C_Mem_Write_IT(&hi2c1, dev_address, MPU6050_INT_PIN_CFG_REG, 1, &value2write, 1);
 800076c:	4b2f      	ldr	r3, [pc, #188]	@ (800082c <main+0x17c>)
 800076e:	8819      	ldrh	r1, [r3, #0]
 8000770:	2301      	movs	r3, #1
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	f107 030a 	add.w	r3, r7, #10
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2301      	movs	r3, #1
 800077c:	2237      	movs	r2, #55	@ 0x37
 800077e:	482c      	ldr	r0, [pc, #176]	@ (8000830 <main+0x180>)
 8000780:	f001 fb52 	bl	8001e28 <HAL_I2C_Mem_Write_IT>
  HAL_Delay(5);
 8000784:	2005      	movs	r0, #5
 8000786:	f000 fcf1 	bl	800116c <HAL_Delay>

  value2write = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	72bb      	strb	r3, [r7, #10]
  HAL_I2C_Mem_Write_IT(&hi2c1, dev_address, MPU6050_INT_EN_REG, 1, &value2write, 1);
 800078e:	4b27      	ldr	r3, [pc, #156]	@ (800082c <main+0x17c>)
 8000790:	8819      	ldrh	r1, [r3, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	f107 030a 	add.w	r3, r7, #10
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2301      	movs	r3, #1
 800079e:	2238      	movs	r2, #56	@ 0x38
 80007a0:	4823      	ldr	r0, [pc, #140]	@ (8000830 <main+0x180>)
 80007a2:	f001 fb41 	bl	8001e28 <HAL_I2C_Mem_Write_IT>
  HAL_Delay(5);
 80007a6:	2005      	movs	r0, #5
 80007a8:	f000 fce0 	bl	800116c <HAL_Delay>
//  HAL_Delay(5);
//  HAL_I2C_Mem_Read_IT(&hi2c1, dev_address, MPU6050_INT_EN_REG, 1, &reg_value, 1);
//  HAL_Delay(5);

  // Read the interrupt register of MPU6050 once
	HAL_I2C_Mem_Read_IT(&hi2c1, dev_address, MPU6050_INT_STATUS_REG, 1, &reg_value, 1);
 80007ac:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <main+0x17c>)
 80007ae:	8819      	ldrh	r1, [r3, #0]
 80007b0:	2301      	movs	r3, #1
 80007b2:	9301      	str	r3, [sp, #4]
 80007b4:	f107 030b 	add.w	r3, r7, #11
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	2301      	movs	r3, #1
 80007bc:	223a      	movs	r2, #58	@ 0x3a
 80007be:	481c      	ldr	r0, [pc, #112]	@ (8000830 <main+0x180>)
 80007c0:	f001 fbbc 	bl	8001f3c <HAL_I2C_Mem_Read_IT>
	HAL_Delay(10);
 80007c4:	200a      	movs	r0, #10
 80007c6:	f000 fcd1 	bl	800116c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Start the timer
  HAL_TIM_Base_Start(&htim1);
 80007ca:	481a      	ldr	r0, [pc, #104]	@ (8000834 <main+0x184>)
 80007cc:	f006 f872 	bl	80068b4 <HAL_TIM_Base_Start>

  int nor;
  nor = 1;
 80007d0:	2301      	movs	r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
	  //HAL_UART_Transmit(&huart3, (uint8_t*)gyroy_low, strlen(gyroy_low), HAL_MAX_DELAY);

	  //HAL_Delay(0.01);
    /* USER CODE BEGIN 3 */

	  if(is_data_ready == 1){
 80007d4:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <main+0x188>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d1fb      	bne.n	80007d4 <main+0x124>
		  data_ready_handler();
 80007dc:	f000 f9be 	bl	8000b5c <data_ready_handler>
		  is_data_ready = 0;
 80007e0:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <main+0x188>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]

		  sprintf(counter_value, "%lu\n", (timer_count*(timer_prescaler+1)/64000));
 80007e6:	2363      	movs	r3, #99	@ 0x63
 80007e8:	3301      	adds	r3, #1
 80007ea:	4a14      	ldr	r2, [pc, #80]	@ (800083c <main+0x18c>)
 80007ec:	6812      	ldr	r2, [r2, #0]
 80007ee:	fb02 f303 	mul.w	r3, r2, r3
 80007f2:	4a13      	ldr	r2, [pc, #76]	@ (8000840 <main+0x190>)
 80007f4:	fb82 1203 	smull	r1, r2, r2, r3
 80007f8:	1312      	asrs	r2, r2, #12
 80007fa:	17db      	asrs	r3, r3, #31
 80007fc:	1ad2      	subs	r2, r2, r3
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4910      	ldr	r1, [pc, #64]	@ (8000844 <main+0x194>)
 8000802:	4618      	mov	r0, r3
 8000804:	f007 faf0 	bl	8007de8 <siprintf>
		  //sprintf(counter_value, "%d \n", timer_count);
		  HAL_UART_Transmit(&huart3, (uint8_t*)counter_value, strlen(counter_value), HAL_MAX_DELAY);
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fd80 	bl	8000310 <strlen>
 8000810:	4603      	mov	r3, r0
 8000812:	b29a      	uxth	r2, r3
 8000814:	1d39      	adds	r1, r7, #4
 8000816:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800081a:	4803      	ldr	r0, [pc, #12]	@ (8000828 <main+0x178>)
 800081c:	f006 f9ca 	bl	8006bb4 <HAL_UART_Transmit>
  {
 8000820:	e7d8      	b.n	80007d4 <main+0x124>
 8000822:	bf00      	nop
 8000824:	08008740 	.word	0x08008740
 8000828:	24000120 	.word	0x24000120
 800082c:	24000000 	.word	0x24000000
 8000830:	24000080 	.word	0x24000080
 8000834:	240000d4 	.word	0x240000d4
 8000838:	240001b8 	.word	0x240001b8
 800083c:	240001b4 	.word	0x240001b4
 8000840:	10624dd3 	.word	0x10624dd3
 8000844:	08008754 	.word	0x08008754

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b09c      	sub	sp, #112	@ 0x70
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000852:	224c      	movs	r2, #76	@ 0x4c
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f007 fae6 	bl	8007e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2220      	movs	r2, #32
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f007 fae0 	bl	8007e28 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000868:	2002      	movs	r0, #2
 800086a:	f003 fa69 	bl	8003d40 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b23      	ldr	r3, [pc, #140]	@ (8000900 <SystemClock_Config+0xb8>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800087a:	4a21      	ldr	r2, [pc, #132]	@ (8000900 <SystemClock_Config+0xb8>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000880:	6193      	str	r3, [r2, #24]
 8000882:	4b1f      	ldr	r3, [pc, #124]	@ (8000900 <SystemClock_Config+0xb8>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800088e:	bf00      	nop
 8000890:	4b1b      	ldr	r3, [pc, #108]	@ (8000900 <SystemClock_Config+0xb8>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800089c:	d1f8      	bne.n	8000890 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089e:	2302      	movs	r3, #2
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80008a6:	2340      	movs	r3, #64	@ 0x40
 80008a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b2:	4618      	mov	r0, r3
 80008b4:	f003 fa7e 	bl	8003db4 <HAL_RCC_OscConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008be:	f000 f975 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c2:	233f      	movs	r3, #63	@ 0x3f
 80008c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008d6:	2340      	movs	r3, #64	@ 0x40
 80008d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2101      	movs	r1, #1
 80008e6:	4618      	mov	r0, r3
 80008e8:	f003 fe3e 	bl	8004568 <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008f2:	f000 f95b 	bl	8000bac <Error_Handler>
  }
}
 80008f6:	bf00      	nop
 80008f8:	3770      	adds	r7, #112	@ 0x70
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	58024800 	.word	0x58024800

08000904 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000908:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <MX_I2C1_Init+0x74>)
 800090a:	4a1c      	ldr	r2, [pc, #112]	@ (800097c <MX_I2C1_Init+0x78>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000910:	4a1b      	ldr	r2, [pc, #108]	@ (8000980 <MX_I2C1_Init+0x7c>)
 8000912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000914:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <MX_I2C1_Init+0x74>)
 800091c:	2201      	movs	r2, #1
 800091e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000926:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800093e:	480e      	ldr	r0, [pc, #56]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000940:	f001 f9d6 	bl	8001cf0 <HAL_I2C_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800094a:	f000 f92f 	bl	8000bac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4809      	ldr	r0, [pc, #36]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000952:	f003 f95d 	bl	8003c10 <HAL_I2CEx_ConfigAnalogFilter>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800095c:	f000 f926 	bl	8000bac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000960:	2100      	movs	r1, #0
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000964:	f003 f99f 	bl	8003ca6 <HAL_I2CEx_ConfigDigitalFilter>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800096e:	f000 f91d 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	24000080 	.word	0x24000080
 800097c:	40005400 	.word	0x40005400
 8000980:	00707cbb 	.word	0x00707cbb

08000984 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_Init 0 */

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000988:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <MX_TIM1_Init+0x48>)
 800098a:	4a11      	ldr	r2, [pc, #68]	@ (80009d0 <MX_TIM1_Init+0x4c>)
 800098c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = timer_prescaler;
 800098e:	2363      	movs	r3, #99	@ 0x63
 8000990:	461a      	mov	r2, r3
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_TIM1_Init+0x48>)
 8000994:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000996:	4b0d      	ldr	r3, [pc, #52]	@ (80009cc <MX_TIM1_Init+0x48>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800099c:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <MX_TIM1_Init+0x48>)
 800099e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_TIM1_Init+0x48>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <MX_TIM1_Init+0x48>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_TIM1_Init+0x48>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_TIM1_Init+0x48>)
 80009b8:	f005 ff24 	bl	8006804 <HAL_TIM_Base_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM1_Init+0x42>
  {
    Error_Handler();
 80009c2:	f000 f8f3 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	240000d4 	.word	0x240000d4
 80009d0:	40010000 	.word	0x40010000

080009d4 <EXTI0_IRQHandler>:

/* Interrupt Handler for EXTI line 0 (PA0) */
void EXTI0_IRQHandler(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* Handle the interrupt */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80009d8:	2001      	movs	r0, #1
 80009da:	f001 f96f 	bl	8001cbc <HAL_GPIO_EXTI_IRQHandler>
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <HAL_GPIO_EXTI_Callback>:

/* This function is called inside the HAL library when an EXTI event occurs */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	80fb      	strh	r3, [r7, #6]

	is_data_ready = 1;
 80009ee:	4b04      	ldr	r3, [pc, #16]	@ (8000a00 <HAL_GPIO_EXTI_Callback+0x1c>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
//  if (GPIO_Pin == GPIO_PIN_0) {
//    // Handle the interrupt here (e.g., toggle an LED)
//    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);  // Example: Toggle an LED on PB0
//  }
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	240001b8 	.word	0x240001b8

08000a04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a08:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	@ (8000a54 <MX_USART3_UART_Init+0x50>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a10:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a3c:	f006 f86a 	bl	8006b14 <HAL_UART_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a46:	f000 f8b1 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	24000120 	.word	0x24000120
 8000a54:	40004800 	.word	0x40004800

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b26      	ldr	r3, [pc, #152]	@ (8000af8 <MX_GPIO_Init+0xa0>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a64:	4a24      	ldr	r2, [pc, #144]	@ (8000af8 <MX_GPIO_Init+0xa0>)
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a6e:	4b22      	ldr	r3, [pc, #136]	@ (8000af8 <MX_GPIO_Init+0xa0>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a74:	f003 0302 	and.w	r3, r3, #2
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000af8 <MX_GPIO_Init+0xa0>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a82:	4a1d      	ldr	r2, [pc, #116]	@ (8000af8 <MX_GPIO_Init+0xa0>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000af8 <MX_GPIO_Init+0xa0>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* setup the GPIO interrupt */
  /* Configure GPIO pin PA0 as input with external interrupt (falling edge) */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_0;             // Pin PA0
 8000aaa:	2301      	movs	r3, #1
 8000aac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 8000aae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ab2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;           // No pull-up/pull-down
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	4619      	mov	r1, r3
 8000abe:	480f      	ldr	r0, [pc, #60]	@ (8000afc <MX_GPIO_Init+0xa4>)
 8000ac0:	f000 ff54 	bl	800196c <HAL_GPIO_Init>

  /* Enable and set EXTI line 0 Interrupt in the NVIC (PA0 is connected to EXTI0) */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	2006      	movs	r0, #6
 8000aca:	f000 fc4e 	bl	800136a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f000 fc65 	bl	800139e <HAL_NVIC_EnableIRQ>

  /* Configure GPIO pin PB0 as output for the LED */
  GPIO_InitStruct.Pin = GPIO_PIN_0;             // Pin PB0
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;   // Output push-pull mode
 8000ad8:	2301      	movs	r3, #1
 8000ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;           // No pull-up/pull-down
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;  // Low frequency
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_GPIO_Init+0xa8>)
 8000aec:	f000 ff3e 	bl	800196c <HAL_GPIO_Init>


/* USER CODE END MX_GPIO_Init_2 */
}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	58024400 	.word	0x58024400
 8000afc:	58020000 	.word	0x58020000
 8000b00:	58020400 	.word	0x58020400

08000b04 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b16:	f000 fc5d 	bl	80013d4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b26:	231f      	movs	r3, #31
 8000b28:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b2a:	2387      	movs	r3, #135	@ 0x87
 8000b2c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b32:	2300      	movs	r3, #0
 8000b34:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b36:	2301      	movs	r3, #1
 8000b38:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b46:	463b      	mov	r3, r7
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 fc7b 	bl	8001444 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b4e:	2004      	movs	r0, #4
 8000b50:	f000 fc58 	bl	8001404 <HAL_MPU_Enable>

}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <data_ready_handler>:

void data_ready_handler(){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af02      	add	r7, sp, #8
	// read the data from the registers
	timer_count = htim1.Instance->CNT;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <data_ready_handler+0x40>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <data_ready_handler+0x44>)
 8000b6c:	601a      	str	r2, [r3, #0]
	htim1.Instance->CNT = 0;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <data_ready_handler+0x40>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	@ 0x24
	//set_sampling_rate(&hi2c1, 20);
	uint8_t int_status;
	HAL_I2C_Mem_Read_IT(&hi2c1, dev_address, MPU6050_INT_STATUS_REG, 1, &int_status, 1);
 8000b76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <data_ready_handler+0x48>)
 8000b78:	8819      	ldrh	r1, [r3, #0]
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	2301      	movs	r3, #1
 8000b84:	223a      	movs	r2, #58	@ 0x3a
 8000b86:	4808      	ldr	r0, [pc, #32]	@ (8000ba8 <data_ready_handler+0x4c>)
 8000b88:	f001 f9d8 	bl	8001f3c <HAL_I2C_Mem_Read_IT>
	HAL_Delay(1);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f000 faed 	bl	800116c <HAL_Delay>

  //HAL_I2C_Mem_Write_IT(&hi2c1, 0x21<<1, 0x33, 1, "interrupted", strlen("interrupted"));
  //HAL_Delay(5);

	// clear the data ready register in the MPU6050
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	240000d4 	.word	0x240000d4
 8000ba0:	240001b4 	.word	0x240001b4
 8000ba4:	24000000 	.word	0x24000000
 8000ba8:	24000080 	.word	0x24000080

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_UART_Transmit(&huart3, (uint8_t*)("Error Occurred"), strlen("Error Occurred"), HAL_MAX_DELAY);
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bb4:	220e      	movs	r2, #14
 8000bb6:	4904      	ldr	r1, [pc, #16]	@ (8000bc8 <Error_Handler+0x1c>)
 8000bb8:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <Error_Handler+0x20>)
 8000bba:	f005 fffb 	bl	8006bb4 <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbe:	b672      	cpsid	i
}
 8000bc0:	bf00      	nop
  __disable_irq();
  while (1)
 8000bc2:	bf00      	nop
 8000bc4:	e7fd      	b.n	8000bc2 <Error_Handler+0x16>
 8000bc6:	bf00      	nop
 8000bc8:	0800875c 	.word	0x0800875c
 8000bcc:	24000120 	.word	0x24000120

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <HAL_MspInit+0x30>)
 8000bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bdc:	4a08      	ldr	r2, [pc, #32]	@ (8000c00 <HAL_MspInit+0x30>)
 8000bde:	f043 0302 	orr.w	r3, r3, #2
 8000be2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_MspInit+0x30>)
 8000be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	58024400 	.word	0x58024400

08000c04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b0b8      	sub	sp, #224	@ 0xe0
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	22b8      	movs	r2, #184	@ 0xb8
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f007 f8ff 	bl	8007e28 <memset>
  if(hi2c->Instance==I2C1)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a2f      	ldr	r2, [pc, #188]	@ (8000cec <HAL_I2C_MspInit+0xe8>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d156      	bne.n	8000ce2 <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c34:	f04f 0208 	mov.w	r2, #8
 8000c38:	f04f 0300 	mov.w	r3, #0
 8000c3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f004 f818 	bl	8004c80 <HAL_RCCEx_PeriphCLKConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000c56:	f7ff ffa9 	bl	8000bac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	4b25      	ldr	r3, [pc, #148]	@ (8000cf0 <HAL_I2C_MspInit+0xec>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c60:	4a23      	ldr	r2, [pc, #140]	@ (8000cf0 <HAL_I2C_MspInit+0xec>)
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c6a:	4b21      	ldr	r3, [pc, #132]	@ (8000cf0 <HAL_I2C_MspInit+0xec>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c78:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c80:	2312      	movs	r3, #18
 8000c82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c92:	2304      	movs	r3, #4
 8000c94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4815      	ldr	r0, [pc, #84]	@ (8000cf4 <HAL_I2C_MspInit+0xf0>)
 8000ca0:	f000 fe64 	bl	800196c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ca4:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <HAL_I2C_MspInit+0xec>)
 8000ca6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000caa:	4a11      	ldr	r2, [pc, #68]	@ (8000cf0 <HAL_I2C_MspInit+0xec>)
 8000cac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cb0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <HAL_I2C_MspInit+0xec>)
 8000cb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	201f      	movs	r0, #31
 8000cc8:	f000 fb4f 	bl	800136a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ccc:	201f      	movs	r0, #31
 8000cce:	f000 fb66 	bl	800139e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2020      	movs	r0, #32
 8000cd8:	f000 fb47 	bl	800136a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000cdc:	2020      	movs	r0, #32
 8000cde:	f000 fb5e 	bl	800139e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ce2:	bf00      	nop
 8000ce4:	37e0      	adds	r7, #224	@ 0xe0
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	58024400 	.word	0x58024400
 8000cf4:	58020400 	.word	0x58020400

08000cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0b      	ldr	r2, [pc, #44]	@ (8000d34 <HAL_TIM_Base_MspInit+0x3c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d10e      	bne.n	8000d28 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <HAL_TIM_Base_MspInit+0x40>)
 8000d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d10:	4a09      	ldr	r2, [pc, #36]	@ (8000d38 <HAL_TIM_Base_MspInit+0x40>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <HAL_TIM_Base_MspInit+0x40>)
 8000d1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	40010000 	.word	0x40010000
 8000d38:	58024400 	.word	0x58024400

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0b8      	sub	sp, #224	@ 0xe0
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	22b8      	movs	r2, #184	@ 0xb8
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f007 f863 	bl	8007e28 <memset>
  if(huart->Instance==USART3)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a27      	ldr	r2, [pc, #156]	@ (8000e04 <HAL_UART_MspInit+0xc8>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d146      	bne.n	8000dfa <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d6c:	f04f 0202 	mov.w	r2, #2
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 ff7c 	bl	8004c80 <HAL_RCCEx_PeriphCLKConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d8e:	f7ff ff0d 	bl	8000bac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d92:	4b1d      	ldr	r3, [pc, #116]	@ (8000e08 <HAL_UART_MspInit+0xcc>)
 8000d94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d98:	4a1b      	ldr	r2, [pc, #108]	@ (8000e08 <HAL_UART_MspInit+0xcc>)
 8000d9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d9e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <HAL_UART_MspInit+0xcc>)
 8000da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000da8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db0:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <HAL_UART_MspInit+0xcc>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db6:	4a14      	ldr	r2, [pc, #80]	@ (8000e08 <HAL_UART_MspInit+0xcc>)
 8000db8:	f043 0308 	orr.w	r3, r3, #8
 8000dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <HAL_UART_MspInit+0xcc>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000de8:	2307      	movs	r3, #7
 8000dea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dee:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <HAL_UART_MspInit+0xd0>)
 8000df6:	f000 fdb9 	bl	800196c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000dfa:	bf00      	nop
 8000dfc:	37e0      	adds	r7, #224	@ 0xe0
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40004800 	.word	0x40004800
 8000e08:	58024400 	.word	0x58024400
 8000e0c:	58020c00 	.word	0x58020c00

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <NMI_Handler+0x4>

08000e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <MemManage_Handler+0x4>

08000e28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e66:	f000 f961 	bl	800112c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e74:	4802      	ldr	r0, [pc, #8]	@ (8000e80 <I2C1_EV_IRQHandler+0x10>)
 8000e76:	f001 f8e7 	bl	8002048 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	24000080 	.word	0x24000080

08000e84 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <I2C1_ER_IRQHandler+0x10>)
 8000e8a:	f001 f8f7 	bl	800207c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	24000080 	.word	0x24000080

08000e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea0:	4a14      	ldr	r2, [pc, #80]	@ (8000ef4 <_sbrk+0x5c>)
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <_sbrk+0x60>)
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eac:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <_sbrk+0x64>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	@ (8000f00 <_sbrk+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eba:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d207      	bcs.n	8000ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec8:	f006 ffb6 	bl	8007e38 <__errno>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	220c      	movs	r2, #12
 8000ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ed6:	e009      	b.n	8000eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ede:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <_sbrk+0x64>)
 8000ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eea:	68fb      	ldr	r3, [r7, #12]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	24050000 	.word	0x24050000
 8000ef8:	00000400 	.word	0x00000400
 8000efc:	240001bc 	.word	0x240001bc
 8000f00:	24000310 	.word	0x24000310

08000f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f08:	4b32      	ldr	r3, [pc, #200]	@ (8000fd4 <SystemInit+0xd0>)
 8000f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f0e:	4a31      	ldr	r2, [pc, #196]	@ (8000fd4 <SystemInit+0xd0>)
 8000f10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f18:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd8 <SystemInit+0xd4>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 030f 	and.w	r3, r3, #15
 8000f20:	2b06      	cmp	r3, #6
 8000f22:	d807      	bhi.n	8000f34 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f24:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd8 <SystemInit+0xd4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f023 030f 	bic.w	r3, r3, #15
 8000f2c:	4a2a      	ldr	r2, [pc, #168]	@ (8000fd8 <SystemInit+0xd4>)
 8000f2e:	f043 0307 	orr.w	r3, r3, #7
 8000f32:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f34:	4b29      	ldr	r3, [pc, #164]	@ (8000fdc <SystemInit+0xd8>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a28      	ldr	r2, [pc, #160]	@ (8000fdc <SystemInit+0xd8>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f40:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <SystemInit+0xd8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f46:	4b25      	ldr	r3, [pc, #148]	@ (8000fdc <SystemInit+0xd8>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4924      	ldr	r1, [pc, #144]	@ (8000fdc <SystemInit+0xd8>)
 8000f4c:	4b24      	ldr	r3, [pc, #144]	@ (8000fe0 <SystemInit+0xdc>)
 8000f4e:	4013      	ands	r3, r2
 8000f50:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f52:	4b21      	ldr	r3, [pc, #132]	@ (8000fd8 <SystemInit+0xd4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d007      	beq.n	8000f6e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <SystemInit+0xd4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f023 030f 	bic.w	r3, r3, #15
 8000f66:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd8 <SystemInit+0xd4>)
 8000f68:	f043 0307 	orr.w	r3, r3, #7
 8000f6c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <SystemInit+0xd8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f74:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <SystemInit+0xd8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <SystemInit+0xd8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f80:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <SystemInit+0xd8>)
 8000f82:	4a18      	ldr	r2, [pc, #96]	@ (8000fe4 <SystemInit+0xe0>)
 8000f84:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f86:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <SystemInit+0xd8>)
 8000f88:	4a17      	ldr	r2, [pc, #92]	@ (8000fe8 <SystemInit+0xe4>)
 8000f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f8c:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <SystemInit+0xd8>)
 8000f8e:	4a17      	ldr	r2, [pc, #92]	@ (8000fec <SystemInit+0xe8>)
 8000f90:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f92:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <SystemInit+0xd8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f98:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <SystemInit+0xd8>)
 8000f9a:	4a14      	ldr	r2, [pc, #80]	@ (8000fec <SystemInit+0xe8>)
 8000f9c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <SystemInit+0xd8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <SystemInit+0xd8>)
 8000fa6:	4a11      	ldr	r2, [pc, #68]	@ (8000fec <SystemInit+0xe8>)
 8000fa8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000faa:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <SystemInit+0xd8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <SystemInit+0xd8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a09      	ldr	r2, [pc, #36]	@ (8000fdc <SystemInit+0xd8>)
 8000fb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <SystemInit+0xd8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <SystemInit+0xec>)
 8000fc4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000fc8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00
 8000fd8:	52002000 	.word	0x52002000
 8000fdc:	58024400 	.word	0x58024400
 8000fe0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fe4:	02020200 	.word	0x02020200
 8000fe8:	01ff0000 	.word	0x01ff0000
 8000fec:	01010280 	.word	0x01010280
 8000ff0:	52004000 	.word	0x52004000

08000ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ff4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800102c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ff8:	f7ff ff84 	bl	8000f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ffc:	480c      	ldr	r0, [pc, #48]	@ (8001030 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ffe:	490d      	ldr	r1, [pc, #52]	@ (8001034 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001000:	4a0d      	ldr	r2, [pc, #52]	@ (8001038 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001014:	4c0a      	ldr	r4, [pc, #40]	@ (8001040 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001022:	f006 ff0f 	bl	8007e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001026:	f7ff fb43 	bl	80006b0 <main>
  bx  lr
 800102a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800102c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001030:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001034:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001038:	080087d8 	.word	0x080087d8
  ldr r2, =_sbss
 800103c:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8001040:	2400030c 	.word	0x2400030c

08001044 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC3_IRQHandler>
	...

08001048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104e:	2003      	movs	r0, #3
 8001050:	f000 f980 	bl	8001354 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001054:	f003 fc3e 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8001058:	4602      	mov	r2, r0
 800105a:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <HAL_Init+0x68>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	0a1b      	lsrs	r3, r3, #8
 8001060:	f003 030f 	and.w	r3, r3, #15
 8001064:	4913      	ldr	r1, [pc, #76]	@ (80010b4 <HAL_Init+0x6c>)
 8001066:	5ccb      	ldrb	r3, [r1, r3]
 8001068:	f003 031f 	and.w	r3, r3, #31
 800106c:	fa22 f303 	lsr.w	r3, r2, r3
 8001070:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001072:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <HAL_Init+0x68>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	4a0e      	ldr	r2, [pc, #56]	@ (80010b4 <HAL_Init+0x6c>)
 800107c:	5cd3      	ldrb	r3, [r2, r3]
 800107e:	f003 031f 	and.w	r3, r3, #31
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	fa22 f303 	lsr.w	r3, r2, r3
 8001088:	4a0b      	ldr	r2, [pc, #44]	@ (80010b8 <HAL_Init+0x70>)
 800108a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800108c:	4a0b      	ldr	r2, [pc, #44]	@ (80010bc <HAL_Init+0x74>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001092:	200f      	movs	r0, #15
 8001094:	f000 f814 	bl	80010c0 <HAL_InitTick>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e002      	b.n	80010a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010a2:	f7ff fd95 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	58024400 	.word	0x58024400
 80010b4:	0800876c 	.word	0x0800876c
 80010b8:	24000008 	.word	0x24000008
 80010bc:	24000004 	.word	0x24000004

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <HAL_InitTick+0x60>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e021      	b.n	8001118 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010d4:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <HAL_InitTick+0x64>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <HAL_InitTick+0x60>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f965 	bl	80013ba <HAL_SYSTICK_Config>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e00e      	b.n	8001118 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b0f      	cmp	r3, #15
 80010fe:	d80a      	bhi.n	8001116 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001100:	2200      	movs	r2, #0
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001108:	f000 f92f 	bl	800136a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800110c:	4a06      	ldr	r2, [pc, #24]	@ (8001128 <HAL_InitTick+0x68>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	e000      	b.n	8001118 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	24000010 	.word	0x24000010
 8001124:	24000004 	.word	0x24000004
 8001128:	2400000c 	.word	0x2400000c

0800112c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_IncTick+0x20>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_IncTick+0x24>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4413      	add	r3, r2
 800113c:	4a04      	ldr	r2, [pc, #16]	@ (8001150 <HAL_IncTick+0x24>)
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	24000010 	.word	0x24000010
 8001150:	240001c0 	.word	0x240001c0

08001154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return uwTick;
 8001158:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <HAL_GetTick+0x14>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	240001c0 	.word	0x240001c0

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff ffee 	bl	8001154 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001184:	d005      	beq.n	8001192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <HAL_Delay+0x44>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001192:	bf00      	nop
 8001194:	f7ff ffde 	bl	8001154 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d8f7      	bhi.n	8001194 <HAL_Delay+0x28>
  {
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	24000010 	.word	0x24000010

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <__NVIC_SetPriorityGrouping+0x40>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <__NVIC_SetPriorityGrouping+0x40>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00
 80011f8:	05fa0000 	.word	0x05fa0000

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0b      	blt.n	8001242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4907      	ldr	r1, [pc, #28]	@ (8001250 <__NVIC_EnableIRQ+0x38>)
 8001232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	2001      	movs	r0, #1
 800123a:	fa00 f202 	lsl.w	r2, r0, r2
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000e100 	.word	0xe000e100

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001260:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001264:	2b00      	cmp	r3, #0
 8001266:	db0a      	blt.n	800127e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	490c      	ldr	r1, [pc, #48]	@ (80012a0 <__NVIC_SetPriority+0x4c>)
 800126e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001272:	0112      	lsls	r2, r2, #4
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	440b      	add	r3, r1
 8001278:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800127c:	e00a      	b.n	8001294 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4908      	ldr	r1, [pc, #32]	@ (80012a4 <__NVIC_SetPriority+0x50>)
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	3b04      	subs	r3, #4
 800128c:	0112      	lsls	r2, r2, #4
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	440b      	add	r3, r1
 8001292:	761a      	strb	r2, [r3, #24]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000e100 	.word	0xe000e100
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	@ 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f1c3 0307 	rsb	r3, r3, #7
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	bf28      	it	cs
 80012c6:	2304      	movcs	r3, #4
 80012c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3304      	adds	r3, #4
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d902      	bls.n	80012d8 <NVIC_EncodePriority+0x30>
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3b03      	subs	r3, #3
 80012d6:	e000      	b.n	80012da <NVIC_EncodePriority+0x32>
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	401a      	ands	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	43d9      	mvns	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	4313      	orrs	r3, r2
         );
}
 8001302:	4618      	mov	r0, r3
 8001304:	3724      	adds	r7, #36	@ 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001320:	d301      	bcc.n	8001326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001322:	2301      	movs	r3, #1
 8001324:	e00f      	b.n	8001346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001326:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <SysTick_Config+0x40>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132e:	210f      	movs	r1, #15
 8001330:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001334:	f7ff ff8e 	bl	8001254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <SysTick_Config+0x40>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133e:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <SysTick_Config+0x40>)
 8001340:	2207      	movs	r2, #7
 8001342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	e000e010 	.word	0xe000e010

08001354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff29 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001378:	f7ff ff40 	bl	80011fc <__NVIC_GetPriorityGrouping>
 800137c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	6978      	ldr	r0, [r7, #20]
 8001384:	f7ff ff90 	bl	80012a8 <NVIC_EncodePriority>
 8001388:	4602      	mov	r2, r0
 800138a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff5f 	bl	8001254 <__NVIC_SetPriority>
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff33 	bl	8001218 <__NVIC_EnableIRQ>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ffa4 	bl	8001310 <SysTick_Config>
 80013c8:	4603      	mov	r3, r0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80013d8:	f3bf 8f5f 	dmb	sy
}
 80013dc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80013de:	4b07      	ldr	r3, [pc, #28]	@ (80013fc <HAL_MPU_Disable+0x28>)
 80013e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e2:	4a06      	ldr	r2, [pc, #24]	@ (80013fc <HAL_MPU_Disable+0x28>)
 80013e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013e8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80013ea:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <HAL_MPU_Disable+0x2c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00
 8001400:	e000ed90 	.word	0xe000ed90

08001404 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800140c:	4a0b      	ldr	r2, [pc, #44]	@ (800143c <HAL_MPU_Enable+0x38>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <HAL_MPU_Enable+0x3c>)
 8001418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141a:	4a09      	ldr	r2, [pc, #36]	@ (8001440 <HAL_MPU_Enable+0x3c>)
 800141c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001420:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001422:	f3bf 8f4f 	dsb	sy
}
 8001426:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001428:	f3bf 8f6f 	isb	sy
}
 800142c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed90 	.word	0xe000ed90
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	785a      	ldrb	r2, [r3, #1]
 8001450:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <HAL_MPU_ConfigRegion+0x7c>)
 8001452:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001454:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <HAL_MPU_ConfigRegion+0x7c>)
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	4a19      	ldr	r2, [pc, #100]	@ (80014c0 <HAL_MPU_ConfigRegion+0x7c>)
 800145a:	f023 0301 	bic.w	r3, r3, #1
 800145e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001460:	4a17      	ldr	r2, [pc, #92]	@ (80014c0 <HAL_MPU_ConfigRegion+0x7c>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	7b1b      	ldrb	r3, [r3, #12]
 800146c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7adb      	ldrb	r3, [r3, #11]
 8001472:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001474:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7a9b      	ldrb	r3, [r3, #10]
 800147a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800147c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7b5b      	ldrb	r3, [r3, #13]
 8001482:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001484:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7b9b      	ldrb	r3, [r3, #14]
 800148a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800148c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7bdb      	ldrb	r3, [r3, #15]
 8001492:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001494:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7a5b      	ldrb	r3, [r3, #9]
 800149a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800149c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	7a1b      	ldrb	r3, [r3, #8]
 80014a2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014a4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	7812      	ldrb	r2, [r2, #0]
 80014aa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014ac:	4a04      	ldr	r2, [pc, #16]	@ (80014c0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014ae:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014b0:	6113      	str	r3, [r2, #16]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed90 	.word	0xe000ed90

080014c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e237      	b.n	8001946 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d004      	beq.n	80014ec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2280      	movs	r2, #128	@ 0x80
 80014e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e22c      	b.n	8001946 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a5c      	ldr	r2, [pc, #368]	@ (8001664 <HAL_DMA_Abort_IT+0x1a0>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d04a      	beq.n	800158c <HAL_DMA_Abort_IT+0xc8>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001668 <HAL_DMA_Abort_IT+0x1a4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d045      	beq.n	800158c <HAL_DMA_Abort_IT+0xc8>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a59      	ldr	r2, [pc, #356]	@ (800166c <HAL_DMA_Abort_IT+0x1a8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d040      	beq.n	800158c <HAL_DMA_Abort_IT+0xc8>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a58      	ldr	r2, [pc, #352]	@ (8001670 <HAL_DMA_Abort_IT+0x1ac>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d03b      	beq.n	800158c <HAL_DMA_Abort_IT+0xc8>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a56      	ldr	r2, [pc, #344]	@ (8001674 <HAL_DMA_Abort_IT+0x1b0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d036      	beq.n	800158c <HAL_DMA_Abort_IT+0xc8>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a55      	ldr	r2, [pc, #340]	@ (8001678 <HAL_DMA_Abort_IT+0x1b4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d031      	beq.n	800158c <HAL_DMA_Abort_IT+0xc8>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a53      	ldr	r2, [pc, #332]	@ (800167c <HAL_DMA_Abort_IT+0x1b8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d02c      	beq.n	800158c <HAL_DMA_Abort_IT+0xc8>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a52      	ldr	r2, [pc, #328]	@ (8001680 <HAL_DMA_Abort_IT+0x1bc>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d027      	beq.n	800158c <HAL_DMA_Abort_IT+0xc8>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a50      	ldr	r2, [pc, #320]	@ (8001684 <HAL_DMA_Abort_IT+0x1c0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d022      	beq.n	800158c <HAL_DMA_Abort_IT+0xc8>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a4f      	ldr	r2, [pc, #316]	@ (8001688 <HAL_DMA_Abort_IT+0x1c4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d01d      	beq.n	800158c <HAL_DMA_Abort_IT+0xc8>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a4d      	ldr	r2, [pc, #308]	@ (800168c <HAL_DMA_Abort_IT+0x1c8>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d018      	beq.n	800158c <HAL_DMA_Abort_IT+0xc8>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a4c      	ldr	r2, [pc, #304]	@ (8001690 <HAL_DMA_Abort_IT+0x1cc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d013      	beq.n	800158c <HAL_DMA_Abort_IT+0xc8>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a4a      	ldr	r2, [pc, #296]	@ (8001694 <HAL_DMA_Abort_IT+0x1d0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d00e      	beq.n	800158c <HAL_DMA_Abort_IT+0xc8>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a49      	ldr	r2, [pc, #292]	@ (8001698 <HAL_DMA_Abort_IT+0x1d4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d009      	beq.n	800158c <HAL_DMA_Abort_IT+0xc8>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a47      	ldr	r2, [pc, #284]	@ (800169c <HAL_DMA_Abort_IT+0x1d8>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d004      	beq.n	800158c <HAL_DMA_Abort_IT+0xc8>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a46      	ldr	r2, [pc, #280]	@ (80016a0 <HAL_DMA_Abort_IT+0x1dc>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d101      	bne.n	8001590 <HAL_DMA_Abort_IT+0xcc>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <HAL_DMA_Abort_IT+0xce>
 8001590:	2300      	movs	r3, #0
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 8086 	beq.w	80016a4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2204      	movs	r2, #4
 800159c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a2f      	ldr	r2, [pc, #188]	@ (8001664 <HAL_DMA_Abort_IT+0x1a0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d04a      	beq.n	8001640 <HAL_DMA_Abort_IT+0x17c>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a2e      	ldr	r2, [pc, #184]	@ (8001668 <HAL_DMA_Abort_IT+0x1a4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d045      	beq.n	8001640 <HAL_DMA_Abort_IT+0x17c>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a2c      	ldr	r2, [pc, #176]	@ (800166c <HAL_DMA_Abort_IT+0x1a8>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d040      	beq.n	8001640 <HAL_DMA_Abort_IT+0x17c>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a2b      	ldr	r2, [pc, #172]	@ (8001670 <HAL_DMA_Abort_IT+0x1ac>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d03b      	beq.n	8001640 <HAL_DMA_Abort_IT+0x17c>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a29      	ldr	r2, [pc, #164]	@ (8001674 <HAL_DMA_Abort_IT+0x1b0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d036      	beq.n	8001640 <HAL_DMA_Abort_IT+0x17c>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a28      	ldr	r2, [pc, #160]	@ (8001678 <HAL_DMA_Abort_IT+0x1b4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d031      	beq.n	8001640 <HAL_DMA_Abort_IT+0x17c>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a26      	ldr	r2, [pc, #152]	@ (800167c <HAL_DMA_Abort_IT+0x1b8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d02c      	beq.n	8001640 <HAL_DMA_Abort_IT+0x17c>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a25      	ldr	r2, [pc, #148]	@ (8001680 <HAL_DMA_Abort_IT+0x1bc>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d027      	beq.n	8001640 <HAL_DMA_Abort_IT+0x17c>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a23      	ldr	r2, [pc, #140]	@ (8001684 <HAL_DMA_Abort_IT+0x1c0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d022      	beq.n	8001640 <HAL_DMA_Abort_IT+0x17c>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a22      	ldr	r2, [pc, #136]	@ (8001688 <HAL_DMA_Abort_IT+0x1c4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d01d      	beq.n	8001640 <HAL_DMA_Abort_IT+0x17c>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a20      	ldr	r2, [pc, #128]	@ (800168c <HAL_DMA_Abort_IT+0x1c8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d018      	beq.n	8001640 <HAL_DMA_Abort_IT+0x17c>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a1f      	ldr	r2, [pc, #124]	@ (8001690 <HAL_DMA_Abort_IT+0x1cc>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d013      	beq.n	8001640 <HAL_DMA_Abort_IT+0x17c>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1d      	ldr	r2, [pc, #116]	@ (8001694 <HAL_DMA_Abort_IT+0x1d0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00e      	beq.n	8001640 <HAL_DMA_Abort_IT+0x17c>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a1c      	ldr	r2, [pc, #112]	@ (8001698 <HAL_DMA_Abort_IT+0x1d4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d009      	beq.n	8001640 <HAL_DMA_Abort_IT+0x17c>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1a      	ldr	r2, [pc, #104]	@ (800169c <HAL_DMA_Abort_IT+0x1d8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d004      	beq.n	8001640 <HAL_DMA_Abort_IT+0x17c>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a19      	ldr	r2, [pc, #100]	@ (80016a0 <HAL_DMA_Abort_IT+0x1dc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d108      	bne.n	8001652 <HAL_DMA_Abort_IT+0x18e>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0201 	bic.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	e178      	b.n	8001944 <HAL_DMA_Abort_IT+0x480>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0201 	bic.w	r2, r2, #1
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e16f      	b.n	8001944 <HAL_DMA_Abort_IT+0x480>
 8001664:	40020010 	.word	0x40020010
 8001668:	40020028 	.word	0x40020028
 800166c:	40020040 	.word	0x40020040
 8001670:	40020058 	.word	0x40020058
 8001674:	40020070 	.word	0x40020070
 8001678:	40020088 	.word	0x40020088
 800167c:	400200a0 	.word	0x400200a0
 8001680:	400200b8 	.word	0x400200b8
 8001684:	40020410 	.word	0x40020410
 8001688:	40020428 	.word	0x40020428
 800168c:	40020440 	.word	0x40020440
 8001690:	40020458 	.word	0x40020458
 8001694:	40020470 	.word	0x40020470
 8001698:	40020488 	.word	0x40020488
 800169c:	400204a0 	.word	0x400204a0
 80016a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 020e 	bic.w	r2, r2, #14
 80016b2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a6c      	ldr	r2, [pc, #432]	@ (800186c <HAL_DMA_Abort_IT+0x3a8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d04a      	beq.n	8001754 <HAL_DMA_Abort_IT+0x290>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a6b      	ldr	r2, [pc, #428]	@ (8001870 <HAL_DMA_Abort_IT+0x3ac>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d045      	beq.n	8001754 <HAL_DMA_Abort_IT+0x290>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a69      	ldr	r2, [pc, #420]	@ (8001874 <HAL_DMA_Abort_IT+0x3b0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d040      	beq.n	8001754 <HAL_DMA_Abort_IT+0x290>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a68      	ldr	r2, [pc, #416]	@ (8001878 <HAL_DMA_Abort_IT+0x3b4>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d03b      	beq.n	8001754 <HAL_DMA_Abort_IT+0x290>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a66      	ldr	r2, [pc, #408]	@ (800187c <HAL_DMA_Abort_IT+0x3b8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d036      	beq.n	8001754 <HAL_DMA_Abort_IT+0x290>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a65      	ldr	r2, [pc, #404]	@ (8001880 <HAL_DMA_Abort_IT+0x3bc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d031      	beq.n	8001754 <HAL_DMA_Abort_IT+0x290>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a63      	ldr	r2, [pc, #396]	@ (8001884 <HAL_DMA_Abort_IT+0x3c0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d02c      	beq.n	8001754 <HAL_DMA_Abort_IT+0x290>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a62      	ldr	r2, [pc, #392]	@ (8001888 <HAL_DMA_Abort_IT+0x3c4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d027      	beq.n	8001754 <HAL_DMA_Abort_IT+0x290>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a60      	ldr	r2, [pc, #384]	@ (800188c <HAL_DMA_Abort_IT+0x3c8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d022      	beq.n	8001754 <HAL_DMA_Abort_IT+0x290>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a5f      	ldr	r2, [pc, #380]	@ (8001890 <HAL_DMA_Abort_IT+0x3cc>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d01d      	beq.n	8001754 <HAL_DMA_Abort_IT+0x290>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a5d      	ldr	r2, [pc, #372]	@ (8001894 <HAL_DMA_Abort_IT+0x3d0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d018      	beq.n	8001754 <HAL_DMA_Abort_IT+0x290>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a5c      	ldr	r2, [pc, #368]	@ (8001898 <HAL_DMA_Abort_IT+0x3d4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d013      	beq.n	8001754 <HAL_DMA_Abort_IT+0x290>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a5a      	ldr	r2, [pc, #360]	@ (800189c <HAL_DMA_Abort_IT+0x3d8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d00e      	beq.n	8001754 <HAL_DMA_Abort_IT+0x290>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a59      	ldr	r2, [pc, #356]	@ (80018a0 <HAL_DMA_Abort_IT+0x3dc>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d009      	beq.n	8001754 <HAL_DMA_Abort_IT+0x290>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a57      	ldr	r2, [pc, #348]	@ (80018a4 <HAL_DMA_Abort_IT+0x3e0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d004      	beq.n	8001754 <HAL_DMA_Abort_IT+0x290>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a56      	ldr	r2, [pc, #344]	@ (80018a8 <HAL_DMA_Abort_IT+0x3e4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d108      	bne.n	8001766 <HAL_DMA_Abort_IT+0x2a2>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0201 	bic.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e007      	b.n	8001776 <HAL_DMA_Abort_IT+0x2b2>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0201 	bic.w	r2, r2, #1
 8001774:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a3c      	ldr	r2, [pc, #240]	@ (800186c <HAL_DMA_Abort_IT+0x3a8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d072      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a3a      	ldr	r2, [pc, #232]	@ (8001870 <HAL_DMA_Abort_IT+0x3ac>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d06d      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a39      	ldr	r2, [pc, #228]	@ (8001874 <HAL_DMA_Abort_IT+0x3b0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d068      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a37      	ldr	r2, [pc, #220]	@ (8001878 <HAL_DMA_Abort_IT+0x3b4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d063      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a36      	ldr	r2, [pc, #216]	@ (800187c <HAL_DMA_Abort_IT+0x3b8>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d05e      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a34      	ldr	r2, [pc, #208]	@ (8001880 <HAL_DMA_Abort_IT+0x3bc>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d059      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a33      	ldr	r2, [pc, #204]	@ (8001884 <HAL_DMA_Abort_IT+0x3c0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d054      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a31      	ldr	r2, [pc, #196]	@ (8001888 <HAL_DMA_Abort_IT+0x3c4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d04f      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a30      	ldr	r2, [pc, #192]	@ (800188c <HAL_DMA_Abort_IT+0x3c8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d04a      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a2e      	ldr	r2, [pc, #184]	@ (8001890 <HAL_DMA_Abort_IT+0x3cc>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d045      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a2d      	ldr	r2, [pc, #180]	@ (8001894 <HAL_DMA_Abort_IT+0x3d0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d040      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001898 <HAL_DMA_Abort_IT+0x3d4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d03b      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a2a      	ldr	r2, [pc, #168]	@ (800189c <HAL_DMA_Abort_IT+0x3d8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d036      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a28      	ldr	r2, [pc, #160]	@ (80018a0 <HAL_DMA_Abort_IT+0x3dc>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d031      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a27      	ldr	r2, [pc, #156]	@ (80018a4 <HAL_DMA_Abort_IT+0x3e0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d02c      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a25      	ldr	r2, [pc, #148]	@ (80018a8 <HAL_DMA_Abort_IT+0x3e4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d027      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a24      	ldr	r2, [pc, #144]	@ (80018ac <HAL_DMA_Abort_IT+0x3e8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d022      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a22      	ldr	r2, [pc, #136]	@ (80018b0 <HAL_DMA_Abort_IT+0x3ec>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d01d      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a21      	ldr	r2, [pc, #132]	@ (80018b4 <HAL_DMA_Abort_IT+0x3f0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d018      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a1f      	ldr	r2, [pc, #124]	@ (80018b8 <HAL_DMA_Abort_IT+0x3f4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d013      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1e      	ldr	r2, [pc, #120]	@ (80018bc <HAL_DMA_Abort_IT+0x3f8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d00e      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a1c      	ldr	r2, [pc, #112]	@ (80018c0 <HAL_DMA_Abort_IT+0x3fc>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d009      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1b      	ldr	r2, [pc, #108]	@ (80018c4 <HAL_DMA_Abort_IT+0x400>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d004      	beq.n	8001866 <HAL_DMA_Abort_IT+0x3a2>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a19      	ldr	r2, [pc, #100]	@ (80018c8 <HAL_DMA_Abort_IT+0x404>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d132      	bne.n	80018cc <HAL_DMA_Abort_IT+0x408>
 8001866:	2301      	movs	r3, #1
 8001868:	e031      	b.n	80018ce <HAL_DMA_Abort_IT+0x40a>
 800186a:	bf00      	nop
 800186c:	40020010 	.word	0x40020010
 8001870:	40020028 	.word	0x40020028
 8001874:	40020040 	.word	0x40020040
 8001878:	40020058 	.word	0x40020058
 800187c:	40020070 	.word	0x40020070
 8001880:	40020088 	.word	0x40020088
 8001884:	400200a0 	.word	0x400200a0
 8001888:	400200b8 	.word	0x400200b8
 800188c:	40020410 	.word	0x40020410
 8001890:	40020428 	.word	0x40020428
 8001894:	40020440 	.word	0x40020440
 8001898:	40020458 	.word	0x40020458
 800189c:	40020470 	.word	0x40020470
 80018a0:	40020488 	.word	0x40020488
 80018a4:	400204a0 	.word	0x400204a0
 80018a8:	400204b8 	.word	0x400204b8
 80018ac:	58025408 	.word	0x58025408
 80018b0:	5802541c 	.word	0x5802541c
 80018b4:	58025430 	.word	0x58025430
 80018b8:	58025444 	.word	0x58025444
 80018bc:	58025458 	.word	0x58025458
 80018c0:	5802546c 	.word	0x5802546c
 80018c4:	58025480 	.word	0x58025480
 80018c8:	58025494 	.word	0x58025494
 80018cc:	2300      	movs	r3, #0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d028      	beq.n	8001924 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018e0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ec:	f003 031f 	and.w	r3, r3, #31
 80018f0:	2201      	movs	r2, #1
 80018f2:	409a      	lsls	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001900:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00c      	beq.n	8001924 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001914:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001918:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001922:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop

08001950 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800195e:	b2db      	uxtb	r3, r3
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	@ 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800197a:	4b86      	ldr	r3, [pc, #536]	@ (8001b94 <HAL_GPIO_Init+0x228>)
 800197c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800197e:	e18c      	b.n	8001c9a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2101      	movs	r1, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 817e 	beq.w	8001c94 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d005      	beq.n	80019b0 <HAL_GPIO_Init+0x44>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d130      	bne.n	8001a12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019e6:	2201      	movs	r2, #1
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	091b      	lsrs	r3, r3, #4
 80019fc:	f003 0201 	and.w	r2, r3, #1
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d017      	beq.n	8001a4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	2203      	movs	r2, #3
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d123      	bne.n	8001aa2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	08da      	lsrs	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3208      	adds	r2, #8
 8001a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	220f      	movs	r2, #15
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	08da      	lsrs	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3208      	adds	r2, #8
 8001a9c:	69b9      	ldr	r1, [r7, #24]
 8001a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0203 	and.w	r2, r3, #3
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 80d8 	beq.w	8001c94 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b98 <HAL_GPIO_Init+0x22c>)
 8001ae6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001aea:	4a2b      	ldr	r2, [pc, #172]	@ (8001b98 <HAL_GPIO_Init+0x22c>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001af4:	4b28      	ldr	r3, [pc, #160]	@ (8001b98 <HAL_GPIO_Init+0x22c>)
 8001af6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b02:	4a26      	ldr	r2, [pc, #152]	@ (8001b9c <HAL_GPIO_Init+0x230>)
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	3302      	adds	r3, #2
 8001b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	220f      	movs	r2, #15
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a1d      	ldr	r2, [pc, #116]	@ (8001ba0 <HAL_GPIO_Init+0x234>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d04a      	beq.n	8001bc4 <HAL_GPIO_Init+0x258>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba4 <HAL_GPIO_Init+0x238>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d02b      	beq.n	8001b8e <HAL_GPIO_Init+0x222>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a1b      	ldr	r2, [pc, #108]	@ (8001ba8 <HAL_GPIO_Init+0x23c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d025      	beq.n	8001b8a <HAL_GPIO_Init+0x21e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a1a      	ldr	r2, [pc, #104]	@ (8001bac <HAL_GPIO_Init+0x240>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d01f      	beq.n	8001b86 <HAL_GPIO_Init+0x21a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a19      	ldr	r2, [pc, #100]	@ (8001bb0 <HAL_GPIO_Init+0x244>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d019      	beq.n	8001b82 <HAL_GPIO_Init+0x216>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a18      	ldr	r2, [pc, #96]	@ (8001bb4 <HAL_GPIO_Init+0x248>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d013      	beq.n	8001b7e <HAL_GPIO_Init+0x212>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a17      	ldr	r2, [pc, #92]	@ (8001bb8 <HAL_GPIO_Init+0x24c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d00d      	beq.n	8001b7a <HAL_GPIO_Init+0x20e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a16      	ldr	r2, [pc, #88]	@ (8001bbc <HAL_GPIO_Init+0x250>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d007      	beq.n	8001b76 <HAL_GPIO_Init+0x20a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a15      	ldr	r2, [pc, #84]	@ (8001bc0 <HAL_GPIO_Init+0x254>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d101      	bne.n	8001b72 <HAL_GPIO_Init+0x206>
 8001b6e:	2309      	movs	r3, #9
 8001b70:	e029      	b.n	8001bc6 <HAL_GPIO_Init+0x25a>
 8001b72:	230a      	movs	r3, #10
 8001b74:	e027      	b.n	8001bc6 <HAL_GPIO_Init+0x25a>
 8001b76:	2307      	movs	r3, #7
 8001b78:	e025      	b.n	8001bc6 <HAL_GPIO_Init+0x25a>
 8001b7a:	2306      	movs	r3, #6
 8001b7c:	e023      	b.n	8001bc6 <HAL_GPIO_Init+0x25a>
 8001b7e:	2305      	movs	r3, #5
 8001b80:	e021      	b.n	8001bc6 <HAL_GPIO_Init+0x25a>
 8001b82:	2304      	movs	r3, #4
 8001b84:	e01f      	b.n	8001bc6 <HAL_GPIO_Init+0x25a>
 8001b86:	2303      	movs	r3, #3
 8001b88:	e01d      	b.n	8001bc6 <HAL_GPIO_Init+0x25a>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e01b      	b.n	8001bc6 <HAL_GPIO_Init+0x25a>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e019      	b.n	8001bc6 <HAL_GPIO_Init+0x25a>
 8001b92:	bf00      	nop
 8001b94:	58000080 	.word	0x58000080
 8001b98:	58024400 	.word	0x58024400
 8001b9c:	58000400 	.word	0x58000400
 8001ba0:	58020000 	.word	0x58020000
 8001ba4:	58020400 	.word	0x58020400
 8001ba8:	58020800 	.word	0x58020800
 8001bac:	58020c00 	.word	0x58020c00
 8001bb0:	58021000 	.word	0x58021000
 8001bb4:	58021400 	.word	0x58021400
 8001bb8:	58021800 	.word	0x58021800
 8001bbc:	58021c00 	.word	0x58021c00
 8001bc0:	58022400 	.word	0x58022400
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	f002 0203 	and.w	r2, r2, #3
 8001bcc:	0092      	lsls	r2, r2, #2
 8001bce:	4093      	lsls	r3, r2
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd6:	4938      	ldr	r1, [pc, #224]	@ (8001cb8 <HAL_GPIO_Init+0x34c>)
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	089b      	lsrs	r3, r3, #2
 8001bdc:	3302      	adds	r3, #2
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	3301      	adds	r3, #1
 8001c98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f47f ae6b 	bne.w	8001980 <HAL_GPIO_Init+0x14>
  }
}
 8001caa:	bf00      	nop
 8001cac:	bf00      	nop
 8001cae:	3724      	adds	r7, #36	@ 0x24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	58000400 	.word	0x58000400

08001cbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cca:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d008      	beq.n	8001ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fe7e 	bl	80009e4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e08b      	b.n	8001e1a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7fe ff74 	bl	8000c04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2224      	movs	r2, #36	@ 0x24
 8001d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d107      	bne.n	8001d6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	e006      	b.n	8001d78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d108      	bne.n	8001d92 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	e007      	b.n	8001da2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001da0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6859      	ldr	r1, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b1d      	ldr	r3, [pc, #116]	@ (8001e24 <HAL_I2C_Init+0x134>)
 8001dae:	430b      	orrs	r3, r1
 8001db0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69d9      	ldr	r1, [r3, #28]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1a      	ldr	r2, [r3, #32]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2220      	movs	r2, #32
 8001e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	02008000 	.word	0x02008000

08001e28 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	4608      	mov	r0, r1
 8001e32:	4611      	mov	r1, r2
 8001e34:	461a      	mov	r2, r3
 8001e36:	4603      	mov	r3, r0
 8001e38:	817b      	strh	r3, [r7, #10]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	813b      	strh	r3, [r7, #8]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b20      	cmp	r3, #32
 8001e4c:	d16a      	bne.n	8001f24 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <HAL_I2C_Mem_Write_IT+0x32>
 8001e54:	8bbb      	ldrh	r3, [r7, #28]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d105      	bne.n	8001e66 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e60:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e05f      	b.n	8001f26 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e74:	d101      	bne.n	8001e7a <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8001e76:	2302      	movs	r3, #2
 8001e78:	e055      	b.n	8001f26 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_I2C_Mem_Write_IT+0x60>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e04e      	b.n	8001f26 <HAL_I2C_Mem_Write_IT+0xfe>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2221      	movs	r2, #33	@ 0x21
 8001e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2240      	movs	r2, #64	@ 0x40
 8001e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8bba      	ldrh	r2, [r7, #28]
 8001eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4a1d      	ldr	r2, [pc, #116]	@ (8001f30 <HAL_I2C_Mem_Write_IT+0x108>)
 8001ebc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f34 <HAL_I2C_Mem_Write_IT+0x10c>)
 8001ec2:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8001ec4:	897a      	ldrh	r2, [r7, #10]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d109      	bne.n	8001ee4 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ed0:	893b      	ldrh	r3, [r7, #8]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ee0:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ee2:	e00b      	b.n	8001efc <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ee4:	893b      	ldrh	r3, [r7, #8]
 8001ee6:	0a1b      	lsrs	r3, r3, #8
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001ef2:	893b      	ldrh	r3, [r7, #8]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	8979      	ldrh	r1, [r7, #10]
 8001f02:	4b0d      	ldr	r3, [pc, #52]	@ (8001f38 <HAL_I2C_Mem_Write_IT+0x110>)
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f001 fd6c 	bl	80039e8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f18:	2101      	movs	r1, #1
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f001 fd96 	bl	8003a4c <I2C_Enable_IRQ>

    return HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e000      	b.n	8001f26 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001f24:	2302      	movs	r3, #2
  }
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	ffff0000 	.word	0xffff0000
 8001f34:	08002205 	.word	0x08002205
 8001f38:	80002000 	.word	0x80002000

08001f3c <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af02      	add	r7, sp, #8
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	4608      	mov	r0, r1
 8001f46:	4611      	mov	r1, r2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	817b      	strh	r3, [r7, #10]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	813b      	strh	r3, [r7, #8]
 8001f52:	4613      	mov	r3, r2
 8001f54:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b20      	cmp	r3, #32
 8001f60:	d166      	bne.n	8002030 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_I2C_Mem_Read_IT+0x32>
 8001f68:	8bbb      	ldrh	r3, [r7, #28]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d105      	bne.n	8001f7a <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f74:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e05b      	b.n	8002032 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f88:	d101      	bne.n	8001f8e <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e051      	b.n	8002032 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_I2C_Mem_Read_IT+0x60>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e04a      	b.n	8002032 <HAL_I2C_Mem_Read_IT+0xf6>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2222      	movs	r2, #34	@ 0x22
 8001fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2240      	movs	r2, #64	@ 0x40
 8001fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8bba      	ldrh	r2, [r7, #28]
 8001fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800203c <HAL_I2C_Mem_Read_IT+0x100>)
 8001fca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4a1c      	ldr	r2, [pc, #112]	@ (8002040 <HAL_I2C_Mem_Read_IT+0x104>)
 8001fd0:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8001fd2:	897a      	ldrh	r2, [r7, #10]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d109      	bne.n	8001ff2 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fde:	893b      	ldrh	r3, [r7, #8]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fee:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ff0:	e00b      	b.n	800200a <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ff2:	893b      	ldrh	r3, [r7, #8]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002000:	893b      	ldrh	r3, [r7, #8]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	461a      	mov	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	8979      	ldrh	r1, [r7, #10]
 8002010:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <HAL_I2C_Mem_Read_IT+0x108>)
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2300      	movs	r3, #0
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f001 fce6 	bl	80039e8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002024:	2101      	movs	r1, #1
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f001 fd10 	bl	8003a4c <I2C_Enable_IRQ>

    return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e000      	b.n	8002032 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8002030:	2302      	movs	r3, #2
  }
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	ffff0000 	.word	0xffff0000
 8002040:	08002205 	.word	0x08002205
 8002044:	80002000 	.word	0x80002000

08002048 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	68f9      	ldr	r1, [r7, #12]
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	4798      	blx	r3
  }
}
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00f      	beq.n	80020be <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00a      	beq.n	80020be <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020bc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00f      	beq.n	80020e8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	f043 0208 	orr.w	r2, r3, #8
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020e6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00f      	beq.n	8002112 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002100:	f043 0202 	orr.w	r2, r3, #2
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002110:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 030b 	and.w	r3, r3, #11
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002122:	68f9      	ldr	r1, [r7, #12]
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f001 fb05 	bl	8003734 <I2C_ITError>
  }
}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	70fb      	strb	r3, [r7, #3]
 800218e:	4613      	mov	r3, r2
 8002190:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af02      	add	r7, sp, #8
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002210:	4b8d      	ldr	r3, [pc, #564]	@ (8002448 <I2C_Mem_ISR_IT+0x244>)
 8002212:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800221e:	2b01      	cmp	r3, #1
 8002220:	d101      	bne.n	8002226 <I2C_Mem_ISR_IT+0x22>
 8002222:	2302      	movs	r3, #2
 8002224:	e10c      	b.n	8002440 <I2C_Mem_ISR_IT+0x23c>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b00      	cmp	r3, #0
 8002236:	d012      	beq.n	800225e <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00d      	beq.n	800225e <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2210      	movs	r2, #16
 8002248:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	f043 0204 	orr.w	r2, r3, #4
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f001 fb83 	bl	8003962 <I2C_Flush_TXDR>
 800225c:	e0dd      	b.n	800241a <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d022      	beq.n	80022ae <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800226e:	2b00      	cmp	r3, #0
 8002270:	d01d      	beq.n	80022ae <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f023 0304 	bic.w	r3, r3, #4
 8002278:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002296:	3b01      	subs	r3, #1
 8002298:	b29a      	uxth	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022ac:	e0b5      	b.n	800241a <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d02c      	beq.n	8002312 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d027      	beq.n	8002312 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022ca:	d118      	bne.n	80022fe <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	781a      	ldrb	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80022fc:	e08d      	b.n	800241a <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002306:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800230e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002310:	e083      	b.n	800241a <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002318:	2b00      	cmp	r3, #0
 800231a:	d03c      	beq.n	8002396 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002322:	2b00      	cmp	r3, #0
 8002324:	d037      	beq.n	8002396 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d02c      	beq.n	800238a <I2C_Mem_ISR_IT+0x186>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002334:	2b00      	cmp	r3, #0
 8002336:	d128      	bne.n	800238a <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800233c:	b29b      	uxth	r3, r3
 800233e:	2bff      	cmp	r3, #255	@ 0xff
 8002340:	d910      	bls.n	8002364 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	22ff      	movs	r2, #255	@ 0xff
 8002346:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234c:	b299      	uxth	r1, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002352:	b2da      	uxtb	r2, r3
 8002354:	2300      	movs	r3, #0
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f001 fb43 	bl	80039e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002362:	e017      	b.n	8002394 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002372:	b299      	uxth	r1, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002378:	b2da      	uxtb	r2, r3
 800237a:	2300      	movs	r3, #0
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f001 fb30 	bl	80039e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002388:	e004      	b.n	8002394 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800238a:	2140      	movs	r1, #64	@ 0x40
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f001 f9d1 	bl	8003734 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002392:	e042      	b.n	800241a <I2C_Mem_ISR_IT+0x216>
 8002394:	e041      	b.n	800241a <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800239c:	2b00      	cmp	r3, #0
 800239e:	d03c      	beq.n	800241a <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d037      	beq.n	800241a <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80023aa:	2101      	movs	r1, #1
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f001 fbd1 	bl	8003b54 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80023b2:	2102      	movs	r1, #2
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f001 fb49 	bl	8003a4c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b22      	cmp	r3, #34	@ 0x22
 80023c4:	d101      	bne.n	80023ca <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 80023c6:	4b21      	ldr	r3, [pc, #132]	@ (800244c <I2C_Mem_ISR_IT+0x248>)
 80023c8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	2bff      	cmp	r3, #255	@ 0xff
 80023d2:	d910      	bls.n	80023f6 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	22ff      	movs	r2, #255	@ 0xff
 80023d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023de:	b299      	uxth	r1, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f001 fafa 	bl	80039e8 <I2C_TransferConfig>
 80023f4:	e011      	b.n	800241a <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002404:	b299      	uxth	r1, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800240a:	b2da      	uxtb	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f001 fae7 	bl	80039e8 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f003 0320 	and.w	r3, r3, #32
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800242e:	6939      	ldr	r1, [r7, #16]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fe0f 	bl	8003054 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	80002000 	.word	0x80002000
 800244c:	80002400 	.word	0x80002400

08002450 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002460:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <I2C_Slave_ISR_IT+0x24>
 8002470:	2302      	movs	r3, #2
 8002472:	e0e2      	b.n	800263a <I2C_Slave_ISR_IT+0x1ea>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b00      	cmp	r3, #0
 8002484:	d009      	beq.n	800249a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800248c:	2b00      	cmp	r3, #0
 800248e:	d004      	beq.n	800249a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002490:	6939      	ldr	r1, [r7, #16]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 fea6 	bl	80031e4 <I2C_ITSlaveCplt>
 8002498:	e0ca      	b.n	8002630 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f003 0310 	and.w	r3, r3, #16
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d04b      	beq.n	800253c <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d046      	beq.n	800253c <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d128      	bne.n	800250a <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b28      	cmp	r3, #40	@ 0x28
 80024c2:	d108      	bne.n	80024d6 <I2C_Slave_ISR_IT+0x86>
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024ca:	d104      	bne.n	80024d6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80024cc:	6939      	ldr	r1, [r7, #16]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f001 f8dc 	bl	800368c <I2C_ITListenCplt>
 80024d4:	e031      	b.n	800253a <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b29      	cmp	r3, #41	@ 0x29
 80024e0:	d10e      	bne.n	8002500 <I2C_Slave_ISR_IT+0xb0>
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024e8:	d00a      	beq.n	8002500 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2210      	movs	r2, #16
 80024f0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f001 fa35 	bl	8003962 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 fd4e 	bl	8002f9a <I2C_ITSlaveSeqCplt>
 80024fe:	e01c      	b.n	800253a <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2210      	movs	r2, #16
 8002506:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002508:	e08f      	b.n	800262a <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2210      	movs	r2, #16
 8002510:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002516:	f043 0204 	orr.w	r2, r3, #4
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <I2C_Slave_ISR_IT+0xdc>
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800252a:	d17e      	bne.n	800262a <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002530:	4619      	mov	r1, r3
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f001 f8fe 	bl	8003734 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002538:	e077      	b.n	800262a <I2C_Slave_ISR_IT+0x1da>
 800253a:	e076      	b.n	800262a <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b00      	cmp	r3, #0
 8002544:	d02f      	beq.n	80025a6 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800254c:	2b00      	cmp	r3, #0
 800254e:	d02a      	beq.n	80025a6 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d018      	beq.n	800258c <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002582:	b29b      	uxth	r3, r3
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d14b      	bne.n	800262e <I2C_Slave_ISR_IT+0x1de>
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800259c:	d047      	beq.n	800262e <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 fcfb 	bl	8002f9a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80025a4:	e043      	b.n	800262e <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d009      	beq.n	80025c4 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d004      	beq.n	80025c4 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80025ba:	6939      	ldr	r1, [r7, #16]
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fc2b 	bl	8002e18 <I2C_ITAddrCplt>
 80025c2:	e035      	b.n	8002630 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d030      	beq.n	8002630 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d02b      	beq.n	8002630 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d018      	beq.n	8002614 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002612:	e00d      	b.n	8002630 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800261a:	d002      	beq.n	8002622 <I2C_Slave_ISR_IT+0x1d2>
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fcb9 	bl	8002f9a <I2C_ITSlaveSeqCplt>
 8002628:	e002      	b.n	8002630 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800262a:	bf00      	nop
 800262c:	e000      	b.n	8002630 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800262e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b088      	sub	sp, #32
 8002646:	af02      	add	r7, sp, #8
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <I2C_Master_ISR_DMA+0x1a>
 8002658:	2302      	movs	r3, #2
 800265a:	e0d9      	b.n	8002810 <I2C_Master_ISR_DMA+0x1ce>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b00      	cmp	r3, #0
 800266c:	d016      	beq.n	800269c <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002674:	2b00      	cmp	r3, #0
 8002676:	d011      	beq.n	800269c <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2210      	movs	r2, #16
 800267e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002684:	f043 0204 	orr.w	r2, r3, #4
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800268c:	2120      	movs	r1, #32
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f001 f9dc 	bl	8003a4c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f001 f964 	bl	8003962 <I2C_Flush_TXDR>
 800269a:	e0b4      	b.n	8002806 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d071      	beq.n	800278a <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d06c      	beq.n	800278a <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026be:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d04e      	beq.n	8002768 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2bff      	cmp	r3, #255	@ 0xff
 80026e0:	d906      	bls.n	80026f0 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	22ff      	movs	r2, #255	@ 0xff
 80026e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80026e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	e010      	b.n	8002712 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002702:	d003      	beq.n	800270c <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	e002      	b.n	8002712 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800270c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002710:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002716:	b2da      	uxtb	r2, r3
 8002718:	8a79      	ldrh	r1, [r7, #18]
 800271a:	2300      	movs	r3, #0
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f001 f961 	bl	80039e8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b22      	cmp	r3, #34	@ 0x22
 8002742:	d108      	bne.n	8002756 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002752:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002754:	e057      	b.n	8002806 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002764:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002766:	e04e      	b.n	8002806 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002772:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002776:	d003      	beq.n	8002780 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 fbd1 	bl	8002f20 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800277e:	e042      	b.n	8002806 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002780:	2140      	movs	r1, #64	@ 0x40
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 ffd6 	bl	8003734 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002788:	e03d      	b.n	8002806 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002790:	2b00      	cmp	r3, #0
 8002792:	d028      	beq.n	80027e6 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800279a:	2b00      	cmp	r3, #0
 800279c:	d023      	beq.n	80027e6 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d119      	bne.n	80027dc <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027b6:	d025      	beq.n	8002804 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027c0:	d108      	bne.n	80027d4 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027d0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80027d2:	e017      	b.n	8002804 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 fba3 	bl	8002f20 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80027da:	e013      	b.n	8002804 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80027dc:	2140      	movs	r1, #64	@ 0x40
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 ffa8 	bl	8003734 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80027e4:	e00e      	b.n	8002804 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	f003 0320 	and.w	r3, r3, #32
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80027fa:	68b9      	ldr	r1, [r7, #8]
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fc29 	bl	8003054 <I2C_ITMasterCplt>
 8002802:	e000      	b.n	8002806 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002804:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002824:	4b8d      	ldr	r3, [pc, #564]	@ (8002a5c <I2C_Mem_ISR_DMA+0x244>)
 8002826:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <I2C_Mem_ISR_DMA+0x1e>
 8002832:	2302      	movs	r3, #2
 8002834:	e10e      	b.n	8002a54 <I2C_Mem_ISR_DMA+0x23c>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2b00      	cmp	r3, #0
 8002846:	d016      	beq.n	8002876 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800284e:	2b00      	cmp	r3, #0
 8002850:	d011      	beq.n	8002876 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2210      	movs	r2, #16
 8002858:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	f043 0204 	orr.w	r2, r3, #4
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002866:	2120      	movs	r1, #32
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f001 f8ef 	bl	8003a4c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f001 f877 	bl	8003962 <I2C_Flush_TXDR>
 8002874:	e0e9      	b.n	8002a4a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00e      	beq.n	800289e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002886:	2b00      	cmp	r3, #0
 8002888:	d009      	beq.n	800289e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002892:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800289a:	651a      	str	r2, [r3, #80]	@ 0x50
 800289c:	e0d5      	b.n	8002a4a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d05f      	beq.n	8002968 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d05a      	beq.n	8002968 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028b2:	2101      	movs	r1, #1
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f001 f94d 	bl	8003b54 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80028ba:	2110      	movs	r1, #16
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f001 f8c5 	bl	8003a4c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d048      	beq.n	800295e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2bff      	cmp	r3, #255	@ 0xff
 80028d4:	d910      	bls.n	80028f8 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	22ff      	movs	r2, #255	@ 0xff
 80028da:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e0:	b299      	uxth	r1, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	2300      	movs	r3, #0
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f001 f879 	bl	80039e8 <I2C_TransferConfig>
 80028f6:	e011      	b.n	800291c <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	b299      	uxth	r1, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290c:	b2da      	uxtb	r2, r3
 800290e:	2300      	movs	r3, #0
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f001 f866 	bl	80039e8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b22      	cmp	r3, #34	@ 0x22
 8002938:	d108      	bne.n	800294c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002948:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800294a:	e07e      	b.n	8002a4a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800295a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800295c:	e075      	b.n	8002a4a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800295e:	2140      	movs	r1, #64	@ 0x40
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 fee7 	bl	8003734 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002966:	e070      	b.n	8002a4a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d05d      	beq.n	8002a2e <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002978:	2b00      	cmp	r3, #0
 800297a:	d058      	beq.n	8002a2e <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800297c:	2101      	movs	r1, #1
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f001 f8e8 	bl	8003b54 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002984:	2110      	movs	r1, #16
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f001 f860 	bl	8003a4c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b22      	cmp	r3, #34	@ 0x22
 8002996:	d101      	bne.n	800299c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002998:	4b31      	ldr	r3, [pc, #196]	@ (8002a60 <I2C_Mem_ISR_DMA+0x248>)
 800299a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2bff      	cmp	r3, #255	@ 0xff
 80029a4:	d910      	bls.n	80029c8 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	22ff      	movs	r2, #255	@ 0xff
 80029aa:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b0:	b299      	uxth	r1, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f001 f811 	bl	80039e8 <I2C_TransferConfig>
 80029c6:	e011      	b.n	80029ec <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d6:	b299      	uxth	r1, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 fffe 	bl	80039e8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b22      	cmp	r3, #34	@ 0x22
 8002a08:	d108      	bne.n	8002a1c <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a18:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a1a:	e016      	b.n	8002a4a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a2a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a2c:	e00d      	b.n	8002a4a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 fb05 	bl	8003054 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	80002000 	.word	0x80002000
 8002a60:	80002400 	.word	0x80002400

08002a64 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a74:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <I2C_Slave_ISR_DMA+0x24>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e1c2      	b.n	8002e0e <I2C_Slave_ISR_DMA+0x3aa>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d004      	beq.n	8002aae <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fb9c 	bl	80031e4 <I2C_ITSlaveCplt>
 8002aac:	e1aa      	b.n	8002e04 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8197 	beq.w	8002de8 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 8191 	beq.w	8002de8 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d105      	bne.n	8002adc <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 817f 	beq.w	8002dda <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d07b      	beq.n	8002bdc <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d076      	beq.n	8002bdc <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a74      	ldr	r2, [pc, #464]	@ (8002cc8 <I2C_Slave_ISR_DMA+0x264>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d059      	beq.n	8002bae <I2C_Slave_ISR_DMA+0x14a>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a72      	ldr	r2, [pc, #456]	@ (8002ccc <I2C_Slave_ISR_DMA+0x268>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d053      	beq.n	8002bae <I2C_Slave_ISR_DMA+0x14a>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a70      	ldr	r2, [pc, #448]	@ (8002cd0 <I2C_Slave_ISR_DMA+0x26c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d04d      	beq.n	8002bae <I2C_Slave_ISR_DMA+0x14a>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a6e      	ldr	r2, [pc, #440]	@ (8002cd4 <I2C_Slave_ISR_DMA+0x270>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d047      	beq.n	8002bae <I2C_Slave_ISR_DMA+0x14a>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a6c      	ldr	r2, [pc, #432]	@ (8002cd8 <I2C_Slave_ISR_DMA+0x274>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d041      	beq.n	8002bae <I2C_Slave_ISR_DMA+0x14a>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a6a      	ldr	r2, [pc, #424]	@ (8002cdc <I2C_Slave_ISR_DMA+0x278>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d03b      	beq.n	8002bae <I2C_Slave_ISR_DMA+0x14a>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a68      	ldr	r2, [pc, #416]	@ (8002ce0 <I2C_Slave_ISR_DMA+0x27c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d035      	beq.n	8002bae <I2C_Slave_ISR_DMA+0x14a>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a66      	ldr	r2, [pc, #408]	@ (8002ce4 <I2C_Slave_ISR_DMA+0x280>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d02f      	beq.n	8002bae <I2C_Slave_ISR_DMA+0x14a>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a64      	ldr	r2, [pc, #400]	@ (8002ce8 <I2C_Slave_ISR_DMA+0x284>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d029      	beq.n	8002bae <I2C_Slave_ISR_DMA+0x14a>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a62      	ldr	r2, [pc, #392]	@ (8002cec <I2C_Slave_ISR_DMA+0x288>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d023      	beq.n	8002bae <I2C_Slave_ISR_DMA+0x14a>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a60      	ldr	r2, [pc, #384]	@ (8002cf0 <I2C_Slave_ISR_DMA+0x28c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01d      	beq.n	8002bae <I2C_Slave_ISR_DMA+0x14a>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a5e      	ldr	r2, [pc, #376]	@ (8002cf4 <I2C_Slave_ISR_DMA+0x290>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d017      	beq.n	8002bae <I2C_Slave_ISR_DMA+0x14a>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a5c      	ldr	r2, [pc, #368]	@ (8002cf8 <I2C_Slave_ISR_DMA+0x294>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d011      	beq.n	8002bae <I2C_Slave_ISR_DMA+0x14a>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a5a      	ldr	r2, [pc, #360]	@ (8002cfc <I2C_Slave_ISR_DMA+0x298>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00b      	beq.n	8002bae <I2C_Slave_ISR_DMA+0x14a>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a58      	ldr	r2, [pc, #352]	@ (8002d00 <I2C_Slave_ISR_DMA+0x29c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d005      	beq.n	8002bae <I2C_Slave_ISR_DMA+0x14a>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a56      	ldr	r2, [pc, #344]	@ (8002d04 <I2C_Slave_ISR_DMA+0x2a0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d109      	bne.n	8002bc2 <I2C_Slave_ISR_DMA+0x15e>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	bf0c      	ite	eq
 8002bba:	2301      	moveq	r3, #1
 8002bbc:	2300      	movne	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	e008      	b.n	8002bd4 <I2C_Slave_ISR_DMA+0x170>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 809e 	beq.w	8002d22 <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8098 	beq.w	8002d22 <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a33      	ldr	r2, [pc, #204]	@ (8002cc8 <I2C_Slave_ISR_DMA+0x264>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d059      	beq.n	8002cb2 <I2C_Slave_ISR_DMA+0x24e>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a31      	ldr	r2, [pc, #196]	@ (8002ccc <I2C_Slave_ISR_DMA+0x268>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d053      	beq.n	8002cb2 <I2C_Slave_ISR_DMA+0x24e>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a2f      	ldr	r2, [pc, #188]	@ (8002cd0 <I2C_Slave_ISR_DMA+0x26c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d04d      	beq.n	8002cb2 <I2C_Slave_ISR_DMA+0x24e>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a2d      	ldr	r2, [pc, #180]	@ (8002cd4 <I2C_Slave_ISR_DMA+0x270>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d047      	beq.n	8002cb2 <I2C_Slave_ISR_DMA+0x24e>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a2b      	ldr	r2, [pc, #172]	@ (8002cd8 <I2C_Slave_ISR_DMA+0x274>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d041      	beq.n	8002cb2 <I2C_Slave_ISR_DMA+0x24e>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a29      	ldr	r2, [pc, #164]	@ (8002cdc <I2C_Slave_ISR_DMA+0x278>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d03b      	beq.n	8002cb2 <I2C_Slave_ISR_DMA+0x24e>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a27      	ldr	r2, [pc, #156]	@ (8002ce0 <I2C_Slave_ISR_DMA+0x27c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d035      	beq.n	8002cb2 <I2C_Slave_ISR_DMA+0x24e>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a25      	ldr	r2, [pc, #148]	@ (8002ce4 <I2C_Slave_ISR_DMA+0x280>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d02f      	beq.n	8002cb2 <I2C_Slave_ISR_DMA+0x24e>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a23      	ldr	r2, [pc, #140]	@ (8002ce8 <I2C_Slave_ISR_DMA+0x284>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d029      	beq.n	8002cb2 <I2C_Slave_ISR_DMA+0x24e>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a21      	ldr	r2, [pc, #132]	@ (8002cec <I2C_Slave_ISR_DMA+0x288>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d023      	beq.n	8002cb2 <I2C_Slave_ISR_DMA+0x24e>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1f      	ldr	r2, [pc, #124]	@ (8002cf0 <I2C_Slave_ISR_DMA+0x28c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01d      	beq.n	8002cb2 <I2C_Slave_ISR_DMA+0x24e>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002cf4 <I2C_Slave_ISR_DMA+0x290>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d017      	beq.n	8002cb2 <I2C_Slave_ISR_DMA+0x24e>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1b      	ldr	r2, [pc, #108]	@ (8002cf8 <I2C_Slave_ISR_DMA+0x294>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d011      	beq.n	8002cb2 <I2C_Slave_ISR_DMA+0x24e>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a19      	ldr	r2, [pc, #100]	@ (8002cfc <I2C_Slave_ISR_DMA+0x298>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00b      	beq.n	8002cb2 <I2C_Slave_ISR_DMA+0x24e>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a17      	ldr	r2, [pc, #92]	@ (8002d00 <I2C_Slave_ISR_DMA+0x29c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d005      	beq.n	8002cb2 <I2C_Slave_ISR_DMA+0x24e>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a15      	ldr	r2, [pc, #84]	@ (8002d04 <I2C_Slave_ISR_DMA+0x2a0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d12a      	bne.n	8002d08 <I2C_Slave_ISR_DMA+0x2a4>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	bf0c      	ite	eq
 8002cbe:	2301      	moveq	r3, #1
 8002cc0:	2300      	movne	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	e029      	b.n	8002d1a <I2C_Slave_ISR_DMA+0x2b6>
 8002cc6:	bf00      	nop
 8002cc8:	40020010 	.word	0x40020010
 8002ccc:	40020028 	.word	0x40020028
 8002cd0:	40020040 	.word	0x40020040
 8002cd4:	40020058 	.word	0x40020058
 8002cd8:	40020070 	.word	0x40020070
 8002cdc:	40020088 	.word	0x40020088
 8002ce0:	400200a0 	.word	0x400200a0
 8002ce4:	400200b8 	.word	0x400200b8
 8002ce8:	40020410 	.word	0x40020410
 8002cec:	40020428 	.word	0x40020428
 8002cf0:	40020440 	.word	0x40020440
 8002cf4:	40020458 	.word	0x40020458
 8002cf8:	40020470 	.word	0x40020470
 8002cfc:	40020488 	.word	0x40020488
 8002d00:	400204a0 	.word	0x400204a0
 8002d04:	400204b8 	.word	0x400204b8
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d128      	bne.n	8002d7a <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b28      	cmp	r3, #40	@ 0x28
 8002d32:	d108      	bne.n	8002d46 <I2C_Slave_ISR_DMA+0x2e2>
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d3a:	d104      	bne.n	8002d46 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 fca4 	bl	800368c <I2C_ITListenCplt>
 8002d44:	e048      	b.n	8002dd8 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b29      	cmp	r3, #41	@ 0x29
 8002d50:	d10e      	bne.n	8002d70 <I2C_Slave_ISR_DMA+0x30c>
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d58:	d00a      	beq.n	8002d70 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2210      	movs	r2, #16
 8002d60:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 fdfd 	bl	8003962 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f916 	bl	8002f9a <I2C_ITSlaveSeqCplt>
 8002d6e:	e033      	b.n	8002dd8 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2210      	movs	r2, #16
 8002d76:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002d78:	e034      	b.n	8002de4 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2210      	movs	r2, #16
 8002d80:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	f043 0204 	orr.w	r2, r3, #4
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d94:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <I2C_Slave_ISR_DMA+0x340>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002da2:	d11f      	bne.n	8002de4 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	2b21      	cmp	r3, #33	@ 0x21
 8002da8:	d002      	beq.n	8002db0 <I2C_Slave_ISR_DMA+0x34c>
 8002daa:	7dfb      	ldrb	r3, [r7, #23]
 8002dac:	2b29      	cmp	r3, #41	@ 0x29
 8002dae:	d103      	bne.n	8002db8 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2221      	movs	r2, #33	@ 0x21
 8002db4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002db6:	e008      	b.n	8002dca <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002db8:	7dfb      	ldrb	r3, [r7, #23]
 8002dba:	2b22      	cmp	r3, #34	@ 0x22
 8002dbc:	d002      	beq.n	8002dc4 <I2C_Slave_ISR_DMA+0x360>
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
 8002dc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002dc2:	d102      	bne.n	8002dca <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2222      	movs	r2, #34	@ 0x22
 8002dc8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dce:	4619      	mov	r1, r3
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 fcaf 	bl	8003734 <I2C_ITError>
      if (treatdmanack == 1U)
 8002dd6:	e005      	b.n	8002de4 <I2C_Slave_ISR_DMA+0x380>
 8002dd8:	e004      	b.n	8002de4 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2210      	movs	r2, #16
 8002de0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002de2:	e00f      	b.n	8002e04 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 8002de4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002de6:	e00d      	b.n	8002e04 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f80a 	bl	8002e18 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3720      	adds	r7, #32
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop

08002e18 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e2e:	2b28      	cmp	r3, #40	@ 0x28
 8002e30:	d16a      	bne.n	8002f08 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	0c1b      	lsrs	r3, r3, #16
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002e50:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e5e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002e6c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d138      	bne.n	8002ee8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002e76:	897b      	ldrh	r3, [r7, #10]
 8002e78:	09db      	lsrs	r3, r3, #7
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	89bb      	ldrh	r3, [r7, #12]
 8002e7e:	4053      	eors	r3, r2
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	f003 0306 	and.w	r3, r3, #6
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d11c      	bne.n	8002ec4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002e8a:	897b      	ldrh	r3, [r7, #10]
 8002e8c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d13b      	bne.n	8002f18 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2208      	movs	r2, #8
 8002eac:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002eb6:	89ba      	ldrh	r2, [r7, #12]
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff f960 	bl	8002182 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002ec2:	e029      	b.n	8002f18 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002ec4:	893b      	ldrh	r3, [r7, #8]
 8002ec6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ec8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fe41 	bl	8003b54 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002eda:	89ba      	ldrh	r2, [r7, #12]
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff f94e 	bl	8002182 <HAL_I2C_AddrCallback>
}
 8002ee6:	e017      	b.n	8002f18 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ee8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fe31 	bl	8003b54 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002efa:	89ba      	ldrh	r2, [r7, #12]
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	4619      	mov	r1, r3
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff f93e 	bl	8002182 <HAL_I2C_AddrCallback>
}
 8002f06:	e007      	b.n	8002f18 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b21      	cmp	r3, #33	@ 0x21
 8002f3a:	d115      	bne.n	8002f68 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2211      	movs	r2, #17
 8002f48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f50:	2101      	movs	r1, #1
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fdfe 	bl	8003b54 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff f8e6 	bl	8002132 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f66:	e014      	b.n	8002f92 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2212      	movs	r2, #18
 8002f74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fde8 	bl	8003b54 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff f8da 	bl	8002146 <HAL_I2C_MasterRxCpltCallback>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e00c      	b.n	8002fe8 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fe6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b29      	cmp	r3, #41	@ 0x29
 8002ff2:	d112      	bne.n	800301a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2228      	movs	r2, #40	@ 0x28
 8002ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2221      	movs	r2, #33	@ 0x21
 8003000:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003002:	2101      	movs	r1, #1
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fda5 	bl	8003b54 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff f8a1 	bl	800215a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003018:	e017      	b.n	800304a <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b2a      	cmp	r3, #42	@ 0x2a
 8003024:	d111      	bne.n	800304a <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2228      	movs	r2, #40	@ 0x28
 800302a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2222      	movs	r2, #34	@ 0x22
 8003032:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003034:	2102      	movs	r1, #2
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fd8c 	bl	8003b54 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff f892 	bl	800216e <HAL_I2C_SlaveRxCpltCallback>
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2220      	movs	r2, #32
 8003068:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b21      	cmp	r3, #33	@ 0x21
 8003074:	d107      	bne.n	8003086 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003076:	2101      	movs	r1, #1
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fd6b 	bl	8003b54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2211      	movs	r2, #17
 8003082:	631a      	str	r2, [r3, #48]	@ 0x30
 8003084:	e00c      	b.n	80030a0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b22      	cmp	r3, #34	@ 0x22
 8003090:	d106      	bne.n	80030a0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003092:	2102      	movs	r1, #2
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fd5d 	bl	8003b54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2212      	movs	r2, #18
 800309e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6859      	ldr	r1, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	4b4c      	ldr	r3, [pc, #304]	@ (80031dc <I2C_ITMasterCplt+0x188>)
 80030ac:	400b      	ands	r3, r1
 80030ae:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a49      	ldr	r2, [pc, #292]	@ (80031e0 <I2C_ITMasterCplt+0x18c>)
 80030ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2210      	movs	r2, #16
 80030cc:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	f043 0204 	orr.w	r2, r3, #4
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b60      	cmp	r3, #96	@ 0x60
 80030e4:	d10a      	bne.n	80030fc <I2C_ITMasterCplt+0xa8>
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80030fa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fc30 	bl	8003962 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b60      	cmp	r3, #96	@ 0x60
 8003112:	d002      	beq.n	800311a <I2C_ITMasterCplt+0xc6>
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d006      	beq.n	8003128 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311e:	4619      	mov	r1, r3
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fb07 	bl	8003734 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003126:	e054      	b.n	80031d2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b21      	cmp	r3, #33	@ 0x21
 8003132:	d124      	bne.n	800317e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b40      	cmp	r3, #64	@ 0x40
 800314c:	d10b      	bne.n	8003166 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff f827 	bl	80021b2 <HAL_I2C_MemTxCpltCallback>
}
 8003164:	e035      	b.n	80031d2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fe ffdb 	bl	8002132 <HAL_I2C_MasterTxCpltCallback>
}
 800317c:	e029      	b.n	80031d2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b22      	cmp	r3, #34	@ 0x22
 8003188:	d123      	bne.n	80031d2 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b40      	cmp	r3, #64	@ 0x40
 80031a2:	d10b      	bne.n	80031bc <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff f806 	bl	80021c6 <HAL_I2C_MemRxCpltCallback>
}
 80031ba:	e00a      	b.n	80031d2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7fe ffba 	bl	8002146 <HAL_I2C_MasterRxCpltCallback>
}
 80031d2:	bf00      	nop
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	fe00e800 	.word	0xfe00e800
 80031e0:	ffff0000 	.word	0xffff0000

080031e4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fe:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003206:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2220      	movs	r2, #32
 800320e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003210:	7afb      	ldrb	r3, [r7, #11]
 8003212:	2b21      	cmp	r3, #33	@ 0x21
 8003214:	d002      	beq.n	800321c <I2C_ITSlaveCplt+0x38>
 8003216:	7afb      	ldrb	r3, [r7, #11]
 8003218:	2b29      	cmp	r3, #41	@ 0x29
 800321a:	d108      	bne.n	800322e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800321c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fc97 	bl	8003b54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2221      	movs	r2, #33	@ 0x21
 800322a:	631a      	str	r2, [r3, #48]	@ 0x30
 800322c:	e019      	b.n	8003262 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800322e:	7afb      	ldrb	r3, [r7, #11]
 8003230:	2b22      	cmp	r3, #34	@ 0x22
 8003232:	d002      	beq.n	800323a <I2C_ITSlaveCplt+0x56>
 8003234:	7afb      	ldrb	r3, [r7, #11]
 8003236:	2b2a      	cmp	r3, #42	@ 0x2a
 8003238:	d108      	bne.n	800324c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800323a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fc88 	bl	8003b54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2222      	movs	r2, #34	@ 0x22
 8003248:	631a      	str	r2, [r3, #48]	@ 0x30
 800324a:	e00a      	b.n	8003262 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800324c:	7afb      	ldrb	r3, [r7, #11]
 800324e:	2b28      	cmp	r3, #40	@ 0x28
 8003250:	d107      	bne.n	8003262 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003252:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fc7c 	bl	8003b54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003270:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4b7f      	ldr	r3, [pc, #508]	@ (800347c <I2C_ITSlaveCplt+0x298>)
 800327e:	400b      	ands	r3, r1
 8003280:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fb6d 	bl	8003962 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d07a      	beq.n	8003388 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032a0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 8111 	beq.w	80034ce <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a73      	ldr	r2, [pc, #460]	@ (8003480 <I2C_ITSlaveCplt+0x29c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d059      	beq.n	800336c <I2C_ITSlaveCplt+0x188>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a71      	ldr	r2, [pc, #452]	@ (8003484 <I2C_ITSlaveCplt+0x2a0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d053      	beq.n	800336c <I2C_ITSlaveCplt+0x188>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a6f      	ldr	r2, [pc, #444]	@ (8003488 <I2C_ITSlaveCplt+0x2a4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d04d      	beq.n	800336c <I2C_ITSlaveCplt+0x188>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a6d      	ldr	r2, [pc, #436]	@ (800348c <I2C_ITSlaveCplt+0x2a8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d047      	beq.n	800336c <I2C_ITSlaveCplt+0x188>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a6b      	ldr	r2, [pc, #428]	@ (8003490 <I2C_ITSlaveCplt+0x2ac>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d041      	beq.n	800336c <I2C_ITSlaveCplt+0x188>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a69      	ldr	r2, [pc, #420]	@ (8003494 <I2C_ITSlaveCplt+0x2b0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d03b      	beq.n	800336c <I2C_ITSlaveCplt+0x188>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a67      	ldr	r2, [pc, #412]	@ (8003498 <I2C_ITSlaveCplt+0x2b4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d035      	beq.n	800336c <I2C_ITSlaveCplt+0x188>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a65      	ldr	r2, [pc, #404]	@ (800349c <I2C_ITSlaveCplt+0x2b8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d02f      	beq.n	800336c <I2C_ITSlaveCplt+0x188>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a63      	ldr	r2, [pc, #396]	@ (80034a0 <I2C_ITSlaveCplt+0x2bc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d029      	beq.n	800336c <I2C_ITSlaveCplt+0x188>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a61      	ldr	r2, [pc, #388]	@ (80034a4 <I2C_ITSlaveCplt+0x2c0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d023      	beq.n	800336c <I2C_ITSlaveCplt+0x188>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a5f      	ldr	r2, [pc, #380]	@ (80034a8 <I2C_ITSlaveCplt+0x2c4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d01d      	beq.n	800336c <I2C_ITSlaveCplt+0x188>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a5d      	ldr	r2, [pc, #372]	@ (80034ac <I2C_ITSlaveCplt+0x2c8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d017      	beq.n	800336c <I2C_ITSlaveCplt+0x188>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a5b      	ldr	r2, [pc, #364]	@ (80034b0 <I2C_ITSlaveCplt+0x2cc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d011      	beq.n	800336c <I2C_ITSlaveCplt+0x188>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a59      	ldr	r2, [pc, #356]	@ (80034b4 <I2C_ITSlaveCplt+0x2d0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00b      	beq.n	800336c <I2C_ITSlaveCplt+0x188>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a57      	ldr	r2, [pc, #348]	@ (80034b8 <I2C_ITSlaveCplt+0x2d4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d005      	beq.n	800336c <I2C_ITSlaveCplt+0x188>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a55      	ldr	r2, [pc, #340]	@ (80034bc <I2C_ITSlaveCplt+0x2d8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d105      	bne.n	8003378 <I2C_ITSlaveCplt+0x194>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	b29b      	uxth	r3, r3
 8003376:	e004      	b.n	8003382 <I2C_ITSlaveCplt+0x19e>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	b29b      	uxth	r3, r3
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8003386:	e0a2      	b.n	80034ce <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 809d 	beq.w	80034ce <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033a2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 8090 	beq.w	80034ce <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a32      	ldr	r2, [pc, #200]	@ (8003480 <I2C_ITSlaveCplt+0x29c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d059      	beq.n	800346e <I2C_ITSlaveCplt+0x28a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a30      	ldr	r2, [pc, #192]	@ (8003484 <I2C_ITSlaveCplt+0x2a0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d053      	beq.n	800346e <I2C_ITSlaveCplt+0x28a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a2e      	ldr	r2, [pc, #184]	@ (8003488 <I2C_ITSlaveCplt+0x2a4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d04d      	beq.n	800346e <I2C_ITSlaveCplt+0x28a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2c      	ldr	r2, [pc, #176]	@ (800348c <I2C_ITSlaveCplt+0x2a8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d047      	beq.n	800346e <I2C_ITSlaveCplt+0x28a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a2a      	ldr	r2, [pc, #168]	@ (8003490 <I2C_ITSlaveCplt+0x2ac>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d041      	beq.n	800346e <I2C_ITSlaveCplt+0x28a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a28      	ldr	r2, [pc, #160]	@ (8003494 <I2C_ITSlaveCplt+0x2b0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d03b      	beq.n	800346e <I2C_ITSlaveCplt+0x28a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a26      	ldr	r2, [pc, #152]	@ (8003498 <I2C_ITSlaveCplt+0x2b4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d035      	beq.n	800346e <I2C_ITSlaveCplt+0x28a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a24      	ldr	r2, [pc, #144]	@ (800349c <I2C_ITSlaveCplt+0x2b8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d02f      	beq.n	800346e <I2C_ITSlaveCplt+0x28a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a22      	ldr	r2, [pc, #136]	@ (80034a0 <I2C_ITSlaveCplt+0x2bc>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d029      	beq.n	800346e <I2C_ITSlaveCplt+0x28a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a20      	ldr	r2, [pc, #128]	@ (80034a4 <I2C_ITSlaveCplt+0x2c0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d023      	beq.n	800346e <I2C_ITSlaveCplt+0x28a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1e      	ldr	r2, [pc, #120]	@ (80034a8 <I2C_ITSlaveCplt+0x2c4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d01d      	beq.n	800346e <I2C_ITSlaveCplt+0x28a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1c      	ldr	r2, [pc, #112]	@ (80034ac <I2C_ITSlaveCplt+0x2c8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d017      	beq.n	800346e <I2C_ITSlaveCplt+0x28a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a1a      	ldr	r2, [pc, #104]	@ (80034b0 <I2C_ITSlaveCplt+0x2cc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d011      	beq.n	800346e <I2C_ITSlaveCplt+0x28a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a18      	ldr	r2, [pc, #96]	@ (80034b4 <I2C_ITSlaveCplt+0x2d0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00b      	beq.n	800346e <I2C_ITSlaveCplt+0x28a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a16      	ldr	r2, [pc, #88]	@ (80034b8 <I2C_ITSlaveCplt+0x2d4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d005      	beq.n	800346e <I2C_ITSlaveCplt+0x28a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a14      	ldr	r2, [pc, #80]	@ (80034bc <I2C_ITSlaveCplt+0x2d8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d128      	bne.n	80034c0 <I2C_ITSlaveCplt+0x2dc>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	b29b      	uxth	r3, r3
 8003478:	e027      	b.n	80034ca <I2C_ITSlaveCplt+0x2e6>
 800347a:	bf00      	nop
 800347c:	fe00e800 	.word	0xfe00e800
 8003480:	40020010 	.word	0x40020010
 8003484:	40020028 	.word	0x40020028
 8003488:	40020040 	.word	0x40020040
 800348c:	40020058 	.word	0x40020058
 8003490:	40020070 	.word	0x40020070
 8003494:	40020088 	.word	0x40020088
 8003498:	400200a0 	.word	0x400200a0
 800349c:	400200b8 	.word	0x400200b8
 80034a0:	40020410 	.word	0x40020410
 80034a4:	40020428 	.word	0x40020428
 80034a8:	40020440 	.word	0x40020440
 80034ac:	40020458 	.word	0x40020458
 80034b0:	40020470 	.word	0x40020470
 80034b4:	40020488 	.word	0x40020488
 80034b8:	400204a0 	.word	0x400204a0
 80034bc:	400204b8 	.word	0x400204b8
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d020      	beq.n	800351a <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f023 0304 	bic.w	r3, r3, #4
 80034de:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00c      	beq.n	800351a <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003528:	f043 0204 	orr.w	r2, r3, #4
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b00      	cmp	r3, #0
 8003538:	d049      	beq.n	80035ce <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003540:	2b00      	cmp	r3, #0
 8003542:	d044      	beq.n	80035ce <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d128      	bne.n	80035a0 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b28      	cmp	r3, #40	@ 0x28
 8003558:	d108      	bne.n	800356c <I2C_ITSlaveCplt+0x388>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003560:	d104      	bne.n	800356c <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003562:	6979      	ldr	r1, [r7, #20]
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f891 	bl	800368c <I2C_ITListenCplt>
 800356a:	e030      	b.n	80035ce <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b29      	cmp	r3, #41	@ 0x29
 8003576:	d10e      	bne.n	8003596 <I2C_ITSlaveCplt+0x3b2>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800357e:	d00a      	beq.n	8003596 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2210      	movs	r2, #16
 8003586:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f9ea 	bl	8003962 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff fd03 	bl	8002f9a <I2C_ITSlaveSeqCplt>
 8003594:	e01b      	b.n	80035ce <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2210      	movs	r2, #16
 800359c:	61da      	str	r2, [r3, #28]
 800359e:	e016      	b.n	80035ce <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2210      	movs	r2, #16
 80035a6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ac:	f043 0204 	orr.w	r2, r3, #4
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <I2C_ITSlaveCplt+0x3de>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035c0:	d105      	bne.n	80035ce <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c6:	4619      	mov	r1, r3
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f8b3 	bl	8003734 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d010      	beq.n	8003606 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e8:	4619      	mov	r1, r3
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f8a2 	bl	8003734 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b28      	cmp	r3, #40	@ 0x28
 80035fa:	d141      	bne.n	8003680 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80035fc:	6979      	ldr	r1, [r7, #20]
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f844 	bl	800368c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003604:	e03c      	b.n	8003680 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800360e:	d014      	beq.n	800363a <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff fcc2 	bl	8002f9a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a1b      	ldr	r2, [pc, #108]	@ (8003688 <I2C_ITSlaveCplt+0x4a4>)
 800361a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fe fdb3 	bl	800219e <HAL_I2C_ListenCpltCallback>
}
 8003638:	e022      	b.n	8003680 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b22      	cmp	r3, #34	@ 0x22
 8003644:	d10e      	bne.n	8003664 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7fe fd86 	bl	800216e <HAL_I2C_SlaveRxCpltCallback>
}
 8003662:	e00d      	b.n	8003680 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fe fd6d 	bl	800215a <HAL_I2C_SlaveTxCpltCallback>
}
 8003680:	bf00      	nop
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	ffff0000 	.word	0xffff0000

0800368c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a25      	ldr	r2, [pc, #148]	@ (8003730 <I2C_ITListenCplt+0xa4>)
 800369a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d022      	beq.n	8003708 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d012      	beq.n	8003708 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003700:	f043 0204 	orr.w	r2, r3, #4
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003708:	f248 0103 	movw	r1, #32771	@ 0x8003
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fa21 	bl	8003b54 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2210      	movs	r2, #16
 8003718:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fe fd3b 	bl	800219e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003728:	bf00      	nop
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	ffff0000 	.word	0xffff0000

08003734 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003744:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a6d      	ldr	r2, [pc, #436]	@ (8003908 <I2C_ITError+0x1d4>)
 8003752:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	2b28      	cmp	r3, #40	@ 0x28
 800376a:	d005      	beq.n	8003778 <I2C_ITError+0x44>
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b29      	cmp	r3, #41	@ 0x29
 8003770:	d002      	beq.n	8003778 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	2b2a      	cmp	r3, #42	@ 0x2a
 8003776:	d10b      	bne.n	8003790 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003778:	2103      	movs	r1, #3
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f9ea 	bl	8003b54 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2228      	movs	r2, #40	@ 0x28
 8003784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a60      	ldr	r2, [pc, #384]	@ (800390c <I2C_ITError+0x1d8>)
 800378c:	635a      	str	r2, [r3, #52]	@ 0x34
 800378e:	e030      	b.n	80037f2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003790:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f9dd 	bl	8003b54 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f8e1 	bl	8003962 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b60      	cmp	r3, #96	@ 0x60
 80037aa:	d01f      	beq.n	80037ec <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d114      	bne.n	80037ec <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b10      	cmp	r3, #16
 80037ce:	d109      	bne.n	80037e4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2210      	movs	r2, #16
 80037d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037dc:	f043 0204 	orr.w	r2, r3, #4
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2220      	movs	r2, #32
 80037ea:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d039      	beq.n	8003874 <I2C_ITError+0x140>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b11      	cmp	r3, #17
 8003804:	d002      	beq.n	800380c <I2C_ITError+0xd8>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b21      	cmp	r3, #33	@ 0x21
 800380a:	d133      	bne.n	8003874 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003816:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800381a:	d107      	bne.n	800382c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800382a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe f88d 	bl	8001950 <HAL_DMA_GetState>
 8003836:	4603      	mov	r3, r0
 8003838:	2b01      	cmp	r3, #1
 800383a:	d017      	beq.n	800386c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003840:	4a33      	ldr	r2, [pc, #204]	@ (8003910 <I2C_ITError+0x1dc>)
 8003842:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003850:	4618      	mov	r0, r3
 8003852:	f7fd fe37 	bl	80014c4 <HAL_DMA_Abort_IT>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d04d      	beq.n	80038f8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003866:	4610      	mov	r0, r2
 8003868:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800386a:	e045      	b.n	80038f8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f851 	bl	8003914 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003872:	e041      	b.n	80038f8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003878:	2b00      	cmp	r3, #0
 800387a:	d039      	beq.n	80038f0 <I2C_ITError+0x1bc>
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b12      	cmp	r3, #18
 8003880:	d002      	beq.n	8003888 <I2C_ITError+0x154>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b22      	cmp	r3, #34	@ 0x22
 8003886:	d133      	bne.n	80038f0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003892:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003896:	d107      	bne.n	80038a8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fe f84f 	bl	8001950 <HAL_DMA_GetState>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d017      	beq.n	80038e8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038bc:	4a14      	ldr	r2, [pc, #80]	@ (8003910 <I2C_ITError+0x1dc>)
 80038be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fd fdf9 	bl	80014c4 <HAL_DMA_Abort_IT>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d011      	beq.n	80038fc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038e2:	4610      	mov	r0, r2
 80038e4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038e6:	e009      	b.n	80038fc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f813 	bl	8003914 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038ee:	e005      	b.n	80038fc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f80f 	bl	8003914 <I2C_TreatErrorCallback>
  }
}
 80038f6:	e002      	b.n	80038fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038f8:	bf00      	nop
 80038fa:	e000      	b.n	80038fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038fc:	bf00      	nop
}
 80038fe:	bf00      	nop
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	ffff0000 	.word	0xffff0000
 800390c:	08002451 	.word	0x08002451
 8003910:	080039ab 	.word	0x080039ab

08003914 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b60      	cmp	r3, #96	@ 0x60
 8003926:	d10e      	bne.n	8003946 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fe fc55 	bl	80021ee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003944:	e009      	b.n	800395a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7fe fc40 	bl	80021da <HAL_I2C_ErrorCallback>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b02      	cmp	r3, #2
 8003976:	d103      	bne.n	8003980 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2200      	movs	r2, #0
 800397e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b01      	cmp	r3, #1
 800398c:	d007      	beq.n	800399e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699a      	ldr	r2, [r3, #24]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0201 	orr.w	r2, r2, #1
 800399c:	619a      	str	r2, [r3, #24]
  }
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c4:	2200      	movs	r2, #0
 80039c6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d4:	2200      	movs	r2, #0
 80039d6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7ff ff9b 	bl	8003914 <I2C_TreatErrorCallback>
}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	607b      	str	r3, [r7, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	817b      	strh	r3, [r7, #10]
 80039f6:	4613      	mov	r3, r2
 80039f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039fa:	897b      	ldrh	r3, [r7, #10]
 80039fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a00:	7a7b      	ldrb	r3, [r7, #9]
 8003a02:	041b      	lsls	r3, r3, #16
 8003a04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	0d5b      	lsrs	r3, r3, #21
 8003a22:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003a26:	4b08      	ldr	r3, [pc, #32]	@ (8003a48 <I2C_TransferConfig+0x60>)
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	ea02 0103 	and.w	r1, r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	03ff63ff 	.word	0x03ff63ff

08003a4c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a60:	4a39      	ldr	r2, [pc, #228]	@ (8003b48 <I2C_Enable_IRQ+0xfc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d032      	beq.n	8003acc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003a6a:	4a38      	ldr	r2, [pc, #224]	@ (8003b4c <I2C_Enable_IRQ+0x100>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d02d      	beq.n	8003acc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003a74:	4a36      	ldr	r2, [pc, #216]	@ (8003b50 <I2C_Enable_IRQ+0x104>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d028      	beq.n	8003acc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003a7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	da03      	bge.n	8003a8a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003a88:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a8a:	887b      	ldrh	r3, [r7, #2]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003a9a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003a9c:	887b      	ldrh	r3, [r7, #2]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003aac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003aae:	887b      	ldrh	r3, [r7, #2]
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d103      	bne.n	8003abc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003aba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003abc:	887b      	ldrh	r3, [r7, #2]
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d133      	bne.n	8003b2a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f043 0320 	orr.w	r3, r3, #32
 8003ac8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003aca:	e02e      	b.n	8003b2a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003acc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	da03      	bge.n	8003adc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003ada:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003adc:	887b      	ldrh	r3, [r7, #2]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003aec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003aee:	887b      	ldrh	r3, [r7, #2]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003afe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b00:	887b      	ldrh	r3, [r7, #2]
 8003b02:	2b10      	cmp	r3, #16
 8003b04:	d103      	bne.n	8003b0e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003b0c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b0e:	887b      	ldrh	r3, [r7, #2]
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d103      	bne.n	8003b1c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003b1a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b1c:	887b      	ldrh	r3, [r7, #2]
 8003b1e:	2b40      	cmp	r3, #64	@ 0x40
 8003b20:	d103      	bne.n	8003b2a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b28:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6819      	ldr	r1, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	601a      	str	r2, [r3, #0]
}
 8003b3a:	bf00      	nop
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	08002643 	.word	0x08002643
 8003b4c:	08002a65 	.word	0x08002a65
 8003b50:	08002819 	.word	0x08002819

08003b54 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003b64:	887b      	ldrh	r3, [r7, #2]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00f      	beq.n	8003b8e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003b74:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b82:	2b28      	cmp	r3, #40	@ 0x28
 8003b84:	d003      	beq.n	8003b8e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003b8c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003b8e:	887b      	ldrh	r3, [r7, #2]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00f      	beq.n	8003bb8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003b9e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003bac:	2b28      	cmp	r3, #40	@ 0x28
 8003bae:	d003      	beq.n	8003bb8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003bb6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003bb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	da03      	bge.n	8003bc8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003bc6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003bc8:	887b      	ldrh	r3, [r7, #2]
 8003bca:	2b10      	cmp	r3, #16
 8003bcc:	d103      	bne.n	8003bd6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003bd4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003bd6:	887b      	ldrh	r3, [r7, #2]
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d103      	bne.n	8003be4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f043 0320 	orr.w	r3, r3, #32
 8003be2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003be4:	887b      	ldrh	r3, [r7, #2]
 8003be6:	2b40      	cmp	r3, #64	@ 0x40
 8003be8:	d103      	bne.n	8003bf2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bf0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6819      	ldr	r1, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	43da      	mvns	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	400a      	ands	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]
}
 8003c04:	bf00      	nop
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d138      	bne.n	8003c98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e032      	b.n	8003c9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2224      	movs	r2, #36	@ 0x24
 8003c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6819      	ldr	r1, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	e000      	b.n	8003c9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c98:	2302      	movs	r3, #2
  }
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b085      	sub	sp, #20
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d139      	bne.n	8003d30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e033      	b.n	8003d32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2224      	movs	r2, #36	@ 0x24
 8003cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0201 	bic.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003cf8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e000      	b.n	8003d32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003d48:	4b19      	ldr	r3, [pc, #100]	@ (8003db0 <HAL_PWREx_ConfigSupply+0x70>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d00a      	beq.n	8003d6a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003d54:	4b16      	ldr	r3, [pc, #88]	@ (8003db0 <HAL_PWREx_ConfigSupply+0x70>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d001      	beq.n	8003d66 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e01f      	b.n	8003da6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	e01d      	b.n	8003da6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d6a:	4b11      	ldr	r3, [pc, #68]	@ (8003db0 <HAL_PWREx_ConfigSupply+0x70>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f023 0207 	bic.w	r2, r3, #7
 8003d72:	490f      	ldr	r1, [pc, #60]	@ (8003db0 <HAL_PWREx_ConfigSupply+0x70>)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d7a:	f7fd f9eb 	bl	8001154 <HAL_GetTick>
 8003d7e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d80:	e009      	b.n	8003d96 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d82:	f7fd f9e7 	bl	8001154 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d90:	d901      	bls.n	8003d96 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e007      	b.n	8003da6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d96:	4b06      	ldr	r3, [pc, #24]	@ (8003db0 <HAL_PWREx_ConfigSupply+0x70>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da2:	d1ee      	bne.n	8003d82 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	58024800 	.word	0x58024800

08003db4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08c      	sub	sp, #48	@ 0x30
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e3c8      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 8087 	beq.w	8003ee2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dd4:	4b88      	ldr	r3, [pc, #544]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003dde:	4b86      	ldr	r3, [pc, #536]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de6:	2b10      	cmp	r3, #16
 8003de8:	d007      	beq.n	8003dfa <HAL_RCC_OscConfig+0x46>
 8003dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dec:	2b18      	cmp	r3, #24
 8003dee:	d110      	bne.n	8003e12 <HAL_RCC_OscConfig+0x5e>
 8003df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d10b      	bne.n	8003e12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfa:	4b7f      	ldr	r3, [pc, #508]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d06c      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x12c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d168      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e3a2      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e1a:	d106      	bne.n	8003e2a <HAL_RCC_OscConfig+0x76>
 8003e1c:	4b76      	ldr	r3, [pc, #472]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a75      	ldr	r2, [pc, #468]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003e22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	e02e      	b.n	8003e88 <HAL_RCC_OscConfig+0xd4>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10c      	bne.n	8003e4c <HAL_RCC_OscConfig+0x98>
 8003e32:	4b71      	ldr	r3, [pc, #452]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a70      	ldr	r2, [pc, #448]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003e38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	4b6e      	ldr	r3, [pc, #440]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6d      	ldr	r2, [pc, #436]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003e44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	e01d      	b.n	8003e88 <HAL_RCC_OscConfig+0xd4>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e54:	d10c      	bne.n	8003e70 <HAL_RCC_OscConfig+0xbc>
 8003e56:	4b68      	ldr	r3, [pc, #416]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a67      	ldr	r2, [pc, #412]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003e5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	4b65      	ldr	r3, [pc, #404]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a64      	ldr	r2, [pc, #400]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	e00b      	b.n	8003e88 <HAL_RCC_OscConfig+0xd4>
 8003e70:	4b61      	ldr	r3, [pc, #388]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a60      	ldr	r2, [pc, #384]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a5d      	ldr	r2, [pc, #372]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003e82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d013      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e90:	f7fd f960 	bl	8001154 <HAL_GetTick>
 8003e94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e98:	f7fd f95c 	bl	8001154 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	@ 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e356      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003eaa:	4b53      	ldr	r3, [pc, #332]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0xe4>
 8003eb6:	e014      	b.n	8003ee2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fd f94c 	bl	8001154 <HAL_GetTick>
 8003ebc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec0:	f7fd f948 	bl	8001154 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	@ 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e342      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ed2:	4b49      	ldr	r3, [pc, #292]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x10c>
 8003ede:	e000      	b.n	8003ee2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 808c 	beq.w	8004008 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ef0:	4b41      	ldr	r3, [pc, #260]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ef8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003efa:	4b3f      	ldr	r3, [pc, #252]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d007      	beq.n	8003f16 <HAL_RCC_OscConfig+0x162>
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	2b18      	cmp	r3, #24
 8003f0a:	d137      	bne.n	8003f7c <HAL_RCC_OscConfig+0x1c8>
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d132      	bne.n	8003f7c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f16:	4b38      	ldr	r3, [pc, #224]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_RCC_OscConfig+0x17a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e314      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f2e:	4b32      	ldr	r3, [pc, #200]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 0219 	bic.w	r2, r3, #25
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	492f      	ldr	r1, [pc, #188]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fd f908 	bl	8001154 <HAL_GetTick>
 8003f44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f48:	f7fd f904 	bl	8001154 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e2fe      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f5a:	4b27      	ldr	r3, [pc, #156]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f66:	4b24      	ldr	r3, [pc, #144]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	061b      	lsls	r3, r3, #24
 8003f74:	4920      	ldr	r1, [pc, #128]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f7a:	e045      	b.n	8004008 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d026      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f84:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f023 0219 	bic.w	r2, r3, #25
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4919      	ldr	r1, [pc, #100]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f96:	f7fd f8dd 	bl	8001154 <HAL_GetTick>
 8003f9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9e:	f7fd f8d9 	bl	8001154 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e2d3      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fb0:	4b11      	ldr	r3, [pc, #68]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	061b      	lsls	r3, r3, #24
 8003fca:	490b      	ldr	r1, [pc, #44]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	604b      	str	r3, [r1, #4]
 8003fd0:	e01a      	b.n	8004008 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fd2:	4b09      	ldr	r3, [pc, #36]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a08      	ldr	r2, [pc, #32]	@ (8003ff8 <HAL_RCC_OscConfig+0x244>)
 8003fd8:	f023 0301 	bic.w	r3, r3, #1
 8003fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fde:	f7fd f8b9 	bl	8001154 <HAL_GetTick>
 8003fe2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fe4:	e00a      	b.n	8003ffc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fe6:	f7fd f8b5 	bl	8001154 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d903      	bls.n	8003ffc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e2af      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
 8003ff8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ffc:	4b96      	ldr	r3, [pc, #600]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1ee      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	2b00      	cmp	r3, #0
 8004012:	d06a      	beq.n	80040ea <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004014:	4b90      	ldr	r3, [pc, #576]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800401c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800401e:	4b8e      	ldr	r3, [pc, #568]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 8004020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004022:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	2b08      	cmp	r3, #8
 8004028:	d007      	beq.n	800403a <HAL_RCC_OscConfig+0x286>
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	2b18      	cmp	r3, #24
 800402e:	d11b      	bne.n	8004068 <HAL_RCC_OscConfig+0x2b4>
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b01      	cmp	r3, #1
 8004038:	d116      	bne.n	8004068 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800403a:	4b87      	ldr	r3, [pc, #540]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <HAL_RCC_OscConfig+0x29e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	2b80      	cmp	r3, #128	@ 0x80
 800404c:	d001      	beq.n	8004052 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e282      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004052:	4b81      	ldr	r3, [pc, #516]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	061b      	lsls	r3, r3, #24
 8004060:	497d      	ldr	r1, [pc, #500]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 8004062:	4313      	orrs	r3, r2
 8004064:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004066:	e040      	b.n	80040ea <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d023      	beq.n	80040b8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004070:	4b79      	ldr	r3, [pc, #484]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a78      	ldr	r2, [pc, #480]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 8004076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800407a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407c:	f7fd f86a 	bl	8001154 <HAL_GetTick>
 8004080:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004084:	f7fd f866 	bl	8001154 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e260      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004096:	4b70      	ldr	r3, [pc, #448]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	061b      	lsls	r3, r3, #24
 80040b0:	4969      	ldr	r1, [pc, #420]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60cb      	str	r3, [r1, #12]
 80040b6:	e018      	b.n	80040ea <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80040b8:	4b67      	ldr	r3, [pc, #412]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a66      	ldr	r2, [pc, #408]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 80040be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fd f846 	bl	8001154 <HAL_GetTick>
 80040c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80040cc:	f7fd f842 	bl	8001154 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e23c      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040de:	4b5e      	ldr	r3, [pc, #376]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d036      	beq.n	8004164 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d019      	beq.n	8004132 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fe:	4b56      	ldr	r3, [pc, #344]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 8004100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004102:	4a55      	ldr	r2, [pc, #340]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410a:	f7fd f823 	bl	8001154 <HAL_GetTick>
 800410e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004112:	f7fd f81f 	bl	8001154 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e219      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004124:	4b4c      	ldr	r3, [pc, #304]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 8004126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x35e>
 8004130:	e018      	b.n	8004164 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004132:	4b49      	ldr	r3, [pc, #292]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 8004134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004136:	4a48      	ldr	r2, [pc, #288]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 8004138:	f023 0301 	bic.w	r3, r3, #1
 800413c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413e:	f7fd f809 	bl	8001154 <HAL_GetTick>
 8004142:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004146:	f7fd f805 	bl	8001154 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e1ff      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004158:	4b3f      	ldr	r3, [pc, #252]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 800415a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1f0      	bne.n	8004146 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b00      	cmp	r3, #0
 800416e:	d036      	beq.n	80041de <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d019      	beq.n	80041ac <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004178:	4b37      	ldr	r3, [pc, #220]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a36      	ldr	r2, [pc, #216]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 800417e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004182:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004184:	f7fc ffe6 	bl	8001154 <HAL_GetTick>
 8004188:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800418c:	f7fc ffe2 	bl	8001154 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e1dc      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800419e:	4b2e      	ldr	r3, [pc, #184]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0x3d8>
 80041aa:	e018      	b.n	80041de <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a29      	ldr	r2, [pc, #164]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 80041b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041b8:	f7fc ffcc 	bl	8001154 <HAL_GetTick>
 80041bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041c0:	f7fc ffc8 	bl	8001154 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e1c2      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041d2:	4b21      	ldr	r3, [pc, #132]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 8086 	beq.w	80042f8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041ec:	4b1b      	ldr	r3, [pc, #108]	@ (800425c <HAL_RCC_OscConfig+0x4a8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1a      	ldr	r2, [pc, #104]	@ (800425c <HAL_RCC_OscConfig+0x4a8>)
 80041f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041f8:	f7fc ffac 	bl	8001154 <HAL_GetTick>
 80041fc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004200:	f7fc ffa8 	bl	8001154 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	@ 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e1a2      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004212:	4b12      	ldr	r3, [pc, #72]	@ (800425c <HAL_RCC_OscConfig+0x4a8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d106      	bne.n	8004234 <HAL_RCC_OscConfig+0x480>
 8004226:	4b0c      	ldr	r3, [pc, #48]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422a:	4a0b      	ldr	r2, [pc, #44]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	6713      	str	r3, [r2, #112]	@ 0x70
 8004232:	e032      	b.n	800429a <HAL_RCC_OscConfig+0x4e6>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d111      	bne.n	8004260 <HAL_RCC_OscConfig+0x4ac>
 800423c:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004240:	4a05      	ldr	r2, [pc, #20]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 8004242:	f023 0301 	bic.w	r3, r3, #1
 8004246:	6713      	str	r3, [r2, #112]	@ 0x70
 8004248:	4b03      	ldr	r3, [pc, #12]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 800424a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424c:	4a02      	ldr	r2, [pc, #8]	@ (8004258 <HAL_RCC_OscConfig+0x4a4>)
 800424e:	f023 0304 	bic.w	r3, r3, #4
 8004252:	6713      	str	r3, [r2, #112]	@ 0x70
 8004254:	e021      	b.n	800429a <HAL_RCC_OscConfig+0x4e6>
 8004256:	bf00      	nop
 8004258:	58024400 	.word	0x58024400
 800425c:	58024800 	.word	0x58024800
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b05      	cmp	r3, #5
 8004266:	d10c      	bne.n	8004282 <HAL_RCC_OscConfig+0x4ce>
 8004268:	4b83      	ldr	r3, [pc, #524]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800426c:	4a82      	ldr	r2, [pc, #520]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 800426e:	f043 0304 	orr.w	r3, r3, #4
 8004272:	6713      	str	r3, [r2, #112]	@ 0x70
 8004274:	4b80      	ldr	r3, [pc, #512]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 8004276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004278:	4a7f      	ldr	r2, [pc, #508]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004280:	e00b      	b.n	800429a <HAL_RCC_OscConfig+0x4e6>
 8004282:	4b7d      	ldr	r3, [pc, #500]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004286:	4a7c      	ldr	r2, [pc, #496]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	6713      	str	r3, [r2, #112]	@ 0x70
 800428e:	4b7a      	ldr	r3, [pc, #488]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 8004290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004292:	4a79      	ldr	r2, [pc, #484]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 8004294:	f023 0304 	bic.w	r3, r3, #4
 8004298:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d015      	beq.n	80042ce <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a2:	f7fc ff57 	bl	8001154 <HAL_GetTick>
 80042a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042a8:	e00a      	b.n	80042c0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042aa:	f7fc ff53 	bl	8001154 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e14b      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042c0:	4b6d      	ldr	r3, [pc, #436]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 80042c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0ee      	beq.n	80042aa <HAL_RCC_OscConfig+0x4f6>
 80042cc:	e014      	b.n	80042f8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ce:	f7fc ff41 	bl	8001154 <HAL_GetTick>
 80042d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042d4:	e00a      	b.n	80042ec <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d6:	f7fc ff3d 	bl	8001154 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e135      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042ec:	4b62      	ldr	r3, [pc, #392]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 80042ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1ee      	bne.n	80042d6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 812a 	beq.w	8004556 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004302:	4b5d      	ldr	r3, [pc, #372]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800430a:	2b18      	cmp	r3, #24
 800430c:	f000 80ba 	beq.w	8004484 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004314:	2b02      	cmp	r3, #2
 8004316:	f040 8095 	bne.w	8004444 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431a:	4b57      	ldr	r3, [pc, #348]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a56      	ldr	r2, [pc, #344]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 8004320:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004326:	f7fc ff15 	bl	8001154 <HAL_GetTick>
 800432a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800432e:	f7fc ff11 	bl	8001154 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e10b      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004340:	4b4d      	ldr	r3, [pc, #308]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1f0      	bne.n	800432e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800434c:	4b4a      	ldr	r3, [pc, #296]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 800434e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004350:	4b4a      	ldr	r3, [pc, #296]	@ (800447c <HAL_RCC_OscConfig+0x6c8>)
 8004352:	4013      	ands	r3, r2
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800435c:	0112      	lsls	r2, r2, #4
 800435e:	430a      	orrs	r2, r1
 8004360:	4945      	ldr	r1, [pc, #276]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 8004362:	4313      	orrs	r3, r2
 8004364:	628b      	str	r3, [r1, #40]	@ 0x28
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	3b01      	subs	r3, #1
 800436c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004374:	3b01      	subs	r3, #1
 8004376:	025b      	lsls	r3, r3, #9
 8004378:	b29b      	uxth	r3, r3
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004380:	3b01      	subs	r3, #1
 8004382:	041b      	lsls	r3, r3, #16
 8004384:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438e:	3b01      	subs	r3, #1
 8004390:	061b      	lsls	r3, r3, #24
 8004392:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004396:	4938      	ldr	r1, [pc, #224]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 8004398:	4313      	orrs	r3, r2
 800439a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800439c:	4b36      	ldr	r3, [pc, #216]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 800439e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a0:	4a35      	ldr	r2, [pc, #212]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 80043a2:	f023 0301 	bic.w	r3, r3, #1
 80043a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043a8:	4b33      	ldr	r3, [pc, #204]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 80043aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043ac:	4b34      	ldr	r3, [pc, #208]	@ (8004480 <HAL_RCC_OscConfig+0x6cc>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80043b4:	00d2      	lsls	r2, r2, #3
 80043b6:	4930      	ldr	r1, [pc, #192]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80043bc:	4b2e      	ldr	r3, [pc, #184]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 80043be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c0:	f023 020c 	bic.w	r2, r3, #12
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c8:	492b      	ldr	r1, [pc, #172]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80043ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 80043d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d2:	f023 0202 	bic.w	r2, r3, #2
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043da:	4927      	ldr	r1, [pc, #156]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043e0:	4b25      	ldr	r3, [pc, #148]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 80043e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e4:	4a24      	ldr	r2, [pc, #144]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 80043e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ec:	4b22      	ldr	r3, [pc, #136]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 80043ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f0:	4a21      	ldr	r2, [pc, #132]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 80043f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80043f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 80043fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 80043fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004402:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004404:	4b1c      	ldr	r3, [pc, #112]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 8004406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004408:	4a1b      	ldr	r2, [pc, #108]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004410:	4b19      	ldr	r3, [pc, #100]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a18      	ldr	r2, [pc, #96]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 8004416:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800441a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441c:	f7fc fe9a 	bl	8001154 <HAL_GetTick>
 8004420:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004424:	f7fc fe96 	bl	8001154 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e090      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004436:	4b10      	ldr	r3, [pc, #64]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCC_OscConfig+0x670>
 8004442:	e088      	b.n	8004556 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004444:	4b0c      	ldr	r3, [pc, #48]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a0b      	ldr	r2, [pc, #44]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 800444a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800444e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fc fe80 	bl	8001154 <HAL_GetTick>
 8004454:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004458:	f7fc fe7c 	bl	8001154 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e076      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800446a:	4b03      	ldr	r3, [pc, #12]	@ (8004478 <HAL_RCC_OscConfig+0x6c4>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x6a4>
 8004476:	e06e      	b.n	8004556 <HAL_RCC_OscConfig+0x7a2>
 8004478:	58024400 	.word	0x58024400
 800447c:	fffffc0c 	.word	0xfffffc0c
 8004480:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004484:	4b36      	ldr	r3, [pc, #216]	@ (8004560 <HAL_RCC_OscConfig+0x7ac>)
 8004486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004488:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800448a:	4b35      	ldr	r3, [pc, #212]	@ (8004560 <HAL_RCC_OscConfig+0x7ac>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	2b01      	cmp	r3, #1
 8004496:	d031      	beq.n	80044fc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f003 0203 	and.w	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d12a      	bne.n	80044fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	091b      	lsrs	r3, r3, #4
 80044aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d122      	bne.n	80044fc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d11a      	bne.n	80044fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	0a5b      	lsrs	r3, r3, #9
 80044ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d111      	bne.n	80044fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	0c1b      	lsrs	r3, r3, #16
 80044dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d108      	bne.n	80044fc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	0e1b      	lsrs	r3, r3, #24
 80044ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e02b      	b.n	8004558 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004500:	4b17      	ldr	r3, [pc, #92]	@ (8004560 <HAL_RCC_OscConfig+0x7ac>)
 8004502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004504:	08db      	lsrs	r3, r3, #3
 8004506:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800450a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	429a      	cmp	r2, r3
 8004514:	d01f      	beq.n	8004556 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004516:	4b12      	ldr	r3, [pc, #72]	@ (8004560 <HAL_RCC_OscConfig+0x7ac>)
 8004518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451a:	4a11      	ldr	r2, [pc, #68]	@ (8004560 <HAL_RCC_OscConfig+0x7ac>)
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004522:	f7fc fe17 	bl	8001154 <HAL_GetTick>
 8004526:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004528:	bf00      	nop
 800452a:	f7fc fe13 	bl	8001154 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	4293      	cmp	r3, r2
 8004534:	d0f9      	beq.n	800452a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004536:	4b0a      	ldr	r3, [pc, #40]	@ (8004560 <HAL_RCC_OscConfig+0x7ac>)
 8004538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800453a:	4b0a      	ldr	r3, [pc, #40]	@ (8004564 <HAL_RCC_OscConfig+0x7b0>)
 800453c:	4013      	ands	r3, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004542:	00d2      	lsls	r2, r2, #3
 8004544:	4906      	ldr	r1, [pc, #24]	@ (8004560 <HAL_RCC_OscConfig+0x7ac>)
 8004546:	4313      	orrs	r3, r2
 8004548:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800454a:	4b05      	ldr	r3, [pc, #20]	@ (8004560 <HAL_RCC_OscConfig+0x7ac>)
 800454c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454e:	4a04      	ldr	r2, [pc, #16]	@ (8004560 <HAL_RCC_OscConfig+0x7ac>)
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3730      	adds	r7, #48	@ 0x30
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	58024400 	.word	0x58024400
 8004564:	ffff0007 	.word	0xffff0007

08004568 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e19c      	b.n	80048b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800457c:	4b8a      	ldr	r3, [pc, #552]	@ (80047a8 <HAL_RCC_ClockConfig+0x240>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d910      	bls.n	80045ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458a:	4b87      	ldr	r3, [pc, #540]	@ (80047a8 <HAL_RCC_ClockConfig+0x240>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f023 020f 	bic.w	r2, r3, #15
 8004592:	4985      	ldr	r1, [pc, #532]	@ (80047a8 <HAL_RCC_ClockConfig+0x240>)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	4313      	orrs	r3, r2
 8004598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800459a:	4b83      	ldr	r3, [pc, #524]	@ (80047a8 <HAL_RCC_ClockConfig+0x240>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e184      	b.n	80048b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d010      	beq.n	80045da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	4b7b      	ldr	r3, [pc, #492]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d908      	bls.n	80045da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045c8:	4b78      	ldr	r3, [pc, #480]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	4975      	ldr	r1, [pc, #468]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d010      	beq.n	8004608 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695a      	ldr	r2, [r3, #20]
 80045ea:	4b70      	ldr	r3, [pc, #448]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d908      	bls.n	8004608 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045f6:	4b6d      	ldr	r3, [pc, #436]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	496a      	ldr	r1, [pc, #424]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 8004604:	4313      	orrs	r3, r2
 8004606:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b00      	cmp	r3, #0
 8004612:	d010      	beq.n	8004636 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699a      	ldr	r2, [r3, #24]
 8004618:	4b64      	ldr	r3, [pc, #400]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004620:	429a      	cmp	r2, r3
 8004622:	d908      	bls.n	8004636 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004624:	4b61      	ldr	r3, [pc, #388]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	495e      	ldr	r1, [pc, #376]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 8004632:	4313      	orrs	r3, r2
 8004634:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b00      	cmp	r3, #0
 8004640:	d010      	beq.n	8004664 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69da      	ldr	r2, [r3, #28]
 8004646:	4b59      	ldr	r3, [pc, #356]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800464e:	429a      	cmp	r2, r3
 8004650:	d908      	bls.n	8004664 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004652:	4b56      	ldr	r3, [pc, #344]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	4953      	ldr	r1, [pc, #332]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 8004660:	4313      	orrs	r3, r2
 8004662:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d010      	beq.n	8004692 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	4b4d      	ldr	r3, [pc, #308]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	f003 030f 	and.w	r3, r3, #15
 800467c:	429a      	cmp	r2, r3
 800467e:	d908      	bls.n	8004692 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004680:	4b4a      	ldr	r3, [pc, #296]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	f023 020f 	bic.w	r2, r3, #15
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4947      	ldr	r1, [pc, #284]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 800468e:	4313      	orrs	r3, r2
 8004690:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d055      	beq.n	800474a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800469e:	4b43      	ldr	r3, [pc, #268]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	4940      	ldr	r1, [pc, #256]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d107      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046b8:	4b3c      	ldr	r3, [pc, #240]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d121      	bne.n	8004708 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0f6      	b.n	80048b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d107      	bne.n	80046e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046d0:	4b36      	ldr	r3, [pc, #216]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d115      	bne.n	8004708 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e0ea      	b.n	80048b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d107      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046e8:	4b30      	ldr	r3, [pc, #192]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0de      	b.n	80048b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046f8:	4b2c      	ldr	r3, [pc, #176]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0d6      	b.n	80048b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004708:	4b28      	ldr	r3, [pc, #160]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	f023 0207 	bic.w	r2, r3, #7
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	4925      	ldr	r1, [pc, #148]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 8004716:	4313      	orrs	r3, r2
 8004718:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800471a:	f7fc fd1b 	bl	8001154 <HAL_GetTick>
 800471e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004720:	e00a      	b.n	8004738 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004722:	f7fc fd17 	bl	8001154 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004730:	4293      	cmp	r3, r2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e0be      	b.n	80048b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004738:	4b1c      	ldr	r3, [pc, #112]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	429a      	cmp	r2, r3
 8004748:	d1eb      	bne.n	8004722 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d010      	beq.n	8004778 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	4b14      	ldr	r3, [pc, #80]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	429a      	cmp	r2, r3
 8004764:	d208      	bcs.n	8004778 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004766:	4b11      	ldr	r3, [pc, #68]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	f023 020f 	bic.w	r2, r3, #15
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	490e      	ldr	r1, [pc, #56]	@ (80047ac <HAL_RCC_ClockConfig+0x244>)
 8004774:	4313      	orrs	r3, r2
 8004776:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004778:	4b0b      	ldr	r3, [pc, #44]	@ (80047a8 <HAL_RCC_ClockConfig+0x240>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 030f 	and.w	r3, r3, #15
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d214      	bcs.n	80047b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004786:	4b08      	ldr	r3, [pc, #32]	@ (80047a8 <HAL_RCC_ClockConfig+0x240>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f023 020f 	bic.w	r2, r3, #15
 800478e:	4906      	ldr	r1, [pc, #24]	@ (80047a8 <HAL_RCC_ClockConfig+0x240>)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	4313      	orrs	r3, r2
 8004794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004796:	4b04      	ldr	r3, [pc, #16]	@ (80047a8 <HAL_RCC_ClockConfig+0x240>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d005      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e086      	b.n	80048b6 <HAL_RCC_ClockConfig+0x34e>
 80047a8:	52002000 	.word	0x52002000
 80047ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d010      	beq.n	80047de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	4b3f      	ldr	r3, [pc, #252]	@ (80048c0 <HAL_RCC_ClockConfig+0x358>)
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d208      	bcs.n	80047de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047cc:	4b3c      	ldr	r3, [pc, #240]	@ (80048c0 <HAL_RCC_ClockConfig+0x358>)
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	4939      	ldr	r1, [pc, #228]	@ (80048c0 <HAL_RCC_ClockConfig+0x358>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d010      	beq.n	800480c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	4b34      	ldr	r3, [pc, #208]	@ (80048c0 <HAL_RCC_ClockConfig+0x358>)
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d208      	bcs.n	800480c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047fa:	4b31      	ldr	r3, [pc, #196]	@ (80048c0 <HAL_RCC_ClockConfig+0x358>)
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	492e      	ldr	r1, [pc, #184]	@ (80048c0 <HAL_RCC_ClockConfig+0x358>)
 8004808:	4313      	orrs	r3, r2
 800480a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b00      	cmp	r3, #0
 8004816:	d010      	beq.n	800483a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699a      	ldr	r2, [r3, #24]
 800481c:	4b28      	ldr	r3, [pc, #160]	@ (80048c0 <HAL_RCC_ClockConfig+0x358>)
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004824:	429a      	cmp	r2, r3
 8004826:	d208      	bcs.n	800483a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004828:	4b25      	ldr	r3, [pc, #148]	@ (80048c0 <HAL_RCC_ClockConfig+0x358>)
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	4922      	ldr	r1, [pc, #136]	@ (80048c0 <HAL_RCC_ClockConfig+0x358>)
 8004836:	4313      	orrs	r3, r2
 8004838:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b00      	cmp	r3, #0
 8004844:	d010      	beq.n	8004868 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69da      	ldr	r2, [r3, #28]
 800484a:	4b1d      	ldr	r3, [pc, #116]	@ (80048c0 <HAL_RCC_ClockConfig+0x358>)
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004852:	429a      	cmp	r2, r3
 8004854:	d208      	bcs.n	8004868 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004856:	4b1a      	ldr	r3, [pc, #104]	@ (80048c0 <HAL_RCC_ClockConfig+0x358>)
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	4917      	ldr	r1, [pc, #92]	@ (80048c0 <HAL_RCC_ClockConfig+0x358>)
 8004864:	4313      	orrs	r3, r2
 8004866:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004868:	f000 f834 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 800486c:	4602      	mov	r2, r0
 800486e:	4b14      	ldr	r3, [pc, #80]	@ (80048c0 <HAL_RCC_ClockConfig+0x358>)
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	0a1b      	lsrs	r3, r3, #8
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	4912      	ldr	r1, [pc, #72]	@ (80048c4 <HAL_RCC_ClockConfig+0x35c>)
 800487a:	5ccb      	ldrb	r3, [r1, r3]
 800487c:	f003 031f 	and.w	r3, r3, #31
 8004880:	fa22 f303 	lsr.w	r3, r2, r3
 8004884:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004886:	4b0e      	ldr	r3, [pc, #56]	@ (80048c0 <HAL_RCC_ClockConfig+0x358>)
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	4a0d      	ldr	r2, [pc, #52]	@ (80048c4 <HAL_RCC_ClockConfig+0x35c>)
 8004890:	5cd3      	ldrb	r3, [r2, r3]
 8004892:	f003 031f 	and.w	r3, r3, #31
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
 800489c:	4a0a      	ldr	r2, [pc, #40]	@ (80048c8 <HAL_RCC_ClockConfig+0x360>)
 800489e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048a0:	4a0a      	ldr	r2, [pc, #40]	@ (80048cc <HAL_RCC_ClockConfig+0x364>)
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80048a6:	4b0a      	ldr	r3, [pc, #40]	@ (80048d0 <HAL_RCC_ClockConfig+0x368>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fc fc08 	bl	80010c0 <HAL_InitTick>
 80048b0:	4603      	mov	r3, r0
 80048b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	58024400 	.word	0x58024400
 80048c4:	0800876c 	.word	0x0800876c
 80048c8:	24000008 	.word	0x24000008
 80048cc:	24000004 	.word	0x24000004
 80048d0:	2400000c 	.word	0x2400000c

080048d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b089      	sub	sp, #36	@ 0x24
 80048d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048da:	4bb3      	ldr	r3, [pc, #716]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048e2:	2b18      	cmp	r3, #24
 80048e4:	f200 8155 	bhi.w	8004b92 <HAL_RCC_GetSysClockFreq+0x2be>
 80048e8:	a201      	add	r2, pc, #4	@ (adr r2, 80048f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80048ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ee:	bf00      	nop
 80048f0:	08004955 	.word	0x08004955
 80048f4:	08004b93 	.word	0x08004b93
 80048f8:	08004b93 	.word	0x08004b93
 80048fc:	08004b93 	.word	0x08004b93
 8004900:	08004b93 	.word	0x08004b93
 8004904:	08004b93 	.word	0x08004b93
 8004908:	08004b93 	.word	0x08004b93
 800490c:	08004b93 	.word	0x08004b93
 8004910:	0800497b 	.word	0x0800497b
 8004914:	08004b93 	.word	0x08004b93
 8004918:	08004b93 	.word	0x08004b93
 800491c:	08004b93 	.word	0x08004b93
 8004920:	08004b93 	.word	0x08004b93
 8004924:	08004b93 	.word	0x08004b93
 8004928:	08004b93 	.word	0x08004b93
 800492c:	08004b93 	.word	0x08004b93
 8004930:	08004981 	.word	0x08004981
 8004934:	08004b93 	.word	0x08004b93
 8004938:	08004b93 	.word	0x08004b93
 800493c:	08004b93 	.word	0x08004b93
 8004940:	08004b93 	.word	0x08004b93
 8004944:	08004b93 	.word	0x08004b93
 8004948:	08004b93 	.word	0x08004b93
 800494c:	08004b93 	.word	0x08004b93
 8004950:	08004987 	.word	0x08004987
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004954:	4b94      	ldr	r3, [pc, #592]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b00      	cmp	r3, #0
 800495e:	d009      	beq.n	8004974 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004960:	4b91      	ldr	r3, [pc, #580]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	08db      	lsrs	r3, r3, #3
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	4a90      	ldr	r2, [pc, #576]	@ (8004bac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800496c:	fa22 f303 	lsr.w	r3, r2, r3
 8004970:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004972:	e111      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004974:	4b8d      	ldr	r3, [pc, #564]	@ (8004bac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004976:	61bb      	str	r3, [r7, #24]
      break;
 8004978:	e10e      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800497a:	4b8d      	ldr	r3, [pc, #564]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800497c:	61bb      	str	r3, [r7, #24]
      break;
 800497e:	e10b      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004980:	4b8c      	ldr	r3, [pc, #560]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004982:	61bb      	str	r3, [r7, #24]
      break;
 8004984:	e108      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004986:	4b88      	ldr	r3, [pc, #544]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004990:	4b85      	ldr	r3, [pc, #532]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004994:	091b      	lsrs	r3, r3, #4
 8004996:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800499a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800499c:	4b82      	ldr	r3, [pc, #520]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800499e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80049a6:	4b80      	ldr	r3, [pc, #512]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049aa:	08db      	lsrs	r3, r3, #3
 80049ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	fb02 f303 	mul.w	r3, r2, r3
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 80e1 	beq.w	8004b8c <HAL_RCC_GetSysClockFreq+0x2b8>
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	f000 8083 	beq.w	8004ad8 <HAL_RCC_GetSysClockFreq+0x204>
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	f200 80a1 	bhi.w	8004b1c <HAL_RCC_GetSysClockFreq+0x248>
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <HAL_RCC_GetSysClockFreq+0x114>
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d056      	beq.n	8004a94 <HAL_RCC_GetSysClockFreq+0x1c0>
 80049e6:	e099      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049e8:	4b6f      	ldr	r3, [pc, #444]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0320 	and.w	r3, r3, #32
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d02d      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049f4:	4b6c      	ldr	r3, [pc, #432]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	08db      	lsrs	r3, r3, #3
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	4a6b      	ldr	r2, [pc, #428]	@ (8004bac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a00:	fa22 f303 	lsr.w	r3, r2, r3
 8004a04:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	ee07 3a90 	vmov	s15, r3
 8004a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1e:	4b62      	ldr	r3, [pc, #392]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a32:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004a4e:	e087      	b.n	8004b60 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004bbc <HAL_RCC_GetSysClockFreq+0x2e8>
 8004a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a62:	4b51      	ldr	r3, [pc, #324]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a76:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a92:	e065      	b.n	8004b60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004bc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa6:	4b40      	ldr	r3, [pc, #256]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ad6:	e043      	b.n	8004b60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004bc4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aea:	4b2f      	ldr	r3, [pc, #188]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004afe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b1a:	e021      	b.n	8004b60 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	ee07 3a90 	vmov	s15, r3
 8004b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b26:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004bc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b42:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b5e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004b60:	4b11      	ldr	r3, [pc, #68]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b64:	0a5b      	lsrs	r3, r3, #9
 8004b66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	ee07 3a90 	vmov	s15, r3
 8004b74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b78:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b84:	ee17 3a90 	vmov	r3, s15
 8004b88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004b8a:	e005      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	61bb      	str	r3, [r7, #24]
      break;
 8004b90:	e002      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004b92:	4b07      	ldr	r3, [pc, #28]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b94:	61bb      	str	r3, [r7, #24]
      break;
 8004b96:	bf00      	nop
  }

  return sysclockfreq;
 8004b98:	69bb      	ldr	r3, [r7, #24]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3724      	adds	r7, #36	@ 0x24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	58024400 	.word	0x58024400
 8004bac:	03d09000 	.word	0x03d09000
 8004bb0:	003d0900 	.word	0x003d0900
 8004bb4:	017d7840 	.word	0x017d7840
 8004bb8:	46000000 	.word	0x46000000
 8004bbc:	4c742400 	.word	0x4c742400
 8004bc0:	4a742400 	.word	0x4a742400
 8004bc4:	4bbebc20 	.word	0x4bbebc20

08004bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004bce:	f7ff fe81 	bl	80048d4 <HAL_RCC_GetSysClockFreq>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	4b10      	ldr	r3, [pc, #64]	@ (8004c18 <HAL_RCC_GetHCLKFreq+0x50>)
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	0a1b      	lsrs	r3, r3, #8
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	490f      	ldr	r1, [pc, #60]	@ (8004c1c <HAL_RCC_GetHCLKFreq+0x54>)
 8004be0:	5ccb      	ldrb	r3, [r1, r3]
 8004be2:	f003 031f 	and.w	r3, r3, #31
 8004be6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bec:	4b0a      	ldr	r3, [pc, #40]	@ (8004c18 <HAL_RCC_GetHCLKFreq+0x50>)
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	f003 030f 	and.w	r3, r3, #15
 8004bf4:	4a09      	ldr	r2, [pc, #36]	@ (8004c1c <HAL_RCC_GetHCLKFreq+0x54>)
 8004bf6:	5cd3      	ldrb	r3, [r2, r3]
 8004bf8:	f003 031f 	and.w	r3, r3, #31
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8004c02:	4a07      	ldr	r2, [pc, #28]	@ (8004c20 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c06:	4a07      	ldr	r2, [pc, #28]	@ (8004c24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004c0c:	4b04      	ldr	r3, [pc, #16]	@ (8004c20 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	58024400 	.word	0x58024400
 8004c1c:	0800876c 	.word	0x0800876c
 8004c20:	24000008 	.word	0x24000008
 8004c24:	24000004 	.word	0x24000004

08004c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004c2c:	f7ff ffcc 	bl	8004bc8 <HAL_RCC_GetHCLKFreq>
 8004c30:	4602      	mov	r2, r0
 8004c32:	4b06      	ldr	r3, [pc, #24]	@ (8004c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	091b      	lsrs	r3, r3, #4
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	4904      	ldr	r1, [pc, #16]	@ (8004c50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c3e:	5ccb      	ldrb	r3, [r1, r3]
 8004c40:	f003 031f 	and.w	r3, r3, #31
 8004c44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	58024400 	.word	0x58024400
 8004c50:	0800876c 	.word	0x0800876c

08004c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004c58:	f7ff ffb6 	bl	8004bc8 <HAL_RCC_GetHCLKFreq>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	4b06      	ldr	r3, [pc, #24]	@ (8004c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	0a1b      	lsrs	r3, r3, #8
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	4904      	ldr	r1, [pc, #16]	@ (8004c7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c6a:	5ccb      	ldrb	r3, [r1, r3]
 8004c6c:	f003 031f 	and.w	r3, r3, #31
 8004c70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	58024400 	.word	0x58024400
 8004c7c:	0800876c 	.word	0x0800876c

08004c80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c84:	b0c6      	sub	sp, #280	@ 0x118
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c92:	2300      	movs	r3, #0
 8004c94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004ca4:	2500      	movs	r5, #0
 8004ca6:	ea54 0305 	orrs.w	r3, r4, r5
 8004caa:	d049      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cb2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004cb6:	d02f      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004cb8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004cbc:	d828      	bhi.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004cbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cc2:	d01a      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004cc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cc8:	d822      	bhi.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cd2:	d007      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004cd4:	e01c      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd6:	4bab      	ldr	r3, [pc, #684]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cda:	4aaa      	ldr	r2, [pc, #680]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ce0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ce2:	e01a      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ce8:	3308      	adds	r3, #8
 8004cea:	2102      	movs	r1, #2
 8004cec:	4618      	mov	r0, r3
 8004cee:	f001 fc25 	bl	800653c <RCCEx_PLL2_Config>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004cf8:	e00f      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cfe:	3328      	adds	r3, #40	@ 0x28
 8004d00:	2102      	movs	r1, #2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f001 fccc 	bl	80066a0 <RCCEx_PLL3_Config>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d0e:	e004      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d16:	e000      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10a      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004d22:	4b98      	ldr	r3, [pc, #608]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d30:	4a94      	ldr	r2, [pc, #592]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d32:	430b      	orrs	r3, r1
 8004d34:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d36:	e003      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d48:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004d4c:	f04f 0900 	mov.w	r9, #0
 8004d50:	ea58 0309 	orrs.w	r3, r8, r9
 8004d54:	d047      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d82a      	bhi.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004d60:	a201      	add	r2, pc, #4	@ (adr r2, 8004d68 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d66:	bf00      	nop
 8004d68:	08004d7d 	.word	0x08004d7d
 8004d6c:	08004d8b 	.word	0x08004d8b
 8004d70:	08004da1 	.word	0x08004da1
 8004d74:	08004dbf 	.word	0x08004dbf
 8004d78:	08004dbf 	.word	0x08004dbf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d7c:	4b81      	ldr	r3, [pc, #516]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d80:	4a80      	ldr	r2, [pc, #512]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d88:	e01a      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d8e:	3308      	adds	r3, #8
 8004d90:	2100      	movs	r1, #0
 8004d92:	4618      	mov	r0, r3
 8004d94:	f001 fbd2 	bl	800653c <RCCEx_PLL2_Config>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d9e:	e00f      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004da4:	3328      	adds	r3, #40	@ 0x28
 8004da6:	2100      	movs	r1, #0
 8004da8:	4618      	mov	r0, r3
 8004daa:	f001 fc79 	bl	80066a0 <RCCEx_PLL3_Config>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004db4:	e004      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004dbc:	e000      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10a      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dc8:	4b6e      	ldr	r3, [pc, #440]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dcc:	f023 0107 	bic.w	r1, r3, #7
 8004dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd6:	4a6b      	ldr	r2, [pc, #428]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ddc:	e003      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004de2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dee:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8004df2:	f04f 0b00 	mov.w	fp, #0
 8004df6:	ea5a 030b 	orrs.w	r3, sl, fp
 8004dfa:	d05b      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e04:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004e08:	d03b      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004e0a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004e0e:	d834      	bhi.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004e10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e14:	d037      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004e16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e1a:	d82e      	bhi.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004e1c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004e20:	d033      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004e22:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004e26:	d828      	bhi.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004e28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e2c:	d01a      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004e2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e32:	d822      	bhi.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004e38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e3c:	d007      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004e3e:	e01c      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e40:	4b50      	ldr	r3, [pc, #320]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e44:	4a4f      	ldr	r2, [pc, #316]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e4c:	e01e      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e52:	3308      	adds	r3, #8
 8004e54:	2100      	movs	r1, #0
 8004e56:	4618      	mov	r0, r3
 8004e58:	f001 fb70 	bl	800653c <RCCEx_PLL2_Config>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004e62:	e013      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e68:	3328      	adds	r3, #40	@ 0x28
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f001 fc17 	bl	80066a0 <RCCEx_PLL3_Config>
 8004e72:	4603      	mov	r3, r0
 8004e74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e78:	e008      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e80:	e004      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004e82:	bf00      	nop
 8004e84:	e002      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004e86:	bf00      	nop
 8004e88:	e000      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004e8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10b      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e94:	4b3b      	ldr	r3, [pc, #236]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e98:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ea4:	4a37      	ldr	r2, [pc, #220]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ea6:	430b      	orrs	r3, r1
 8004ea8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004eaa:	e003      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004eb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004ec0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004eca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	d05d      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ed8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004edc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004ee0:	d03b      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004ee2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004ee6:	d834      	bhi.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ee8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004eec:	d037      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004eee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ef2:	d82e      	bhi.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ef4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ef8:	d033      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004efa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004efe:	d828      	bhi.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004f00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f04:	d01a      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004f06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f0a:	d822      	bhi.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004f10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f14:	d007      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004f16:	e01c      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f18:	4b1a      	ldr	r3, [pc, #104]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1c:	4a19      	ldr	r2, [pc, #100]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f24:	e01e      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f2a:	3308      	adds	r3, #8
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f001 fb04 	bl	800653c <RCCEx_PLL2_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004f3a:	e013      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f40:	3328      	adds	r3, #40	@ 0x28
 8004f42:	2100      	movs	r1, #0
 8004f44:	4618      	mov	r0, r3
 8004f46:	f001 fbab 	bl	80066a0 <RCCEx_PLL3_Config>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f50:	e008      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f58:	e004      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004f5a:	bf00      	nop
 8004f5c:	e002      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004f5e:	bf00      	nop
 8004f60:	e000      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10d      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004f6c:	4b05      	ldr	r3, [pc, #20]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f70:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004f7c:	4a01      	ldr	r2, [pc, #4]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f7e:	430b      	orrs	r3, r1
 8004f80:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f82:	e005      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004f84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004f9c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004fa6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004faa:	460b      	mov	r3, r1
 8004fac:	4313      	orrs	r3, r2
 8004fae:	d03a      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fb6:	2b30      	cmp	r3, #48	@ 0x30
 8004fb8:	d01f      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004fba:	2b30      	cmp	r3, #48	@ 0x30
 8004fbc:	d819      	bhi.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d00c      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	d815      	bhi.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d019      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004fca:	2b10      	cmp	r3, #16
 8004fcc:	d111      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fce:	4baa      	ldr	r3, [pc, #680]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd2:	4aa9      	ldr	r2, [pc, #676]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004fda:	e011      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	2102      	movs	r1, #2
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f001 faa9 	bl	800653c <RCCEx_PLL2_Config>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004ff0:	e006      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ff8:	e002      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004ffa:	bf00      	nop
 8004ffc:	e000      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005000:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10a      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005008:	4b9b      	ldr	r3, [pc, #620]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800500a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800500c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005016:	4a98      	ldr	r2, [pc, #608]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005018:	430b      	orrs	r3, r1
 800501a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800501c:	e003      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005022:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005032:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005036:	2300      	movs	r3, #0
 8005038:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800503c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005040:	460b      	mov	r3, r1
 8005042:	4313      	orrs	r3, r2
 8005044:	d051      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800504a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800504c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005050:	d035      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005052:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005056:	d82e      	bhi.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005058:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800505c:	d031      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800505e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005062:	d828      	bhi.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005068:	d01a      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800506a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800506e:	d822      	bhi.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005078:	d007      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800507a:	e01c      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800507c:	4b7e      	ldr	r3, [pc, #504]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800507e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005080:	4a7d      	ldr	r2, [pc, #500]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005082:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005086:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005088:	e01c      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800508a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800508e:	3308      	adds	r3, #8
 8005090:	2100      	movs	r1, #0
 8005092:	4618      	mov	r0, r3
 8005094:	f001 fa52 	bl	800653c <RCCEx_PLL2_Config>
 8005098:	4603      	mov	r3, r0
 800509a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800509e:	e011      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050a4:	3328      	adds	r3, #40	@ 0x28
 80050a6:	2100      	movs	r1, #0
 80050a8:	4618      	mov	r0, r3
 80050aa:	f001 faf9 	bl	80066a0 <RCCEx_PLL3_Config>
 80050ae:	4603      	mov	r3, r0
 80050b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80050b4:	e006      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80050bc:	e002      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80050be:	bf00      	nop
 80050c0:	e000      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80050c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10a      	bne.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80050cc:	4b6a      	ldr	r3, [pc, #424]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80050d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050da:	4a67      	ldr	r2, [pc, #412]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050dc:	430b      	orrs	r3, r1
 80050de:	6513      	str	r3, [r2, #80]	@ 0x50
 80050e0:	e003      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80050ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80050f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050fa:	2300      	movs	r3, #0
 80050fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005100:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005104:	460b      	mov	r3, r1
 8005106:	4313      	orrs	r3, r2
 8005108:	d053      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800510a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800510e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005114:	d033      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005116:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800511a:	d82c      	bhi.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800511c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005120:	d02f      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005122:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005126:	d826      	bhi.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005128:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800512c:	d02b      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800512e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005132:	d820      	bhi.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005134:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005138:	d012      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800513a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800513e:	d81a      	bhi.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005140:	2b00      	cmp	r3, #0
 8005142:	d022      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005148:	d115      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800514a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800514e:	3308      	adds	r3, #8
 8005150:	2101      	movs	r1, #1
 8005152:	4618      	mov	r0, r3
 8005154:	f001 f9f2 	bl	800653c <RCCEx_PLL2_Config>
 8005158:	4603      	mov	r3, r0
 800515a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800515e:	e015      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005164:	3328      	adds	r3, #40	@ 0x28
 8005166:	2101      	movs	r1, #1
 8005168:	4618      	mov	r0, r3
 800516a:	f001 fa99 	bl	80066a0 <RCCEx_PLL3_Config>
 800516e:	4603      	mov	r3, r0
 8005170:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005174:	e00a      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800517c:	e006      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800517e:	bf00      	nop
 8005180:	e004      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005182:	bf00      	nop
 8005184:	e002      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005186:	bf00      	nop
 8005188:	e000      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800518a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800518c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005194:	4b38      	ldr	r3, [pc, #224]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005198:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800519c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051a2:	4a35      	ldr	r2, [pc, #212]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051a4:	430b      	orrs	r3, r1
 80051a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80051a8:	e003      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80051b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80051be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051c2:	2300      	movs	r3, #0
 80051c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80051c8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80051cc:	460b      	mov	r3, r1
 80051ce:	4313      	orrs	r3, r2
 80051d0:	d058      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80051d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80051da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051de:	d033      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80051e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051e4:	d82c      	bhi.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80051e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ea:	d02f      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80051ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f0:	d826      	bhi.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80051f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051f6:	d02b      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80051f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051fc:	d820      	bhi.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80051fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005202:	d012      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005208:	d81a      	bhi.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d022      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800520e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005212:	d115      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005218:	3308      	adds	r3, #8
 800521a:	2101      	movs	r1, #1
 800521c:	4618      	mov	r0, r3
 800521e:	f001 f98d 	bl	800653c <RCCEx_PLL2_Config>
 8005222:	4603      	mov	r3, r0
 8005224:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005228:	e015      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800522a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800522e:	3328      	adds	r3, #40	@ 0x28
 8005230:	2101      	movs	r1, #1
 8005232:	4618      	mov	r0, r3
 8005234:	f001 fa34 	bl	80066a0 <RCCEx_PLL3_Config>
 8005238:	4603      	mov	r3, r0
 800523a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800523e:	e00a      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005246:	e006      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005248:	bf00      	nop
 800524a:	e004      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800524c:	bf00      	nop
 800524e:	e002      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005250:	bf00      	nop
 8005252:	e000      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005256:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10e      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800525e:	4b06      	ldr	r3, [pc, #24]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005262:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800526a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800526e:	4a02      	ldr	r2, [pc, #8]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005270:	430b      	orrs	r3, r1
 8005272:	6593      	str	r3, [r2, #88]	@ 0x58
 8005274:	e006      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005276:	bf00      	nop
 8005278:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005280:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005294:	2300      	movs	r3, #0
 8005296:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800529a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800529e:	460b      	mov	r3, r1
 80052a0:	4313      	orrs	r3, r2
 80052a2:	d037      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80052a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052ae:	d00e      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80052b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052b4:	d816      	bhi.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d018      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80052ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052be:	d111      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052c0:	4bc4      	ldr	r3, [pc, #784]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c4:	4ac3      	ldr	r2, [pc, #780]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80052cc:	e00f      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d2:	3308      	adds	r3, #8
 80052d4:	2101      	movs	r1, #1
 80052d6:	4618      	mov	r0, r3
 80052d8:	f001 f930 	bl	800653c <RCCEx_PLL2_Config>
 80052dc:	4603      	mov	r3, r0
 80052de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80052e2:	e004      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80052ea:	e000      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80052ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10a      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052f6:	4bb7      	ldr	r3, [pc, #732]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052fa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80052fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005302:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005304:	4ab3      	ldr	r2, [pc, #716]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005306:	430b      	orrs	r3, r1
 8005308:	6513      	str	r3, [r2, #80]	@ 0x50
 800530a:	e003      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005310:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005320:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005324:	2300      	movs	r3, #0
 8005326:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800532a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800532e:	460b      	mov	r3, r1
 8005330:	4313      	orrs	r3, r2
 8005332:	d039      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800533a:	2b03      	cmp	r3, #3
 800533c:	d81c      	bhi.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800533e:	a201      	add	r2, pc, #4	@ (adr r2, 8005344 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	08005381 	.word	0x08005381
 8005348:	08005355 	.word	0x08005355
 800534c:	08005363 	.word	0x08005363
 8005350:	08005381 	.word	0x08005381
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005354:	4b9f      	ldr	r3, [pc, #636]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005358:	4a9e      	ldr	r2, [pc, #632]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800535a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800535e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005360:	e00f      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005366:	3308      	adds	r3, #8
 8005368:	2102      	movs	r1, #2
 800536a:	4618      	mov	r0, r3
 800536c:	f001 f8e6 	bl	800653c <RCCEx_PLL2_Config>
 8005370:	4603      	mov	r3, r0
 8005372:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005376:	e004      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800537e:	e000      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005382:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10a      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800538a:	4b92      	ldr	r3, [pc, #584]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800538c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800538e:	f023 0103 	bic.w	r1, r3, #3
 8005392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005398:	4a8e      	ldr	r2, [pc, #568]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800539a:	430b      	orrs	r3, r1
 800539c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800539e:	e003      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80053b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053b8:	2300      	movs	r3, #0
 80053ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f000 8099 	beq.w	80054fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053ca:	4b83      	ldr	r3, [pc, #524]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a82      	ldr	r2, [pc, #520]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80053d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053d6:	f7fb febd 	bl	8001154 <HAL_GetTick>
 80053da:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053de:	e00b      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e0:	f7fb feb8 	bl	8001154 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b64      	cmp	r3, #100	@ 0x64
 80053ee:	d903      	bls.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053f6:	e005      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053f8:	4b77      	ldr	r3, [pc, #476]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0ed      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005404:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005408:	2b00      	cmp	r3, #0
 800540a:	d173      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800540c:	4b71      	ldr	r3, [pc, #452]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800540e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005414:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005418:	4053      	eors	r3, r2
 800541a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800541e:	2b00      	cmp	r3, #0
 8005420:	d015      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005422:	4b6c      	ldr	r3, [pc, #432]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005426:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800542a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800542e:	4b69      	ldr	r3, [pc, #420]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005432:	4a68      	ldr	r2, [pc, #416]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005438:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800543a:	4b66      	ldr	r3, [pc, #408]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800543c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800543e:	4a65      	ldr	r2, [pc, #404]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005444:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005446:	4a63      	ldr	r2, [pc, #396]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005448:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800544c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800544e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005452:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800545a:	d118      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545c:	f7fb fe7a 	bl	8001154 <HAL_GetTick>
 8005460:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005464:	e00d      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005466:	f7fb fe75 	bl	8001154 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005470:	1ad2      	subs	r2, r2, r3
 8005472:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005476:	429a      	cmp	r2, r3
 8005478:	d903      	bls.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005480:	e005      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005482:	4b54      	ldr	r3, [pc, #336]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0eb      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800548e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005492:	2b00      	cmp	r3, #0
 8005494:	d129      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800549a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800549e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054a6:	d10e      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80054a8:	4b4a      	ldr	r3, [pc, #296]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80054b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054b8:	091a      	lsrs	r2, r3, #4
 80054ba:	4b48      	ldr	r3, [pc, #288]	@ (80055dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80054bc:	4013      	ands	r3, r2
 80054be:	4a45      	ldr	r2, [pc, #276]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054c0:	430b      	orrs	r3, r1
 80054c2:	6113      	str	r3, [r2, #16]
 80054c4:	e005      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80054c6:	4b43      	ldr	r3, [pc, #268]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	4a42      	ldr	r2, [pc, #264]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80054d0:	6113      	str	r3, [r2, #16]
 80054d2:	4b40      	ldr	r3, [pc, #256]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80054d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e2:	4a3c      	ldr	r2, [pc, #240]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054e4:	430b      	orrs	r3, r1
 80054e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80054e8:	e008      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80054f2:	e003      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80054fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005504:	f002 0301 	and.w	r3, r2, #1
 8005508:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800550c:	2300      	movs	r3, #0
 800550e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005512:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005516:	460b      	mov	r3, r1
 8005518:	4313      	orrs	r3, r2
 800551a:	f000 808f 	beq.w	800563c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800551e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005522:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005524:	2b28      	cmp	r3, #40	@ 0x28
 8005526:	d871      	bhi.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005528:	a201      	add	r2, pc, #4	@ (adr r2, 8005530 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800552a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552e:	bf00      	nop
 8005530:	08005615 	.word	0x08005615
 8005534:	0800560d 	.word	0x0800560d
 8005538:	0800560d 	.word	0x0800560d
 800553c:	0800560d 	.word	0x0800560d
 8005540:	0800560d 	.word	0x0800560d
 8005544:	0800560d 	.word	0x0800560d
 8005548:	0800560d 	.word	0x0800560d
 800554c:	0800560d 	.word	0x0800560d
 8005550:	080055e1 	.word	0x080055e1
 8005554:	0800560d 	.word	0x0800560d
 8005558:	0800560d 	.word	0x0800560d
 800555c:	0800560d 	.word	0x0800560d
 8005560:	0800560d 	.word	0x0800560d
 8005564:	0800560d 	.word	0x0800560d
 8005568:	0800560d 	.word	0x0800560d
 800556c:	0800560d 	.word	0x0800560d
 8005570:	080055f7 	.word	0x080055f7
 8005574:	0800560d 	.word	0x0800560d
 8005578:	0800560d 	.word	0x0800560d
 800557c:	0800560d 	.word	0x0800560d
 8005580:	0800560d 	.word	0x0800560d
 8005584:	0800560d 	.word	0x0800560d
 8005588:	0800560d 	.word	0x0800560d
 800558c:	0800560d 	.word	0x0800560d
 8005590:	08005615 	.word	0x08005615
 8005594:	0800560d 	.word	0x0800560d
 8005598:	0800560d 	.word	0x0800560d
 800559c:	0800560d 	.word	0x0800560d
 80055a0:	0800560d 	.word	0x0800560d
 80055a4:	0800560d 	.word	0x0800560d
 80055a8:	0800560d 	.word	0x0800560d
 80055ac:	0800560d 	.word	0x0800560d
 80055b0:	08005615 	.word	0x08005615
 80055b4:	0800560d 	.word	0x0800560d
 80055b8:	0800560d 	.word	0x0800560d
 80055bc:	0800560d 	.word	0x0800560d
 80055c0:	0800560d 	.word	0x0800560d
 80055c4:	0800560d 	.word	0x0800560d
 80055c8:	0800560d 	.word	0x0800560d
 80055cc:	0800560d 	.word	0x0800560d
 80055d0:	08005615 	.word	0x08005615
 80055d4:	58024400 	.word	0x58024400
 80055d8:	58024800 	.word	0x58024800
 80055dc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e4:	3308      	adds	r3, #8
 80055e6:	2101      	movs	r1, #1
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 ffa7 	bl	800653c <RCCEx_PLL2_Config>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80055f4:	e00f      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055fa:	3328      	adds	r3, #40	@ 0x28
 80055fc:	2101      	movs	r1, #1
 80055fe:	4618      	mov	r0, r3
 8005600:	f001 f84e 	bl	80066a0 <RCCEx_PLL3_Config>
 8005604:	4603      	mov	r3, r0
 8005606:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800560a:	e004      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005612:	e000      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005616:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10a      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800561e:	4bbf      	ldr	r3, [pc, #764]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005622:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800562a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800562c:	4abb      	ldr	r2, [pc, #748]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800562e:	430b      	orrs	r3, r1
 8005630:	6553      	str	r3, [r2, #84]	@ 0x54
 8005632:	e003      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005634:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005638:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800563c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005644:	f002 0302 	and.w	r3, r2, #2
 8005648:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800564c:	2300      	movs	r3, #0
 800564e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005652:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005656:	460b      	mov	r3, r1
 8005658:	4313      	orrs	r3, r2
 800565a:	d041      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800565c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005662:	2b05      	cmp	r3, #5
 8005664:	d824      	bhi.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005666:	a201      	add	r2, pc, #4	@ (adr r2, 800566c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566c:	080056b9 	.word	0x080056b9
 8005670:	08005685 	.word	0x08005685
 8005674:	0800569b 	.word	0x0800569b
 8005678:	080056b9 	.word	0x080056b9
 800567c:	080056b9 	.word	0x080056b9
 8005680:	080056b9 	.word	0x080056b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005688:	3308      	adds	r3, #8
 800568a:	2101      	movs	r1, #1
 800568c:	4618      	mov	r0, r3
 800568e:	f000 ff55 	bl	800653c <RCCEx_PLL2_Config>
 8005692:	4603      	mov	r3, r0
 8005694:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005698:	e00f      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800569a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569e:	3328      	adds	r3, #40	@ 0x28
 80056a0:	2101      	movs	r1, #1
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fffc 	bl	80066a0 <RCCEx_PLL3_Config>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80056ae:	e004      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80056b6:	e000      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80056b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10a      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80056c2:	4b96      	ldr	r3, [pc, #600]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80056c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c6:	f023 0107 	bic.w	r1, r3, #7
 80056ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056d0:	4a92      	ldr	r2, [pc, #584]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80056d2:	430b      	orrs	r3, r1
 80056d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80056d6:	e003      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e8:	f002 0304 	and.w	r3, r2, #4
 80056ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056f0:	2300      	movs	r3, #0
 80056f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056f6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056fa:	460b      	mov	r3, r1
 80056fc:	4313      	orrs	r3, r2
 80056fe:	d044      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005708:	2b05      	cmp	r3, #5
 800570a:	d825      	bhi.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800570c:	a201      	add	r2, pc, #4	@ (adr r2, 8005714 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800570e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005712:	bf00      	nop
 8005714:	08005761 	.word	0x08005761
 8005718:	0800572d 	.word	0x0800572d
 800571c:	08005743 	.word	0x08005743
 8005720:	08005761 	.word	0x08005761
 8005724:	08005761 	.word	0x08005761
 8005728:	08005761 	.word	0x08005761
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800572c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005730:	3308      	adds	r3, #8
 8005732:	2101      	movs	r1, #1
 8005734:	4618      	mov	r0, r3
 8005736:	f000 ff01 	bl	800653c <RCCEx_PLL2_Config>
 800573a:	4603      	mov	r3, r0
 800573c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005740:	e00f      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005746:	3328      	adds	r3, #40	@ 0x28
 8005748:	2101      	movs	r1, #1
 800574a:	4618      	mov	r0, r3
 800574c:	f000 ffa8 	bl	80066a0 <RCCEx_PLL3_Config>
 8005750:	4603      	mov	r3, r0
 8005752:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005756:	e004      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800575e:	e000      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005762:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10b      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800576a:	4b6c      	ldr	r3, [pc, #432]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800576c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800576e:	f023 0107 	bic.w	r1, r3, #7
 8005772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800577a:	4a68      	ldr	r2, [pc, #416]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800577c:	430b      	orrs	r3, r1
 800577e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005780:	e003      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005782:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005786:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800578a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f002 0320 	and.w	r3, r2, #32
 8005796:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800579a:	2300      	movs	r3, #0
 800579c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80057a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4313      	orrs	r3, r2
 80057a8:	d055      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80057aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057b6:	d033      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80057b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057bc:	d82c      	bhi.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80057be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057c2:	d02f      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80057c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057c8:	d826      	bhi.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80057ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057ce:	d02b      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80057d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057d4:	d820      	bhi.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80057d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057da:	d012      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80057dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057e0:	d81a      	bhi.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d022      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80057e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057ea:	d115      	bne.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f0:	3308      	adds	r3, #8
 80057f2:	2100      	movs	r1, #0
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fea1 	bl	800653c <RCCEx_PLL2_Config>
 80057fa:	4603      	mov	r3, r0
 80057fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005800:	e015      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005806:	3328      	adds	r3, #40	@ 0x28
 8005808:	2102      	movs	r1, #2
 800580a:	4618      	mov	r0, r3
 800580c:	f000 ff48 	bl	80066a0 <RCCEx_PLL3_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005816:	e00a      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800581e:	e006      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005820:	bf00      	nop
 8005822:	e004      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005824:	bf00      	nop
 8005826:	e002      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005828:	bf00      	nop
 800582a:	e000      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800582c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800582e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10b      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005836:	4b39      	ldr	r3, [pc, #228]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800583a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800583e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005842:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005846:	4a35      	ldr	r2, [pc, #212]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005848:	430b      	orrs	r3, r1
 800584a:	6553      	str	r3, [r2, #84]	@ 0x54
 800584c:	e003      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005852:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800585a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005862:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005866:	2300      	movs	r3, #0
 8005868:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800586c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005870:	460b      	mov	r3, r1
 8005872:	4313      	orrs	r3, r2
 8005874:	d058      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800587e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005882:	d033      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005884:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005888:	d82c      	bhi.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800588a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800588e:	d02f      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005894:	d826      	bhi.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005896:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800589a:	d02b      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800589c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058a0:	d820      	bhi.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80058a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058a6:	d012      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80058a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058ac:	d81a      	bhi.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d022      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80058b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058b6:	d115      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058bc:	3308      	adds	r3, #8
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fe3b 	bl	800653c <RCCEx_PLL2_Config>
 80058c6:	4603      	mov	r3, r0
 80058c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80058cc:	e015      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058d2:	3328      	adds	r3, #40	@ 0x28
 80058d4:	2102      	movs	r1, #2
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fee2 	bl	80066a0 <RCCEx_PLL3_Config>
 80058dc:	4603      	mov	r3, r0
 80058de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80058e2:	e00a      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80058ea:	e006      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80058ec:	bf00      	nop
 80058ee:	e004      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80058f0:	bf00      	nop
 80058f2:	e002      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80058f4:	bf00      	nop
 80058f6:	e000      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80058f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10e      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005902:	4b06      	ldr	r3, [pc, #24]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005906:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800590a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800590e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005912:	4a02      	ldr	r2, [pc, #8]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005914:	430b      	orrs	r3, r1
 8005916:	6593      	str	r3, [r2, #88]	@ 0x58
 8005918:	e006      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800591a:	bf00      	nop
 800591c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005920:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005924:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800592c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005930:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005934:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005938:	2300      	movs	r3, #0
 800593a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800593e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005942:	460b      	mov	r3, r1
 8005944:	4313      	orrs	r3, r2
 8005946:	d055      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005950:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005954:	d033      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005956:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800595a:	d82c      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800595c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005960:	d02f      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005962:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005966:	d826      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005968:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800596c:	d02b      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800596e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005972:	d820      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005974:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005978:	d012      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800597a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800597e:	d81a      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005980:	2b00      	cmp	r3, #0
 8005982:	d022      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005984:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005988:	d115      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800598a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800598e:	3308      	adds	r3, #8
 8005990:	2100      	movs	r1, #0
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fdd2 	bl	800653c <RCCEx_PLL2_Config>
 8005998:	4603      	mov	r3, r0
 800599a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800599e:	e015      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a4:	3328      	adds	r3, #40	@ 0x28
 80059a6:	2102      	movs	r1, #2
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fe79 	bl	80066a0 <RCCEx_PLL3_Config>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80059b4:	e00a      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80059bc:	e006      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80059be:	bf00      	nop
 80059c0:	e004      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80059c2:	bf00      	nop
 80059c4:	e002      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80059c6:	bf00      	nop
 80059c8:	e000      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80059ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10b      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80059d4:	4ba0      	ldr	r3, [pc, #640]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80059d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80059dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059e4:	4a9c      	ldr	r2, [pc, #624]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80059e6:	430b      	orrs	r3, r1
 80059e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80059ea:	e003      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80059f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fc:	f002 0308 	and.w	r3, r2, #8
 8005a00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a04:	2300      	movs	r3, #0
 8005a06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a0a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4313      	orrs	r3, r2
 8005a12:	d01e      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a20:	d10c      	bne.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a26:	3328      	adds	r3, #40	@ 0x28
 8005a28:	2102      	movs	r1, #2
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fe38 	bl	80066a0 <RCCEx_PLL3_Config>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005a3c:	4b86      	ldr	r3, [pc, #536]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a40:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a4c:	4a82      	ldr	r2, [pc, #520]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a4e:	430b      	orrs	r3, r1
 8005a50:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5a:	f002 0310 	and.w	r3, r2, #16
 8005a5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a62:	2300      	movs	r3, #0
 8005a64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a68:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	d01e      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a7e:	d10c      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a84:	3328      	adds	r3, #40	@ 0x28
 8005a86:	2102      	movs	r1, #2
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 fe09 	bl	80066a0 <RCCEx_PLL3_Config>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a9a:	4b6f      	ldr	r3, [pc, #444]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aaa:	4a6b      	ldr	r2, [pc, #428]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005aac:	430b      	orrs	r3, r1
 8005aae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005abc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005abe:	2300      	movs	r3, #0
 8005ac0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ac2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	d03e      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ad4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ad8:	d022      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005ada:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ade:	d81b      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ae8:	d00b      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005aea:	e015      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af0:	3308      	adds	r3, #8
 8005af2:	2100      	movs	r1, #0
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fd21 	bl	800653c <RCCEx_PLL2_Config>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b00:	e00f      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b06:	3328      	adds	r3, #40	@ 0x28
 8005b08:	2102      	movs	r1, #2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fdc8 	bl	80066a0 <RCCEx_PLL3_Config>
 8005b10:	4603      	mov	r3, r0
 8005b12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b16:	e004      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b1e:	e000      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10b      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b2e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b3a:	4a47      	ldr	r2, [pc, #284]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b40:	e003      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b52:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005b56:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b58:	2300      	movs	r3, #0
 8005b5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b5c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005b60:	460b      	mov	r3, r1
 8005b62:	4313      	orrs	r3, r2
 8005b64:	d03b      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b72:	d01f      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005b74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b78:	d818      	bhi.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005b7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b7e:	d003      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005b80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b84:	d007      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005b86:	e011      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b88:	4b33      	ldr	r3, [pc, #204]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8c:	4a32      	ldr	r2, [pc, #200]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b94:	e00f      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b9a:	3328      	adds	r3, #40	@ 0x28
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fd7e 	bl	80066a0 <RCCEx_PLL3_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005baa:	e004      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bb2:	e000      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10b      	bne.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bbe:	4b26      	ldr	r3, [pc, #152]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bce:	4a22      	ldr	r2, [pc, #136]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	6553      	str	r3, [r2, #84]	@ 0x54
 8005bd4:	e003      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bda:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005bea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bec:	2300      	movs	r3, #0
 8005bee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bf0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	d034      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c08:	d007      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005c0a:	e011      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c0c:	4b12      	ldr	r3, [pc, #72]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c10:	4a11      	ldr	r2, [pc, #68]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c18:	e00e      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c1e:	3308      	adds	r3, #8
 8005c20:	2102      	movs	r1, #2
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fc8a 	bl	800653c <RCCEx_PLL2_Config>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c2e:	e003      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10d      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005c40:	4b05      	ldr	r3, [pc, #20]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c44:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c4e:	4a02      	ldr	r2, [pc, #8]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c50:	430b      	orrs	r3, r1
 8005c52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c54:	e006      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005c56:	bf00      	nop
 8005c58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005c70:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c72:	2300      	movs	r3, #0
 8005c74:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c76:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	d00c      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c84:	3328      	adds	r3, #40	@ 0x28
 8005c86:	2102      	movs	r1, #2
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fd09 	bl	80066a0 <RCCEx_PLL3_Config>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005ca6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ca8:	2300      	movs	r3, #0
 8005caa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cac:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	d036      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cc0:	d018      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005cc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cc6:	d811      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005cc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ccc:	d014      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005cce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cd2:	d80b      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d011      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005cd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cdc:	d106      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cde:	4bb7      	ldr	r3, [pc, #732]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce2:	4ab6      	ldr	r2, [pc, #728]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ce8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005cea:	e008      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cf2:	e004      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005cf4:	bf00      	nop
 8005cf6:	e002      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005cf8:	bf00      	nop
 8005cfa:	e000      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10a      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d06:	4bad      	ldr	r3, [pc, #692]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d14:	4aa9      	ldr	r2, [pc, #676]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d16:	430b      	orrs	r3, r1
 8005d18:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d1a:	e003      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005d30:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d32:	2300      	movs	r3, #0
 8005d34:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d36:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	d009      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d40:	4b9e      	ldr	r3, [pc, #632]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d44:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4e:	4a9b      	ldr	r2, [pc, #620]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d50:	430b      	orrs	r3, r1
 8005d52:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005d60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d62:	2300      	movs	r3, #0
 8005d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d66:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	d009      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d70:	4b92      	ldr	r3, [pc, #584]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d74:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d7e:	4a8f      	ldr	r2, [pc, #572]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d80:	430b      	orrs	r3, r1
 8005d82:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005d90:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d92:	2300      	movs	r3, #0
 8005d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d96:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	d00e      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005da0:	4b86      	ldr	r3, [pc, #536]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	4a85      	ldr	r2, [pc, #532]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005da6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005daa:	6113      	str	r3, [r2, #16]
 8005dac:	4b83      	ldr	r3, [pc, #524]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005dae:	6919      	ldr	r1, [r3, #16]
 8005db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005db8:	4a80      	ldr	r2, [pc, #512]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005dba:	430b      	orrs	r3, r1
 8005dbc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005dca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dcc:	2300      	movs	r3, #0
 8005dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dd0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	d009      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005dda:	4b78      	ldr	r3, [pc, #480]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dde:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de8:	4a74      	ldr	r2, [pc, #464]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005dea:	430b      	orrs	r3, r1
 8005dec:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005dfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e00:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005e04:	460b      	mov	r3, r1
 8005e06:	4313      	orrs	r3, r2
 8005e08:	d00a      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e0a:	4b6c      	ldr	r3, [pc, #432]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e1a:	4a68      	ldr	r2, [pc, #416]	@ (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e1c:	430b      	orrs	r3, r1
 8005e1e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	2100      	movs	r1, #0
 8005e2a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e32:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005e36:	460b      	mov	r3, r1
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	d011      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e40:	3308      	adds	r3, #8
 8005e42:	2100      	movs	r1, #0
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 fb79 	bl	800653c <RCCEx_PLL2_Config>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005e50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e68:	2100      	movs	r1, #0
 8005e6a:	6239      	str	r1, [r7, #32]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e72:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005e76:	460b      	mov	r3, r1
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	d011      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e80:	3308      	adds	r3, #8
 8005e82:	2101      	movs	r1, #1
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fb59 	bl	800653c <RCCEx_PLL2_Config>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005e90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	61b9      	str	r1, [r7, #24]
 8005eac:	f003 0304 	and.w	r3, r3, #4
 8005eb0:	61fb      	str	r3, [r7, #28]
 8005eb2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	d011      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	2102      	movs	r1, #2
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 fb39 	bl	800653c <RCCEx_PLL2_Config>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005ed0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005edc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee8:	2100      	movs	r1, #0
 8005eea:	6139      	str	r1, [r7, #16]
 8005eec:	f003 0308 	and.w	r3, r3, #8
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	d011      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f00:	3328      	adds	r3, #40	@ 0x28
 8005f02:	2100      	movs	r1, #0
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 fbcb 	bl	80066a0 <RCCEx_PLL3_Config>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005f10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	2100      	movs	r1, #0
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	f003 0310 	and.w	r3, r3, #16
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005f36:	460b      	mov	r3, r1
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	d011      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f40:	3328      	adds	r3, #40	@ 0x28
 8005f42:	2101      	movs	r1, #1
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 fbab 	bl	80066a0 <RCCEx_PLL3_Config>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005f50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	2100      	movs	r1, #0
 8005f6a:	6039      	str	r1, [r7, #0]
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	607b      	str	r3, [r7, #4]
 8005f72:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005f76:	460b      	mov	r3, r1
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	d011      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f80:	3328      	adds	r3, #40	@ 0x28
 8005f82:	2102      	movs	r1, #2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 fb8b 	bl	80066a0 <RCCEx_PLL3_Config>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005f90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005fa0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	e000      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fba:	bf00      	nop
 8005fbc:	58024400 	.word	0x58024400

08005fc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005fc4:	f7fe fe00 	bl	8004bc8 <HAL_RCC_GetHCLKFreq>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	4b06      	ldr	r3, [pc, #24]	@ (8005fe4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	091b      	lsrs	r3, r3, #4
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	4904      	ldr	r1, [pc, #16]	@ (8005fe8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005fd6:	5ccb      	ldrb	r3, [r1, r3]
 8005fd8:	f003 031f 	and.w	r3, r3, #31
 8005fdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	58024400 	.word	0x58024400
 8005fe8:	0800876c 	.word	0x0800876c

08005fec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b089      	sub	sp, #36	@ 0x24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ff4:	4ba1      	ldr	r3, [pc, #644]	@ (800627c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff8:	f003 0303 	and.w	r3, r3, #3
 8005ffc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005ffe:	4b9f      	ldr	r3, [pc, #636]	@ (800627c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006002:	0b1b      	lsrs	r3, r3, #12
 8006004:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006008:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800600a:	4b9c      	ldr	r3, [pc, #624]	@ (800627c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800600c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600e:	091b      	lsrs	r3, r3, #4
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006016:	4b99      	ldr	r3, [pc, #612]	@ (800627c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800601a:	08db      	lsrs	r3, r3, #3
 800601c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	fb02 f303 	mul.w	r3, r2, r3
 8006026:	ee07 3a90 	vmov	s15, r3
 800602a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 8111 	beq.w	800625c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	2b02      	cmp	r3, #2
 800603e:	f000 8083 	beq.w	8006148 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	2b02      	cmp	r3, #2
 8006046:	f200 80a1 	bhi.w	800618c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d056      	beq.n	8006104 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006056:	e099      	b.n	800618c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006058:	4b88      	ldr	r3, [pc, #544]	@ (800627c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0320 	and.w	r3, r3, #32
 8006060:	2b00      	cmp	r3, #0
 8006062:	d02d      	beq.n	80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006064:	4b85      	ldr	r3, [pc, #532]	@ (800627c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	08db      	lsrs	r3, r3, #3
 800606a:	f003 0303 	and.w	r3, r3, #3
 800606e:	4a84      	ldr	r2, [pc, #528]	@ (8006280 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006070:	fa22 f303 	lsr.w	r3, r2, r3
 8006074:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	ee07 3a90 	vmov	s15, r3
 800607c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800608e:	4b7b      	ldr	r3, [pc, #492]	@ (800627c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006096:	ee07 3a90 	vmov	s15, r3
 800609a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800609e:	ed97 6a03 	vldr	s12, [r7, #12]
 80060a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80060be:	e087      	b.n	80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	ee07 3a90 	vmov	s15, r3
 80060c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006288 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80060ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060d2:	4b6a      	ldr	r3, [pc, #424]	@ (800627c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006102:	e065      	b.n	80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	ee07 3a90 	vmov	s15, r3
 800610a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800628c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006116:	4b59      	ldr	r3, [pc, #356]	@ (800627c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006126:	ed97 6a03 	vldr	s12, [r7, #12]
 800612a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800612e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800613a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800613e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006146:	e043      	b.n	80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006152:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006290 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800615a:	4b48      	ldr	r3, [pc, #288]	@ (800627c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800615c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800616a:	ed97 6a03 	vldr	s12, [r7, #12]
 800616e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800617a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800617e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800618a:	e021      	b.n	80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	ee07 3a90 	vmov	s15, r3
 8006192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006196:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800628c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800619a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800619e:	4b37      	ldr	r3, [pc, #220]	@ (800627c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80061b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80061d0:	4b2a      	ldr	r3, [pc, #168]	@ (800627c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d4:	0a5b      	lsrs	r3, r3, #9
 80061d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80061ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061f6:	ee17 2a90 	vmov	r2, s15
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80061fe:	4b1f      	ldr	r3, [pc, #124]	@ (800627c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006202:	0c1b      	lsrs	r3, r3, #16
 8006204:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006208:	ee07 3a90 	vmov	s15, r3
 800620c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006210:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006214:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006218:	edd7 6a07 	vldr	s13, [r7, #28]
 800621c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006224:	ee17 2a90 	vmov	r2, s15
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800622c:	4b13      	ldr	r3, [pc, #76]	@ (800627c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800622e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006230:	0e1b      	lsrs	r3, r3, #24
 8006232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006246:	edd7 6a07 	vldr	s13, [r7, #28]
 800624a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800624e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006252:	ee17 2a90 	vmov	r2, s15
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800625a:	e008      	b.n	800626e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	609a      	str	r2, [r3, #8]
}
 800626e:	bf00      	nop
 8006270:	3724      	adds	r7, #36	@ 0x24
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	58024400 	.word	0x58024400
 8006280:	03d09000 	.word	0x03d09000
 8006284:	46000000 	.word	0x46000000
 8006288:	4c742400 	.word	0x4c742400
 800628c:	4a742400 	.word	0x4a742400
 8006290:	4bbebc20 	.word	0x4bbebc20

08006294 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006294:	b480      	push	{r7}
 8006296:	b089      	sub	sp, #36	@ 0x24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800629c:	4ba1      	ldr	r3, [pc, #644]	@ (8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800629e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a0:	f003 0303 	and.w	r3, r3, #3
 80062a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80062a6:	4b9f      	ldr	r3, [pc, #636]	@ (8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062aa:	0d1b      	lsrs	r3, r3, #20
 80062ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80062b2:	4b9c      	ldr	r3, [pc, #624]	@ (8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b6:	0a1b      	lsrs	r3, r3, #8
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80062be:	4b99      	ldr	r3, [pc, #612]	@ (8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062c2:	08db      	lsrs	r3, r3, #3
 80062c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	fb02 f303 	mul.w	r3, r2, r3
 80062ce:	ee07 3a90 	vmov	s15, r3
 80062d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 8111 	beq.w	8006504 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	f000 8083 	beq.w	80063f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	f200 80a1 	bhi.w	8006434 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d056      	beq.n	80063ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80062fe:	e099      	b.n	8006434 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006300:	4b88      	ldr	r3, [pc, #544]	@ (8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0320 	and.w	r3, r3, #32
 8006308:	2b00      	cmp	r3, #0
 800630a:	d02d      	beq.n	8006368 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800630c:	4b85      	ldr	r3, [pc, #532]	@ (8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	08db      	lsrs	r3, r3, #3
 8006312:	f003 0303 	and.w	r3, r3, #3
 8006316:	4a84      	ldr	r2, [pc, #528]	@ (8006528 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006318:	fa22 f303 	lsr.w	r3, r2, r3
 800631c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	ee07 3a90 	vmov	s15, r3
 8006324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006336:	4b7b      	ldr	r3, [pc, #492]	@ (8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800633e:	ee07 3a90 	vmov	s15, r3
 8006342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006346:	ed97 6a03 	vldr	s12, [r7, #12]
 800634a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800652c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800634e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800635a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800635e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006362:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006366:	e087      	b.n	8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	ee07 3a90 	vmov	s15, r3
 800636e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006372:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006530 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800637a:	4b6a      	ldr	r3, [pc, #424]	@ (8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800637c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006382:	ee07 3a90 	vmov	s15, r3
 8006386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800638a:	ed97 6a03 	vldr	s12, [r7, #12]
 800638e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800652c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800639a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800639e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063aa:	e065      	b.n	8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	ee07 3a90 	vmov	s15, r3
 80063b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80063ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063be:	4b59      	ldr	r3, [pc, #356]	@ (8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c6:	ee07 3a90 	vmov	s15, r3
 80063ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80063d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800652c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063ee:	e043      	b.n	8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006538 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80063fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006402:	4b48      	ldr	r3, [pc, #288]	@ (8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800640a:	ee07 3a90 	vmov	s15, r3
 800640e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006412:	ed97 6a03 	vldr	s12, [r7, #12]
 8006416:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800652c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800641a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800641e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800642a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800642e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006432:	e021      	b.n	8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	ee07 3a90 	vmov	s15, r3
 800643a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006446:	4b37      	ldr	r3, [pc, #220]	@ (8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644e:	ee07 3a90 	vmov	s15, r3
 8006452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006456:	ed97 6a03 	vldr	s12, [r7, #12]
 800645a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800652c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800645e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800646a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800646e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006476:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006478:	4b2a      	ldr	r3, [pc, #168]	@ (8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800647a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647c:	0a5b      	lsrs	r3, r3, #9
 800647e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006482:	ee07 3a90 	vmov	s15, r3
 8006486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800648e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006492:	edd7 6a07 	vldr	s13, [r7, #28]
 8006496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800649a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800649e:	ee17 2a90 	vmov	r2, s15
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80064a6:	4b1f      	ldr	r3, [pc, #124]	@ (8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064aa:	0c1b      	lsrs	r3, r3, #16
 80064ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064b0:	ee07 3a90 	vmov	s15, r3
 80064b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80064c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064cc:	ee17 2a90 	vmov	r2, s15
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80064d4:	4b13      	ldr	r3, [pc, #76]	@ (8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d8:	0e1b      	lsrs	r3, r3, #24
 80064da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064de:	ee07 3a90 	vmov	s15, r3
 80064e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80064f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064fa:	ee17 2a90 	vmov	r2, s15
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006502:	e008      	b.n	8006516 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	609a      	str	r2, [r3, #8]
}
 8006516:	bf00      	nop
 8006518:	3724      	adds	r7, #36	@ 0x24
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	58024400 	.word	0x58024400
 8006528:	03d09000 	.word	0x03d09000
 800652c:	46000000 	.word	0x46000000
 8006530:	4c742400 	.word	0x4c742400
 8006534:	4a742400 	.word	0x4a742400
 8006538:	4bbebc20 	.word	0x4bbebc20

0800653c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800654a:	4b53      	ldr	r3, [pc, #332]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 800654c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	2b03      	cmp	r3, #3
 8006554:	d101      	bne.n	800655a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e099      	b.n	800668e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800655a:	4b4f      	ldr	r3, [pc, #316]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a4e      	ldr	r2, [pc, #312]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 8006560:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006566:	f7fa fdf5 	bl	8001154 <HAL_GetTick>
 800656a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800656c:	e008      	b.n	8006580 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800656e:	f7fa fdf1 	bl	8001154 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e086      	b.n	800668e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006580:	4b45      	ldr	r3, [pc, #276]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1f0      	bne.n	800656e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800658c:	4b42      	ldr	r3, [pc, #264]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 800658e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006590:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	031b      	lsls	r3, r3, #12
 800659a:	493f      	ldr	r1, [pc, #252]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 800659c:	4313      	orrs	r3, r2
 800659e:	628b      	str	r3, [r1, #40]	@ 0x28
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	025b      	lsls	r3, r3, #9
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	3b01      	subs	r3, #1
 80065bc:	041b      	lsls	r3, r3, #16
 80065be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	3b01      	subs	r3, #1
 80065ca:	061b      	lsls	r3, r3, #24
 80065cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80065d0:	4931      	ldr	r1, [pc, #196]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80065d6:	4b30      	ldr	r3, [pc, #192]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 80065d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	492d      	ldr	r1, [pc, #180]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80065e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 80065ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ec:	f023 0220 	bic.w	r2, r3, #32
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	4928      	ldr	r1, [pc, #160]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80065fa:	4b27      	ldr	r3, [pc, #156]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 80065fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fe:	4a26      	ldr	r2, [pc, #152]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 8006600:	f023 0310 	bic.w	r3, r3, #16
 8006604:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006606:	4b24      	ldr	r3, [pc, #144]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 8006608:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800660a:	4b24      	ldr	r3, [pc, #144]	@ (800669c <RCCEx_PLL2_Config+0x160>)
 800660c:	4013      	ands	r3, r2
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	69d2      	ldr	r2, [r2, #28]
 8006612:	00d2      	lsls	r2, r2, #3
 8006614:	4920      	ldr	r1, [pc, #128]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 8006616:	4313      	orrs	r3, r2
 8006618:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800661a:	4b1f      	ldr	r3, [pc, #124]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 800661c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661e:	4a1e      	ldr	r2, [pc, #120]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 8006620:	f043 0310 	orr.w	r3, r3, #16
 8006624:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d106      	bne.n	800663a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800662c:	4b1a      	ldr	r3, [pc, #104]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 800662e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006630:	4a19      	ldr	r2, [pc, #100]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 8006632:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006636:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006638:	e00f      	b.n	800665a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d106      	bne.n	800664e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006640:	4b15      	ldr	r3, [pc, #84]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 8006642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006644:	4a14      	ldr	r2, [pc, #80]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 8006646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800664a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800664c:	e005      	b.n	800665a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800664e:	4b12      	ldr	r3, [pc, #72]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 8006650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006652:	4a11      	ldr	r2, [pc, #68]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 8006654:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006658:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800665a:	4b0f      	ldr	r3, [pc, #60]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a0e      	ldr	r2, [pc, #56]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 8006660:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006664:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006666:	f7fa fd75 	bl	8001154 <HAL_GetTick>
 800666a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800666c:	e008      	b.n	8006680 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800666e:	f7fa fd71 	bl	8001154 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d901      	bls.n	8006680 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e006      	b.n	800668e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006680:	4b05      	ldr	r3, [pc, #20]	@ (8006698 <RCCEx_PLL2_Config+0x15c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0f0      	beq.n	800666e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800668c:	7bfb      	ldrb	r3, [r7, #15]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	58024400 	.word	0x58024400
 800669c:	ffff0007 	.word	0xffff0007

080066a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066ae:	4b53      	ldr	r3, [pc, #332]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 80066b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d101      	bne.n	80066be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e099      	b.n	80067f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80066be:	4b4f      	ldr	r3, [pc, #316]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a4e      	ldr	r2, [pc, #312]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 80066c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066ca:	f7fa fd43 	bl	8001154 <HAL_GetTick>
 80066ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066d0:	e008      	b.n	80066e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80066d2:	f7fa fd3f 	bl	8001154 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d901      	bls.n	80066e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e086      	b.n	80067f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066e4:	4b45      	ldr	r3, [pc, #276]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1f0      	bne.n	80066d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80066f0:	4b42      	ldr	r3, [pc, #264]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 80066f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	051b      	lsls	r3, r3, #20
 80066fe:	493f      	ldr	r1, [pc, #252]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 8006700:	4313      	orrs	r3, r2
 8006702:	628b      	str	r3, [r1, #40]	@ 0x28
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	3b01      	subs	r3, #1
 800670a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	3b01      	subs	r3, #1
 8006714:	025b      	lsls	r3, r3, #9
 8006716:	b29b      	uxth	r3, r3
 8006718:	431a      	orrs	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	3b01      	subs	r3, #1
 8006720:	041b      	lsls	r3, r3, #16
 8006722:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	3b01      	subs	r3, #1
 800672e:	061b      	lsls	r3, r3, #24
 8006730:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006734:	4931      	ldr	r1, [pc, #196]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 8006736:	4313      	orrs	r3, r2
 8006738:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800673a:	4b30      	ldr	r3, [pc, #192]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 800673c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	492d      	ldr	r1, [pc, #180]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 8006748:	4313      	orrs	r3, r2
 800674a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800674c:	4b2b      	ldr	r3, [pc, #172]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 800674e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006750:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	4928      	ldr	r1, [pc, #160]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 800675a:	4313      	orrs	r3, r2
 800675c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800675e:	4b27      	ldr	r3, [pc, #156]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 8006760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006762:	4a26      	ldr	r2, [pc, #152]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 8006764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006768:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800676a:	4b24      	ldr	r3, [pc, #144]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 800676c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800676e:	4b24      	ldr	r3, [pc, #144]	@ (8006800 <RCCEx_PLL3_Config+0x160>)
 8006770:	4013      	ands	r3, r2
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	69d2      	ldr	r2, [r2, #28]
 8006776:	00d2      	lsls	r2, r2, #3
 8006778:	4920      	ldr	r1, [pc, #128]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 800677a:	4313      	orrs	r3, r2
 800677c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800677e:	4b1f      	ldr	r3, [pc, #124]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 8006780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006782:	4a1e      	ldr	r2, [pc, #120]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 8006784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006788:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d106      	bne.n	800679e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006790:	4b1a      	ldr	r3, [pc, #104]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 8006792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006794:	4a19      	ldr	r2, [pc, #100]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 8006796:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800679a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800679c:	e00f      	b.n	80067be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d106      	bne.n	80067b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80067a4:	4b15      	ldr	r3, [pc, #84]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 80067a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a8:	4a14      	ldr	r2, [pc, #80]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 80067aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80067ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80067b0:	e005      	b.n	80067be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80067b2:	4b12      	ldr	r3, [pc, #72]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 80067b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b6:	4a11      	ldr	r2, [pc, #68]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 80067b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80067be:	4b0f      	ldr	r3, [pc, #60]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a0e      	ldr	r2, [pc, #56]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 80067c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ca:	f7fa fcc3 	bl	8001154 <HAL_GetTick>
 80067ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067d0:	e008      	b.n	80067e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80067d2:	f7fa fcbf 	bl	8001154 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d901      	bls.n	80067e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e006      	b.n	80067f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067e4:	4b05      	ldr	r3, [pc, #20]	@ (80067fc <RCCEx_PLL3_Config+0x15c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d0f0      	beq.n	80067d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	58024400 	.word	0x58024400
 8006800:	ffff0007 	.word	0xffff0007

08006804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e049      	b.n	80068aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d106      	bne.n	8006830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7fa fa64 	bl	8000cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	3304      	adds	r3, #4
 8006840:	4619      	mov	r1, r3
 8006842:	4610      	mov	r0, r2
 8006844:	f000 f8b4 	bl	80069b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d001      	beq.n	80068cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e056      	b.n	800697a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a2b      	ldr	r2, [pc, #172]	@ (8006988 <HAL_TIM_Base_Start+0xd4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d02c      	beq.n	8006938 <HAL_TIM_Base_Start+0x84>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068e6:	d027      	beq.n	8006938 <HAL_TIM_Base_Start+0x84>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a27      	ldr	r2, [pc, #156]	@ (800698c <HAL_TIM_Base_Start+0xd8>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d022      	beq.n	8006938 <HAL_TIM_Base_Start+0x84>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a26      	ldr	r2, [pc, #152]	@ (8006990 <HAL_TIM_Base_Start+0xdc>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d01d      	beq.n	8006938 <HAL_TIM_Base_Start+0x84>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a24      	ldr	r2, [pc, #144]	@ (8006994 <HAL_TIM_Base_Start+0xe0>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d018      	beq.n	8006938 <HAL_TIM_Base_Start+0x84>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a23      	ldr	r2, [pc, #140]	@ (8006998 <HAL_TIM_Base_Start+0xe4>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d013      	beq.n	8006938 <HAL_TIM_Base_Start+0x84>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a21      	ldr	r2, [pc, #132]	@ (800699c <HAL_TIM_Base_Start+0xe8>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d00e      	beq.n	8006938 <HAL_TIM_Base_Start+0x84>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a20      	ldr	r2, [pc, #128]	@ (80069a0 <HAL_TIM_Base_Start+0xec>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d009      	beq.n	8006938 <HAL_TIM_Base_Start+0x84>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a1e      	ldr	r2, [pc, #120]	@ (80069a4 <HAL_TIM_Base_Start+0xf0>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d004      	beq.n	8006938 <HAL_TIM_Base_Start+0x84>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a1d      	ldr	r2, [pc, #116]	@ (80069a8 <HAL_TIM_Base_Start+0xf4>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d115      	bne.n	8006964 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689a      	ldr	r2, [r3, #8]
 800693e:	4b1b      	ldr	r3, [pc, #108]	@ (80069ac <HAL_TIM_Base_Start+0xf8>)
 8006940:	4013      	ands	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b06      	cmp	r3, #6
 8006948:	d015      	beq.n	8006976 <HAL_TIM_Base_Start+0xc2>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006950:	d011      	beq.n	8006976 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f042 0201 	orr.w	r2, r2, #1
 8006960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006962:	e008      	b.n	8006976 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0201 	orr.w	r2, r2, #1
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	e000      	b.n	8006978 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006976:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	40010000 	.word	0x40010000
 800698c:	40000400 	.word	0x40000400
 8006990:	40000800 	.word	0x40000800
 8006994:	40000c00 	.word	0x40000c00
 8006998:	40010400 	.word	0x40010400
 800699c:	40001800 	.word	0x40001800
 80069a0:	40014000 	.word	0x40014000
 80069a4:	4000e000 	.word	0x4000e000
 80069a8:	4000e400 	.word	0x4000e400
 80069ac:	00010007 	.word	0x00010007

080069b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a4a      	ldr	r2, [pc, #296]	@ (8006aec <TIM_Base_SetConfig+0x13c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d013      	beq.n	80069f0 <TIM_Base_SetConfig+0x40>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ce:	d00f      	beq.n	80069f0 <TIM_Base_SetConfig+0x40>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a47      	ldr	r2, [pc, #284]	@ (8006af0 <TIM_Base_SetConfig+0x140>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d00b      	beq.n	80069f0 <TIM_Base_SetConfig+0x40>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a46      	ldr	r2, [pc, #280]	@ (8006af4 <TIM_Base_SetConfig+0x144>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d007      	beq.n	80069f0 <TIM_Base_SetConfig+0x40>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a45      	ldr	r2, [pc, #276]	@ (8006af8 <TIM_Base_SetConfig+0x148>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d003      	beq.n	80069f0 <TIM_Base_SetConfig+0x40>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a44      	ldr	r2, [pc, #272]	@ (8006afc <TIM_Base_SetConfig+0x14c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d108      	bne.n	8006a02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a39      	ldr	r2, [pc, #228]	@ (8006aec <TIM_Base_SetConfig+0x13c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d027      	beq.n	8006a5a <TIM_Base_SetConfig+0xaa>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a10:	d023      	beq.n	8006a5a <TIM_Base_SetConfig+0xaa>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a36      	ldr	r2, [pc, #216]	@ (8006af0 <TIM_Base_SetConfig+0x140>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d01f      	beq.n	8006a5a <TIM_Base_SetConfig+0xaa>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a35      	ldr	r2, [pc, #212]	@ (8006af4 <TIM_Base_SetConfig+0x144>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d01b      	beq.n	8006a5a <TIM_Base_SetConfig+0xaa>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a34      	ldr	r2, [pc, #208]	@ (8006af8 <TIM_Base_SetConfig+0x148>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d017      	beq.n	8006a5a <TIM_Base_SetConfig+0xaa>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a33      	ldr	r2, [pc, #204]	@ (8006afc <TIM_Base_SetConfig+0x14c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d013      	beq.n	8006a5a <TIM_Base_SetConfig+0xaa>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a32      	ldr	r2, [pc, #200]	@ (8006b00 <TIM_Base_SetConfig+0x150>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00f      	beq.n	8006a5a <TIM_Base_SetConfig+0xaa>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a31      	ldr	r2, [pc, #196]	@ (8006b04 <TIM_Base_SetConfig+0x154>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00b      	beq.n	8006a5a <TIM_Base_SetConfig+0xaa>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a30      	ldr	r2, [pc, #192]	@ (8006b08 <TIM_Base_SetConfig+0x158>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d007      	beq.n	8006a5a <TIM_Base_SetConfig+0xaa>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a2f      	ldr	r2, [pc, #188]	@ (8006b0c <TIM_Base_SetConfig+0x15c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d003      	beq.n	8006a5a <TIM_Base_SetConfig+0xaa>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a2e      	ldr	r2, [pc, #184]	@ (8006b10 <TIM_Base_SetConfig+0x160>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d108      	bne.n	8006a6c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a16      	ldr	r2, [pc, #88]	@ (8006aec <TIM_Base_SetConfig+0x13c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00f      	beq.n	8006ab8 <TIM_Base_SetConfig+0x108>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a18      	ldr	r2, [pc, #96]	@ (8006afc <TIM_Base_SetConfig+0x14c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d00b      	beq.n	8006ab8 <TIM_Base_SetConfig+0x108>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a17      	ldr	r2, [pc, #92]	@ (8006b00 <TIM_Base_SetConfig+0x150>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d007      	beq.n	8006ab8 <TIM_Base_SetConfig+0x108>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a16      	ldr	r2, [pc, #88]	@ (8006b04 <TIM_Base_SetConfig+0x154>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d003      	beq.n	8006ab8 <TIM_Base_SetConfig+0x108>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a15      	ldr	r2, [pc, #84]	@ (8006b08 <TIM_Base_SetConfig+0x158>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d103      	bne.n	8006ac0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d105      	bne.n	8006ade <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f023 0201 	bic.w	r2, r3, #1
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	611a      	str	r2, [r3, #16]
  }
}
 8006ade:	bf00      	nop
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	40010000 	.word	0x40010000
 8006af0:	40000400 	.word	0x40000400
 8006af4:	40000800 	.word	0x40000800
 8006af8:	40000c00 	.word	0x40000c00
 8006afc:	40010400 	.word	0x40010400
 8006b00:	40014000 	.word	0x40014000
 8006b04:	40014400 	.word	0x40014400
 8006b08:	40014800 	.word	0x40014800
 8006b0c:	4000e000 	.word	0x4000e000
 8006b10:	4000e400 	.word	0x4000e400

08006b14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e042      	b.n	8006bac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d106      	bne.n	8006b3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7fa f8ff 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2224      	movs	r2, #36	@ 0x24
 8006b42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0201 	bic.w	r2, r2, #1
 8006b54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 ff22 	bl	80079a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f8b3 	bl	8006cd0 <UART_SetConfig>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d101      	bne.n	8006b74 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e01b      	b.n	8006bac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0201 	orr.w	r2, r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 ffa1 	bl	8007aec <UART_CheckIdleState>
 8006baa:	4603      	mov	r3, r0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08a      	sub	sp, #40	@ 0x28
 8006bb8:	af02      	add	r7, sp, #8
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bca:	2b20      	cmp	r3, #32
 8006bcc:	d17b      	bne.n	8006cc6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <HAL_UART_Transmit+0x26>
 8006bd4:	88fb      	ldrh	r3, [r7, #6]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e074      	b.n	8006cc8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2221      	movs	r2, #33	@ 0x21
 8006bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bee:	f7fa fab1 	bl	8001154 <HAL_GetTick>
 8006bf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	88fa      	ldrh	r2, [r7, #6]
 8006bf8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	88fa      	ldrh	r2, [r7, #6]
 8006c00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c0c:	d108      	bne.n	8006c20 <HAL_UART_Transmit+0x6c>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d104      	bne.n	8006c20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	61bb      	str	r3, [r7, #24]
 8006c1e:	e003      	b.n	8006c28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c24:	2300      	movs	r3, #0
 8006c26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c28:	e030      	b.n	8006c8c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2200      	movs	r2, #0
 8006c32:	2180      	movs	r1, #128	@ 0x80
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f001 f803 	bl	8007c40 <UART_WaitOnFlagUntilTimeout>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d005      	beq.n	8006c4c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e03d      	b.n	8006cc8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10b      	bne.n	8006c6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	3302      	adds	r3, #2
 8006c66:	61bb      	str	r3, [r7, #24]
 8006c68:	e007      	b.n	8006c7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	781a      	ldrb	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	3301      	adds	r3, #1
 8006c78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1c8      	bne.n	8006c2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	2140      	movs	r1, #64	@ 0x40
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 ffcc 	bl	8007c40 <UART_WaitOnFlagUntilTimeout>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d005      	beq.n	8006cba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e006      	b.n	8006cc8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	e000      	b.n	8006cc8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006cc6:	2302      	movs	r3, #2
  }
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3720      	adds	r7, #32
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cd4:	b092      	sub	sp, #72	@ 0x48
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4bbe      	ldr	r3, [pc, #760]	@ (8006ff8 <UART_SetConfig+0x328>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	6812      	ldr	r2, [r2, #0]
 8006d06:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4ab3      	ldr	r2, [pc, #716]	@ (8006ffc <UART_SetConfig+0x32c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d004      	beq.n	8006d3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	4baf      	ldr	r3, [pc, #700]	@ (8007000 <UART_SetConfig+0x330>)
 8006d44:	4013      	ands	r3, r2
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	6812      	ldr	r2, [r2, #0]
 8006d4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d4c:	430b      	orrs	r3, r1
 8006d4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d56:	f023 010f 	bic.w	r1, r3, #15
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4aa6      	ldr	r2, [pc, #664]	@ (8007004 <UART_SetConfig+0x334>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d177      	bne.n	8006e60 <UART_SetConfig+0x190>
 8006d70:	4ba5      	ldr	r3, [pc, #660]	@ (8007008 <UART_SetConfig+0x338>)
 8006d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d78:	2b28      	cmp	r3, #40	@ 0x28
 8006d7a:	d86d      	bhi.n	8006e58 <UART_SetConfig+0x188>
 8006d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d84 <UART_SetConfig+0xb4>)
 8006d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d82:	bf00      	nop
 8006d84:	08006e29 	.word	0x08006e29
 8006d88:	08006e59 	.word	0x08006e59
 8006d8c:	08006e59 	.word	0x08006e59
 8006d90:	08006e59 	.word	0x08006e59
 8006d94:	08006e59 	.word	0x08006e59
 8006d98:	08006e59 	.word	0x08006e59
 8006d9c:	08006e59 	.word	0x08006e59
 8006da0:	08006e59 	.word	0x08006e59
 8006da4:	08006e31 	.word	0x08006e31
 8006da8:	08006e59 	.word	0x08006e59
 8006dac:	08006e59 	.word	0x08006e59
 8006db0:	08006e59 	.word	0x08006e59
 8006db4:	08006e59 	.word	0x08006e59
 8006db8:	08006e59 	.word	0x08006e59
 8006dbc:	08006e59 	.word	0x08006e59
 8006dc0:	08006e59 	.word	0x08006e59
 8006dc4:	08006e39 	.word	0x08006e39
 8006dc8:	08006e59 	.word	0x08006e59
 8006dcc:	08006e59 	.word	0x08006e59
 8006dd0:	08006e59 	.word	0x08006e59
 8006dd4:	08006e59 	.word	0x08006e59
 8006dd8:	08006e59 	.word	0x08006e59
 8006ddc:	08006e59 	.word	0x08006e59
 8006de0:	08006e59 	.word	0x08006e59
 8006de4:	08006e41 	.word	0x08006e41
 8006de8:	08006e59 	.word	0x08006e59
 8006dec:	08006e59 	.word	0x08006e59
 8006df0:	08006e59 	.word	0x08006e59
 8006df4:	08006e59 	.word	0x08006e59
 8006df8:	08006e59 	.word	0x08006e59
 8006dfc:	08006e59 	.word	0x08006e59
 8006e00:	08006e59 	.word	0x08006e59
 8006e04:	08006e49 	.word	0x08006e49
 8006e08:	08006e59 	.word	0x08006e59
 8006e0c:	08006e59 	.word	0x08006e59
 8006e10:	08006e59 	.word	0x08006e59
 8006e14:	08006e59 	.word	0x08006e59
 8006e18:	08006e59 	.word	0x08006e59
 8006e1c:	08006e59 	.word	0x08006e59
 8006e20:	08006e59 	.word	0x08006e59
 8006e24:	08006e51 	.word	0x08006e51
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e2e:	e326      	b.n	800747e <UART_SetConfig+0x7ae>
 8006e30:	2304      	movs	r3, #4
 8006e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e36:	e322      	b.n	800747e <UART_SetConfig+0x7ae>
 8006e38:	2308      	movs	r3, #8
 8006e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e3e:	e31e      	b.n	800747e <UART_SetConfig+0x7ae>
 8006e40:	2310      	movs	r3, #16
 8006e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e46:	e31a      	b.n	800747e <UART_SetConfig+0x7ae>
 8006e48:	2320      	movs	r3, #32
 8006e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e4e:	e316      	b.n	800747e <UART_SetConfig+0x7ae>
 8006e50:	2340      	movs	r3, #64	@ 0x40
 8006e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e56:	e312      	b.n	800747e <UART_SetConfig+0x7ae>
 8006e58:	2380      	movs	r3, #128	@ 0x80
 8006e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e5e:	e30e      	b.n	800747e <UART_SetConfig+0x7ae>
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a69      	ldr	r2, [pc, #420]	@ (800700c <UART_SetConfig+0x33c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d130      	bne.n	8006ecc <UART_SetConfig+0x1fc>
 8006e6a:	4b67      	ldr	r3, [pc, #412]	@ (8007008 <UART_SetConfig+0x338>)
 8006e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e6e:	f003 0307 	and.w	r3, r3, #7
 8006e72:	2b05      	cmp	r3, #5
 8006e74:	d826      	bhi.n	8006ec4 <UART_SetConfig+0x1f4>
 8006e76:	a201      	add	r2, pc, #4	@ (adr r2, 8006e7c <UART_SetConfig+0x1ac>)
 8006e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7c:	08006e95 	.word	0x08006e95
 8006e80:	08006e9d 	.word	0x08006e9d
 8006e84:	08006ea5 	.word	0x08006ea5
 8006e88:	08006ead 	.word	0x08006ead
 8006e8c:	08006eb5 	.word	0x08006eb5
 8006e90:	08006ebd 	.word	0x08006ebd
 8006e94:	2300      	movs	r3, #0
 8006e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e9a:	e2f0      	b.n	800747e <UART_SetConfig+0x7ae>
 8006e9c:	2304      	movs	r3, #4
 8006e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ea2:	e2ec      	b.n	800747e <UART_SetConfig+0x7ae>
 8006ea4:	2308      	movs	r3, #8
 8006ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eaa:	e2e8      	b.n	800747e <UART_SetConfig+0x7ae>
 8006eac:	2310      	movs	r3, #16
 8006eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eb2:	e2e4      	b.n	800747e <UART_SetConfig+0x7ae>
 8006eb4:	2320      	movs	r3, #32
 8006eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eba:	e2e0      	b.n	800747e <UART_SetConfig+0x7ae>
 8006ebc:	2340      	movs	r3, #64	@ 0x40
 8006ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ec2:	e2dc      	b.n	800747e <UART_SetConfig+0x7ae>
 8006ec4:	2380      	movs	r3, #128	@ 0x80
 8006ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eca:	e2d8      	b.n	800747e <UART_SetConfig+0x7ae>
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a4f      	ldr	r2, [pc, #316]	@ (8007010 <UART_SetConfig+0x340>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d130      	bne.n	8006f38 <UART_SetConfig+0x268>
 8006ed6:	4b4c      	ldr	r3, [pc, #304]	@ (8007008 <UART_SetConfig+0x338>)
 8006ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eda:	f003 0307 	and.w	r3, r3, #7
 8006ede:	2b05      	cmp	r3, #5
 8006ee0:	d826      	bhi.n	8006f30 <UART_SetConfig+0x260>
 8006ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee8 <UART_SetConfig+0x218>)
 8006ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee8:	08006f01 	.word	0x08006f01
 8006eec:	08006f09 	.word	0x08006f09
 8006ef0:	08006f11 	.word	0x08006f11
 8006ef4:	08006f19 	.word	0x08006f19
 8006ef8:	08006f21 	.word	0x08006f21
 8006efc:	08006f29 	.word	0x08006f29
 8006f00:	2300      	movs	r3, #0
 8006f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f06:	e2ba      	b.n	800747e <UART_SetConfig+0x7ae>
 8006f08:	2304      	movs	r3, #4
 8006f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f0e:	e2b6      	b.n	800747e <UART_SetConfig+0x7ae>
 8006f10:	2308      	movs	r3, #8
 8006f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f16:	e2b2      	b.n	800747e <UART_SetConfig+0x7ae>
 8006f18:	2310      	movs	r3, #16
 8006f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f1e:	e2ae      	b.n	800747e <UART_SetConfig+0x7ae>
 8006f20:	2320      	movs	r3, #32
 8006f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f26:	e2aa      	b.n	800747e <UART_SetConfig+0x7ae>
 8006f28:	2340      	movs	r3, #64	@ 0x40
 8006f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2e:	e2a6      	b.n	800747e <UART_SetConfig+0x7ae>
 8006f30:	2380      	movs	r3, #128	@ 0x80
 8006f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f36:	e2a2      	b.n	800747e <UART_SetConfig+0x7ae>
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a35      	ldr	r2, [pc, #212]	@ (8007014 <UART_SetConfig+0x344>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d130      	bne.n	8006fa4 <UART_SetConfig+0x2d4>
 8006f42:	4b31      	ldr	r3, [pc, #196]	@ (8007008 <UART_SetConfig+0x338>)
 8006f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	2b05      	cmp	r3, #5
 8006f4c:	d826      	bhi.n	8006f9c <UART_SetConfig+0x2cc>
 8006f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f54 <UART_SetConfig+0x284>)
 8006f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f54:	08006f6d 	.word	0x08006f6d
 8006f58:	08006f75 	.word	0x08006f75
 8006f5c:	08006f7d 	.word	0x08006f7d
 8006f60:	08006f85 	.word	0x08006f85
 8006f64:	08006f8d 	.word	0x08006f8d
 8006f68:	08006f95 	.word	0x08006f95
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f72:	e284      	b.n	800747e <UART_SetConfig+0x7ae>
 8006f74:	2304      	movs	r3, #4
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f7a:	e280      	b.n	800747e <UART_SetConfig+0x7ae>
 8006f7c:	2308      	movs	r3, #8
 8006f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f82:	e27c      	b.n	800747e <UART_SetConfig+0x7ae>
 8006f84:	2310      	movs	r3, #16
 8006f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f8a:	e278      	b.n	800747e <UART_SetConfig+0x7ae>
 8006f8c:	2320      	movs	r3, #32
 8006f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f92:	e274      	b.n	800747e <UART_SetConfig+0x7ae>
 8006f94:	2340      	movs	r3, #64	@ 0x40
 8006f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f9a:	e270      	b.n	800747e <UART_SetConfig+0x7ae>
 8006f9c:	2380      	movs	r3, #128	@ 0x80
 8006f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fa2:	e26c      	b.n	800747e <UART_SetConfig+0x7ae>
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8007018 <UART_SetConfig+0x348>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d142      	bne.n	8007034 <UART_SetConfig+0x364>
 8006fae:	4b16      	ldr	r3, [pc, #88]	@ (8007008 <UART_SetConfig+0x338>)
 8006fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb2:	f003 0307 	and.w	r3, r3, #7
 8006fb6:	2b05      	cmp	r3, #5
 8006fb8:	d838      	bhi.n	800702c <UART_SetConfig+0x35c>
 8006fba:	a201      	add	r2, pc, #4	@ (adr r2, 8006fc0 <UART_SetConfig+0x2f0>)
 8006fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc0:	08006fd9 	.word	0x08006fd9
 8006fc4:	08006fe1 	.word	0x08006fe1
 8006fc8:	08006fe9 	.word	0x08006fe9
 8006fcc:	08006ff1 	.word	0x08006ff1
 8006fd0:	0800701d 	.word	0x0800701d
 8006fd4:	08007025 	.word	0x08007025
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fde:	e24e      	b.n	800747e <UART_SetConfig+0x7ae>
 8006fe0:	2304      	movs	r3, #4
 8006fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fe6:	e24a      	b.n	800747e <UART_SetConfig+0x7ae>
 8006fe8:	2308      	movs	r3, #8
 8006fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fee:	e246      	b.n	800747e <UART_SetConfig+0x7ae>
 8006ff0:	2310      	movs	r3, #16
 8006ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ff6:	e242      	b.n	800747e <UART_SetConfig+0x7ae>
 8006ff8:	cfff69f3 	.word	0xcfff69f3
 8006ffc:	58000c00 	.word	0x58000c00
 8007000:	11fff4ff 	.word	0x11fff4ff
 8007004:	40011000 	.word	0x40011000
 8007008:	58024400 	.word	0x58024400
 800700c:	40004400 	.word	0x40004400
 8007010:	40004800 	.word	0x40004800
 8007014:	40004c00 	.word	0x40004c00
 8007018:	40005000 	.word	0x40005000
 800701c:	2320      	movs	r3, #32
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007022:	e22c      	b.n	800747e <UART_SetConfig+0x7ae>
 8007024:	2340      	movs	r3, #64	@ 0x40
 8007026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800702a:	e228      	b.n	800747e <UART_SetConfig+0x7ae>
 800702c:	2380      	movs	r3, #128	@ 0x80
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007032:	e224      	b.n	800747e <UART_SetConfig+0x7ae>
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4ab1      	ldr	r2, [pc, #708]	@ (8007300 <UART_SetConfig+0x630>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d176      	bne.n	800712c <UART_SetConfig+0x45c>
 800703e:	4bb1      	ldr	r3, [pc, #708]	@ (8007304 <UART_SetConfig+0x634>)
 8007040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007042:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007046:	2b28      	cmp	r3, #40	@ 0x28
 8007048:	d86c      	bhi.n	8007124 <UART_SetConfig+0x454>
 800704a:	a201      	add	r2, pc, #4	@ (adr r2, 8007050 <UART_SetConfig+0x380>)
 800704c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007050:	080070f5 	.word	0x080070f5
 8007054:	08007125 	.word	0x08007125
 8007058:	08007125 	.word	0x08007125
 800705c:	08007125 	.word	0x08007125
 8007060:	08007125 	.word	0x08007125
 8007064:	08007125 	.word	0x08007125
 8007068:	08007125 	.word	0x08007125
 800706c:	08007125 	.word	0x08007125
 8007070:	080070fd 	.word	0x080070fd
 8007074:	08007125 	.word	0x08007125
 8007078:	08007125 	.word	0x08007125
 800707c:	08007125 	.word	0x08007125
 8007080:	08007125 	.word	0x08007125
 8007084:	08007125 	.word	0x08007125
 8007088:	08007125 	.word	0x08007125
 800708c:	08007125 	.word	0x08007125
 8007090:	08007105 	.word	0x08007105
 8007094:	08007125 	.word	0x08007125
 8007098:	08007125 	.word	0x08007125
 800709c:	08007125 	.word	0x08007125
 80070a0:	08007125 	.word	0x08007125
 80070a4:	08007125 	.word	0x08007125
 80070a8:	08007125 	.word	0x08007125
 80070ac:	08007125 	.word	0x08007125
 80070b0:	0800710d 	.word	0x0800710d
 80070b4:	08007125 	.word	0x08007125
 80070b8:	08007125 	.word	0x08007125
 80070bc:	08007125 	.word	0x08007125
 80070c0:	08007125 	.word	0x08007125
 80070c4:	08007125 	.word	0x08007125
 80070c8:	08007125 	.word	0x08007125
 80070cc:	08007125 	.word	0x08007125
 80070d0:	08007115 	.word	0x08007115
 80070d4:	08007125 	.word	0x08007125
 80070d8:	08007125 	.word	0x08007125
 80070dc:	08007125 	.word	0x08007125
 80070e0:	08007125 	.word	0x08007125
 80070e4:	08007125 	.word	0x08007125
 80070e8:	08007125 	.word	0x08007125
 80070ec:	08007125 	.word	0x08007125
 80070f0:	0800711d 	.word	0x0800711d
 80070f4:	2301      	movs	r3, #1
 80070f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070fa:	e1c0      	b.n	800747e <UART_SetConfig+0x7ae>
 80070fc:	2304      	movs	r3, #4
 80070fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007102:	e1bc      	b.n	800747e <UART_SetConfig+0x7ae>
 8007104:	2308      	movs	r3, #8
 8007106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800710a:	e1b8      	b.n	800747e <UART_SetConfig+0x7ae>
 800710c:	2310      	movs	r3, #16
 800710e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007112:	e1b4      	b.n	800747e <UART_SetConfig+0x7ae>
 8007114:	2320      	movs	r3, #32
 8007116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800711a:	e1b0      	b.n	800747e <UART_SetConfig+0x7ae>
 800711c:	2340      	movs	r3, #64	@ 0x40
 800711e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007122:	e1ac      	b.n	800747e <UART_SetConfig+0x7ae>
 8007124:	2380      	movs	r3, #128	@ 0x80
 8007126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800712a:	e1a8      	b.n	800747e <UART_SetConfig+0x7ae>
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a75      	ldr	r2, [pc, #468]	@ (8007308 <UART_SetConfig+0x638>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d130      	bne.n	8007198 <UART_SetConfig+0x4c8>
 8007136:	4b73      	ldr	r3, [pc, #460]	@ (8007304 <UART_SetConfig+0x634>)
 8007138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800713a:	f003 0307 	and.w	r3, r3, #7
 800713e:	2b05      	cmp	r3, #5
 8007140:	d826      	bhi.n	8007190 <UART_SetConfig+0x4c0>
 8007142:	a201      	add	r2, pc, #4	@ (adr r2, 8007148 <UART_SetConfig+0x478>)
 8007144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007148:	08007161 	.word	0x08007161
 800714c:	08007169 	.word	0x08007169
 8007150:	08007171 	.word	0x08007171
 8007154:	08007179 	.word	0x08007179
 8007158:	08007181 	.word	0x08007181
 800715c:	08007189 	.word	0x08007189
 8007160:	2300      	movs	r3, #0
 8007162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007166:	e18a      	b.n	800747e <UART_SetConfig+0x7ae>
 8007168:	2304      	movs	r3, #4
 800716a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800716e:	e186      	b.n	800747e <UART_SetConfig+0x7ae>
 8007170:	2308      	movs	r3, #8
 8007172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007176:	e182      	b.n	800747e <UART_SetConfig+0x7ae>
 8007178:	2310      	movs	r3, #16
 800717a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800717e:	e17e      	b.n	800747e <UART_SetConfig+0x7ae>
 8007180:	2320      	movs	r3, #32
 8007182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007186:	e17a      	b.n	800747e <UART_SetConfig+0x7ae>
 8007188:	2340      	movs	r3, #64	@ 0x40
 800718a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800718e:	e176      	b.n	800747e <UART_SetConfig+0x7ae>
 8007190:	2380      	movs	r3, #128	@ 0x80
 8007192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007196:	e172      	b.n	800747e <UART_SetConfig+0x7ae>
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a5b      	ldr	r2, [pc, #364]	@ (800730c <UART_SetConfig+0x63c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d130      	bne.n	8007204 <UART_SetConfig+0x534>
 80071a2:	4b58      	ldr	r3, [pc, #352]	@ (8007304 <UART_SetConfig+0x634>)
 80071a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	2b05      	cmp	r3, #5
 80071ac:	d826      	bhi.n	80071fc <UART_SetConfig+0x52c>
 80071ae:	a201      	add	r2, pc, #4	@ (adr r2, 80071b4 <UART_SetConfig+0x4e4>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	080071cd 	.word	0x080071cd
 80071b8:	080071d5 	.word	0x080071d5
 80071bc:	080071dd 	.word	0x080071dd
 80071c0:	080071e5 	.word	0x080071e5
 80071c4:	080071ed 	.word	0x080071ed
 80071c8:	080071f5 	.word	0x080071f5
 80071cc:	2300      	movs	r3, #0
 80071ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071d2:	e154      	b.n	800747e <UART_SetConfig+0x7ae>
 80071d4:	2304      	movs	r3, #4
 80071d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071da:	e150      	b.n	800747e <UART_SetConfig+0x7ae>
 80071dc:	2308      	movs	r3, #8
 80071de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071e2:	e14c      	b.n	800747e <UART_SetConfig+0x7ae>
 80071e4:	2310      	movs	r3, #16
 80071e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ea:	e148      	b.n	800747e <UART_SetConfig+0x7ae>
 80071ec:	2320      	movs	r3, #32
 80071ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071f2:	e144      	b.n	800747e <UART_SetConfig+0x7ae>
 80071f4:	2340      	movs	r3, #64	@ 0x40
 80071f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071fa:	e140      	b.n	800747e <UART_SetConfig+0x7ae>
 80071fc:	2380      	movs	r3, #128	@ 0x80
 80071fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007202:	e13c      	b.n	800747e <UART_SetConfig+0x7ae>
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a41      	ldr	r2, [pc, #260]	@ (8007310 <UART_SetConfig+0x640>)
 800720a:	4293      	cmp	r3, r2
 800720c:	f040 8082 	bne.w	8007314 <UART_SetConfig+0x644>
 8007210:	4b3c      	ldr	r3, [pc, #240]	@ (8007304 <UART_SetConfig+0x634>)
 8007212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007214:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007218:	2b28      	cmp	r3, #40	@ 0x28
 800721a:	d86d      	bhi.n	80072f8 <UART_SetConfig+0x628>
 800721c:	a201      	add	r2, pc, #4	@ (adr r2, 8007224 <UART_SetConfig+0x554>)
 800721e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007222:	bf00      	nop
 8007224:	080072c9 	.word	0x080072c9
 8007228:	080072f9 	.word	0x080072f9
 800722c:	080072f9 	.word	0x080072f9
 8007230:	080072f9 	.word	0x080072f9
 8007234:	080072f9 	.word	0x080072f9
 8007238:	080072f9 	.word	0x080072f9
 800723c:	080072f9 	.word	0x080072f9
 8007240:	080072f9 	.word	0x080072f9
 8007244:	080072d1 	.word	0x080072d1
 8007248:	080072f9 	.word	0x080072f9
 800724c:	080072f9 	.word	0x080072f9
 8007250:	080072f9 	.word	0x080072f9
 8007254:	080072f9 	.word	0x080072f9
 8007258:	080072f9 	.word	0x080072f9
 800725c:	080072f9 	.word	0x080072f9
 8007260:	080072f9 	.word	0x080072f9
 8007264:	080072d9 	.word	0x080072d9
 8007268:	080072f9 	.word	0x080072f9
 800726c:	080072f9 	.word	0x080072f9
 8007270:	080072f9 	.word	0x080072f9
 8007274:	080072f9 	.word	0x080072f9
 8007278:	080072f9 	.word	0x080072f9
 800727c:	080072f9 	.word	0x080072f9
 8007280:	080072f9 	.word	0x080072f9
 8007284:	080072e1 	.word	0x080072e1
 8007288:	080072f9 	.word	0x080072f9
 800728c:	080072f9 	.word	0x080072f9
 8007290:	080072f9 	.word	0x080072f9
 8007294:	080072f9 	.word	0x080072f9
 8007298:	080072f9 	.word	0x080072f9
 800729c:	080072f9 	.word	0x080072f9
 80072a0:	080072f9 	.word	0x080072f9
 80072a4:	080072e9 	.word	0x080072e9
 80072a8:	080072f9 	.word	0x080072f9
 80072ac:	080072f9 	.word	0x080072f9
 80072b0:	080072f9 	.word	0x080072f9
 80072b4:	080072f9 	.word	0x080072f9
 80072b8:	080072f9 	.word	0x080072f9
 80072bc:	080072f9 	.word	0x080072f9
 80072c0:	080072f9 	.word	0x080072f9
 80072c4:	080072f1 	.word	0x080072f1
 80072c8:	2301      	movs	r3, #1
 80072ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ce:	e0d6      	b.n	800747e <UART_SetConfig+0x7ae>
 80072d0:	2304      	movs	r3, #4
 80072d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072d6:	e0d2      	b.n	800747e <UART_SetConfig+0x7ae>
 80072d8:	2308      	movs	r3, #8
 80072da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072de:	e0ce      	b.n	800747e <UART_SetConfig+0x7ae>
 80072e0:	2310      	movs	r3, #16
 80072e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072e6:	e0ca      	b.n	800747e <UART_SetConfig+0x7ae>
 80072e8:	2320      	movs	r3, #32
 80072ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ee:	e0c6      	b.n	800747e <UART_SetConfig+0x7ae>
 80072f0:	2340      	movs	r3, #64	@ 0x40
 80072f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072f6:	e0c2      	b.n	800747e <UART_SetConfig+0x7ae>
 80072f8:	2380      	movs	r3, #128	@ 0x80
 80072fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072fe:	e0be      	b.n	800747e <UART_SetConfig+0x7ae>
 8007300:	40011400 	.word	0x40011400
 8007304:	58024400 	.word	0x58024400
 8007308:	40007800 	.word	0x40007800
 800730c:	40007c00 	.word	0x40007c00
 8007310:	40011800 	.word	0x40011800
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4aad      	ldr	r2, [pc, #692]	@ (80075d0 <UART_SetConfig+0x900>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d176      	bne.n	800740c <UART_SetConfig+0x73c>
 800731e:	4bad      	ldr	r3, [pc, #692]	@ (80075d4 <UART_SetConfig+0x904>)
 8007320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007322:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007326:	2b28      	cmp	r3, #40	@ 0x28
 8007328:	d86c      	bhi.n	8007404 <UART_SetConfig+0x734>
 800732a:	a201      	add	r2, pc, #4	@ (adr r2, 8007330 <UART_SetConfig+0x660>)
 800732c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007330:	080073d5 	.word	0x080073d5
 8007334:	08007405 	.word	0x08007405
 8007338:	08007405 	.word	0x08007405
 800733c:	08007405 	.word	0x08007405
 8007340:	08007405 	.word	0x08007405
 8007344:	08007405 	.word	0x08007405
 8007348:	08007405 	.word	0x08007405
 800734c:	08007405 	.word	0x08007405
 8007350:	080073dd 	.word	0x080073dd
 8007354:	08007405 	.word	0x08007405
 8007358:	08007405 	.word	0x08007405
 800735c:	08007405 	.word	0x08007405
 8007360:	08007405 	.word	0x08007405
 8007364:	08007405 	.word	0x08007405
 8007368:	08007405 	.word	0x08007405
 800736c:	08007405 	.word	0x08007405
 8007370:	080073e5 	.word	0x080073e5
 8007374:	08007405 	.word	0x08007405
 8007378:	08007405 	.word	0x08007405
 800737c:	08007405 	.word	0x08007405
 8007380:	08007405 	.word	0x08007405
 8007384:	08007405 	.word	0x08007405
 8007388:	08007405 	.word	0x08007405
 800738c:	08007405 	.word	0x08007405
 8007390:	080073ed 	.word	0x080073ed
 8007394:	08007405 	.word	0x08007405
 8007398:	08007405 	.word	0x08007405
 800739c:	08007405 	.word	0x08007405
 80073a0:	08007405 	.word	0x08007405
 80073a4:	08007405 	.word	0x08007405
 80073a8:	08007405 	.word	0x08007405
 80073ac:	08007405 	.word	0x08007405
 80073b0:	080073f5 	.word	0x080073f5
 80073b4:	08007405 	.word	0x08007405
 80073b8:	08007405 	.word	0x08007405
 80073bc:	08007405 	.word	0x08007405
 80073c0:	08007405 	.word	0x08007405
 80073c4:	08007405 	.word	0x08007405
 80073c8:	08007405 	.word	0x08007405
 80073cc:	08007405 	.word	0x08007405
 80073d0:	080073fd 	.word	0x080073fd
 80073d4:	2301      	movs	r3, #1
 80073d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073da:	e050      	b.n	800747e <UART_SetConfig+0x7ae>
 80073dc:	2304      	movs	r3, #4
 80073de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073e2:	e04c      	b.n	800747e <UART_SetConfig+0x7ae>
 80073e4:	2308      	movs	r3, #8
 80073e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ea:	e048      	b.n	800747e <UART_SetConfig+0x7ae>
 80073ec:	2310      	movs	r3, #16
 80073ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073f2:	e044      	b.n	800747e <UART_SetConfig+0x7ae>
 80073f4:	2320      	movs	r3, #32
 80073f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073fa:	e040      	b.n	800747e <UART_SetConfig+0x7ae>
 80073fc:	2340      	movs	r3, #64	@ 0x40
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007402:	e03c      	b.n	800747e <UART_SetConfig+0x7ae>
 8007404:	2380      	movs	r3, #128	@ 0x80
 8007406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800740a:	e038      	b.n	800747e <UART_SetConfig+0x7ae>
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a71      	ldr	r2, [pc, #452]	@ (80075d8 <UART_SetConfig+0x908>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d130      	bne.n	8007478 <UART_SetConfig+0x7a8>
 8007416:	4b6f      	ldr	r3, [pc, #444]	@ (80075d4 <UART_SetConfig+0x904>)
 8007418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800741a:	f003 0307 	and.w	r3, r3, #7
 800741e:	2b05      	cmp	r3, #5
 8007420:	d826      	bhi.n	8007470 <UART_SetConfig+0x7a0>
 8007422:	a201      	add	r2, pc, #4	@ (adr r2, 8007428 <UART_SetConfig+0x758>)
 8007424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007428:	08007441 	.word	0x08007441
 800742c:	08007449 	.word	0x08007449
 8007430:	08007451 	.word	0x08007451
 8007434:	08007459 	.word	0x08007459
 8007438:	08007461 	.word	0x08007461
 800743c:	08007469 	.word	0x08007469
 8007440:	2302      	movs	r3, #2
 8007442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007446:	e01a      	b.n	800747e <UART_SetConfig+0x7ae>
 8007448:	2304      	movs	r3, #4
 800744a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800744e:	e016      	b.n	800747e <UART_SetConfig+0x7ae>
 8007450:	2308      	movs	r3, #8
 8007452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007456:	e012      	b.n	800747e <UART_SetConfig+0x7ae>
 8007458:	2310      	movs	r3, #16
 800745a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800745e:	e00e      	b.n	800747e <UART_SetConfig+0x7ae>
 8007460:	2320      	movs	r3, #32
 8007462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007466:	e00a      	b.n	800747e <UART_SetConfig+0x7ae>
 8007468:	2340      	movs	r3, #64	@ 0x40
 800746a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800746e:	e006      	b.n	800747e <UART_SetConfig+0x7ae>
 8007470:	2380      	movs	r3, #128	@ 0x80
 8007472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007476:	e002      	b.n	800747e <UART_SetConfig+0x7ae>
 8007478:	2380      	movs	r3, #128	@ 0x80
 800747a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a55      	ldr	r2, [pc, #340]	@ (80075d8 <UART_SetConfig+0x908>)
 8007484:	4293      	cmp	r3, r2
 8007486:	f040 80f8 	bne.w	800767a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800748a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800748e:	2b20      	cmp	r3, #32
 8007490:	dc46      	bgt.n	8007520 <UART_SetConfig+0x850>
 8007492:	2b02      	cmp	r3, #2
 8007494:	db75      	blt.n	8007582 <UART_SetConfig+0x8b2>
 8007496:	3b02      	subs	r3, #2
 8007498:	2b1e      	cmp	r3, #30
 800749a:	d872      	bhi.n	8007582 <UART_SetConfig+0x8b2>
 800749c:	a201      	add	r2, pc, #4	@ (adr r2, 80074a4 <UART_SetConfig+0x7d4>)
 800749e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a2:	bf00      	nop
 80074a4:	08007527 	.word	0x08007527
 80074a8:	08007583 	.word	0x08007583
 80074ac:	0800752f 	.word	0x0800752f
 80074b0:	08007583 	.word	0x08007583
 80074b4:	08007583 	.word	0x08007583
 80074b8:	08007583 	.word	0x08007583
 80074bc:	0800753f 	.word	0x0800753f
 80074c0:	08007583 	.word	0x08007583
 80074c4:	08007583 	.word	0x08007583
 80074c8:	08007583 	.word	0x08007583
 80074cc:	08007583 	.word	0x08007583
 80074d0:	08007583 	.word	0x08007583
 80074d4:	08007583 	.word	0x08007583
 80074d8:	08007583 	.word	0x08007583
 80074dc:	0800754f 	.word	0x0800754f
 80074e0:	08007583 	.word	0x08007583
 80074e4:	08007583 	.word	0x08007583
 80074e8:	08007583 	.word	0x08007583
 80074ec:	08007583 	.word	0x08007583
 80074f0:	08007583 	.word	0x08007583
 80074f4:	08007583 	.word	0x08007583
 80074f8:	08007583 	.word	0x08007583
 80074fc:	08007583 	.word	0x08007583
 8007500:	08007583 	.word	0x08007583
 8007504:	08007583 	.word	0x08007583
 8007508:	08007583 	.word	0x08007583
 800750c:	08007583 	.word	0x08007583
 8007510:	08007583 	.word	0x08007583
 8007514:	08007583 	.word	0x08007583
 8007518:	08007583 	.word	0x08007583
 800751c:	08007575 	.word	0x08007575
 8007520:	2b40      	cmp	r3, #64	@ 0x40
 8007522:	d02a      	beq.n	800757a <UART_SetConfig+0x8aa>
 8007524:	e02d      	b.n	8007582 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007526:	f7fe fd4b 	bl	8005fc0 <HAL_RCCEx_GetD3PCLK1Freq>
 800752a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800752c:	e02f      	b.n	800758e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800752e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe fd5a 	bl	8005fec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800753c:	e027      	b.n	800758e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800753e:	f107 0318 	add.w	r3, r7, #24
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe fea6 	bl	8006294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800754c:	e01f      	b.n	800758e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800754e:	4b21      	ldr	r3, [pc, #132]	@ (80075d4 <UART_SetConfig+0x904>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0320 	and.w	r3, r3, #32
 8007556:	2b00      	cmp	r3, #0
 8007558:	d009      	beq.n	800756e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800755a:	4b1e      	ldr	r3, [pc, #120]	@ (80075d4 <UART_SetConfig+0x904>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	08db      	lsrs	r3, r3, #3
 8007560:	f003 0303 	and.w	r3, r3, #3
 8007564:	4a1d      	ldr	r2, [pc, #116]	@ (80075dc <UART_SetConfig+0x90c>)
 8007566:	fa22 f303 	lsr.w	r3, r2, r3
 800756a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800756c:	e00f      	b.n	800758e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800756e:	4b1b      	ldr	r3, [pc, #108]	@ (80075dc <UART_SetConfig+0x90c>)
 8007570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007572:	e00c      	b.n	800758e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007574:	4b1a      	ldr	r3, [pc, #104]	@ (80075e0 <UART_SetConfig+0x910>)
 8007576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007578:	e009      	b.n	800758e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800757a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800757e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007580:	e005      	b.n	800758e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800758c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800758e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 81ee 	beq.w	8007972 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759a:	4a12      	ldr	r2, [pc, #72]	@ (80075e4 <UART_SetConfig+0x914>)
 800759c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075a0:	461a      	mov	r2, r3
 80075a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80075a8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	4613      	mov	r3, r2
 80075b0:	005b      	lsls	r3, r3, #1
 80075b2:	4413      	add	r3, r2
 80075b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d305      	bcc.n	80075c6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d910      	bls.n	80075e8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80075cc:	e1d1      	b.n	8007972 <UART_SetConfig+0xca2>
 80075ce:	bf00      	nop
 80075d0:	40011c00 	.word	0x40011c00
 80075d4:	58024400 	.word	0x58024400
 80075d8:	58000c00 	.word	0x58000c00
 80075dc:	03d09000 	.word	0x03d09000
 80075e0:	003d0900 	.word	0x003d0900
 80075e4:	0800877c 	.word	0x0800877c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ea:	2200      	movs	r2, #0
 80075ec:	60bb      	str	r3, [r7, #8]
 80075ee:	60fa      	str	r2, [r7, #12]
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f4:	4ac0      	ldr	r2, [pc, #768]	@ (80078f8 <UART_SetConfig+0xc28>)
 80075f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	2200      	movs	r2, #0
 80075fe:	603b      	str	r3, [r7, #0]
 8007600:	607a      	str	r2, [r7, #4]
 8007602:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007606:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800760a:	f7f8 fed9 	bl	80003c0 <__aeabi_uldivmod>
 800760e:	4602      	mov	r2, r0
 8007610:	460b      	mov	r3, r1
 8007612:	4610      	mov	r0, r2
 8007614:	4619      	mov	r1, r3
 8007616:	f04f 0200 	mov.w	r2, #0
 800761a:	f04f 0300 	mov.w	r3, #0
 800761e:	020b      	lsls	r3, r1, #8
 8007620:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007624:	0202      	lsls	r2, r0, #8
 8007626:	6979      	ldr	r1, [r7, #20]
 8007628:	6849      	ldr	r1, [r1, #4]
 800762a:	0849      	lsrs	r1, r1, #1
 800762c:	2000      	movs	r0, #0
 800762e:	460c      	mov	r4, r1
 8007630:	4605      	mov	r5, r0
 8007632:	eb12 0804 	adds.w	r8, r2, r4
 8007636:	eb43 0905 	adc.w	r9, r3, r5
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	469a      	mov	sl, r3
 8007642:	4693      	mov	fp, r2
 8007644:	4652      	mov	r2, sl
 8007646:	465b      	mov	r3, fp
 8007648:	4640      	mov	r0, r8
 800764a:	4649      	mov	r1, r9
 800764c:	f7f8 feb8 	bl	80003c0 <__aeabi_uldivmod>
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	4613      	mov	r3, r2
 8007656:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800765e:	d308      	bcc.n	8007672 <UART_SetConfig+0x9a2>
 8007660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007662:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007666:	d204      	bcs.n	8007672 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800766e:	60da      	str	r2, [r3, #12]
 8007670:	e17f      	b.n	8007972 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007678:	e17b      	b.n	8007972 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007682:	f040 80bd 	bne.w	8007800 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007686:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800768a:	2b20      	cmp	r3, #32
 800768c:	dc48      	bgt.n	8007720 <UART_SetConfig+0xa50>
 800768e:	2b00      	cmp	r3, #0
 8007690:	db7b      	blt.n	800778a <UART_SetConfig+0xaba>
 8007692:	2b20      	cmp	r3, #32
 8007694:	d879      	bhi.n	800778a <UART_SetConfig+0xaba>
 8007696:	a201      	add	r2, pc, #4	@ (adr r2, 800769c <UART_SetConfig+0x9cc>)
 8007698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769c:	08007727 	.word	0x08007727
 80076a0:	0800772f 	.word	0x0800772f
 80076a4:	0800778b 	.word	0x0800778b
 80076a8:	0800778b 	.word	0x0800778b
 80076ac:	08007737 	.word	0x08007737
 80076b0:	0800778b 	.word	0x0800778b
 80076b4:	0800778b 	.word	0x0800778b
 80076b8:	0800778b 	.word	0x0800778b
 80076bc:	08007747 	.word	0x08007747
 80076c0:	0800778b 	.word	0x0800778b
 80076c4:	0800778b 	.word	0x0800778b
 80076c8:	0800778b 	.word	0x0800778b
 80076cc:	0800778b 	.word	0x0800778b
 80076d0:	0800778b 	.word	0x0800778b
 80076d4:	0800778b 	.word	0x0800778b
 80076d8:	0800778b 	.word	0x0800778b
 80076dc:	08007757 	.word	0x08007757
 80076e0:	0800778b 	.word	0x0800778b
 80076e4:	0800778b 	.word	0x0800778b
 80076e8:	0800778b 	.word	0x0800778b
 80076ec:	0800778b 	.word	0x0800778b
 80076f0:	0800778b 	.word	0x0800778b
 80076f4:	0800778b 	.word	0x0800778b
 80076f8:	0800778b 	.word	0x0800778b
 80076fc:	0800778b 	.word	0x0800778b
 8007700:	0800778b 	.word	0x0800778b
 8007704:	0800778b 	.word	0x0800778b
 8007708:	0800778b 	.word	0x0800778b
 800770c:	0800778b 	.word	0x0800778b
 8007710:	0800778b 	.word	0x0800778b
 8007714:	0800778b 	.word	0x0800778b
 8007718:	0800778b 	.word	0x0800778b
 800771c:	0800777d 	.word	0x0800777d
 8007720:	2b40      	cmp	r3, #64	@ 0x40
 8007722:	d02e      	beq.n	8007782 <UART_SetConfig+0xab2>
 8007724:	e031      	b.n	800778a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007726:	f7fd fa7f 	bl	8004c28 <HAL_RCC_GetPCLK1Freq>
 800772a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800772c:	e033      	b.n	8007796 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800772e:	f7fd fa91 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 8007732:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007734:	e02f      	b.n	8007796 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800773a:	4618      	mov	r0, r3
 800773c:	f7fe fc56 	bl	8005fec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007744:	e027      	b.n	8007796 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007746:	f107 0318 	add.w	r3, r7, #24
 800774a:	4618      	mov	r0, r3
 800774c:	f7fe fda2 	bl	8006294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007754:	e01f      	b.n	8007796 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007756:	4b69      	ldr	r3, [pc, #420]	@ (80078fc <UART_SetConfig+0xc2c>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0320 	and.w	r3, r3, #32
 800775e:	2b00      	cmp	r3, #0
 8007760:	d009      	beq.n	8007776 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007762:	4b66      	ldr	r3, [pc, #408]	@ (80078fc <UART_SetConfig+0xc2c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	08db      	lsrs	r3, r3, #3
 8007768:	f003 0303 	and.w	r3, r3, #3
 800776c:	4a64      	ldr	r2, [pc, #400]	@ (8007900 <UART_SetConfig+0xc30>)
 800776e:	fa22 f303 	lsr.w	r3, r2, r3
 8007772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007774:	e00f      	b.n	8007796 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007776:	4b62      	ldr	r3, [pc, #392]	@ (8007900 <UART_SetConfig+0xc30>)
 8007778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800777a:	e00c      	b.n	8007796 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800777c:	4b61      	ldr	r3, [pc, #388]	@ (8007904 <UART_SetConfig+0xc34>)
 800777e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007780:	e009      	b.n	8007796 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007788:	e005      	b.n	8007796 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800778a:	2300      	movs	r3, #0
 800778c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007794:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 80ea 	beq.w	8007972 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a2:	4a55      	ldr	r2, [pc, #340]	@ (80078f8 <UART_SetConfig+0xc28>)
 80077a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077a8:	461a      	mov	r2, r3
 80077aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80077b0:	005a      	lsls	r2, r3, #1
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	085b      	lsrs	r3, r3, #1
 80077b8:	441a      	add	r2, r3
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c6:	2b0f      	cmp	r3, #15
 80077c8:	d916      	bls.n	80077f8 <UART_SetConfig+0xb28>
 80077ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077d0:	d212      	bcs.n	80077f8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	f023 030f 	bic.w	r3, r3, #15
 80077da:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077de:	085b      	lsrs	r3, r3, #1
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	f003 0307 	and.w	r3, r3, #7
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80077ea:	4313      	orrs	r3, r2
 80077ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80077f4:	60da      	str	r2, [r3, #12]
 80077f6:	e0bc      	b.n	8007972 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80077fe:	e0b8      	b.n	8007972 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007800:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007804:	2b20      	cmp	r3, #32
 8007806:	dc4b      	bgt.n	80078a0 <UART_SetConfig+0xbd0>
 8007808:	2b00      	cmp	r3, #0
 800780a:	f2c0 8087 	blt.w	800791c <UART_SetConfig+0xc4c>
 800780e:	2b20      	cmp	r3, #32
 8007810:	f200 8084 	bhi.w	800791c <UART_SetConfig+0xc4c>
 8007814:	a201      	add	r2, pc, #4	@ (adr r2, 800781c <UART_SetConfig+0xb4c>)
 8007816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781a:	bf00      	nop
 800781c:	080078a7 	.word	0x080078a7
 8007820:	080078af 	.word	0x080078af
 8007824:	0800791d 	.word	0x0800791d
 8007828:	0800791d 	.word	0x0800791d
 800782c:	080078b7 	.word	0x080078b7
 8007830:	0800791d 	.word	0x0800791d
 8007834:	0800791d 	.word	0x0800791d
 8007838:	0800791d 	.word	0x0800791d
 800783c:	080078c7 	.word	0x080078c7
 8007840:	0800791d 	.word	0x0800791d
 8007844:	0800791d 	.word	0x0800791d
 8007848:	0800791d 	.word	0x0800791d
 800784c:	0800791d 	.word	0x0800791d
 8007850:	0800791d 	.word	0x0800791d
 8007854:	0800791d 	.word	0x0800791d
 8007858:	0800791d 	.word	0x0800791d
 800785c:	080078d7 	.word	0x080078d7
 8007860:	0800791d 	.word	0x0800791d
 8007864:	0800791d 	.word	0x0800791d
 8007868:	0800791d 	.word	0x0800791d
 800786c:	0800791d 	.word	0x0800791d
 8007870:	0800791d 	.word	0x0800791d
 8007874:	0800791d 	.word	0x0800791d
 8007878:	0800791d 	.word	0x0800791d
 800787c:	0800791d 	.word	0x0800791d
 8007880:	0800791d 	.word	0x0800791d
 8007884:	0800791d 	.word	0x0800791d
 8007888:	0800791d 	.word	0x0800791d
 800788c:	0800791d 	.word	0x0800791d
 8007890:	0800791d 	.word	0x0800791d
 8007894:	0800791d 	.word	0x0800791d
 8007898:	0800791d 	.word	0x0800791d
 800789c:	0800790f 	.word	0x0800790f
 80078a0:	2b40      	cmp	r3, #64	@ 0x40
 80078a2:	d037      	beq.n	8007914 <UART_SetConfig+0xc44>
 80078a4:	e03a      	b.n	800791c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078a6:	f7fd f9bf 	bl	8004c28 <HAL_RCC_GetPCLK1Freq>
 80078aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80078ac:	e03c      	b.n	8007928 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078ae:	f7fd f9d1 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 80078b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80078b4:	e038      	b.n	8007928 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe fb96 	bl	8005fec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078c4:	e030      	b.n	8007928 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078c6:	f107 0318 	add.w	r3, r7, #24
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe fce2 	bl	8006294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078d4:	e028      	b.n	8007928 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078d6:	4b09      	ldr	r3, [pc, #36]	@ (80078fc <UART_SetConfig+0xc2c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0320 	and.w	r3, r3, #32
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d012      	beq.n	8007908 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80078e2:	4b06      	ldr	r3, [pc, #24]	@ (80078fc <UART_SetConfig+0xc2c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	08db      	lsrs	r3, r3, #3
 80078e8:	f003 0303 	and.w	r3, r3, #3
 80078ec:	4a04      	ldr	r2, [pc, #16]	@ (8007900 <UART_SetConfig+0xc30>)
 80078ee:	fa22 f303 	lsr.w	r3, r2, r3
 80078f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80078f4:	e018      	b.n	8007928 <UART_SetConfig+0xc58>
 80078f6:	bf00      	nop
 80078f8:	0800877c 	.word	0x0800877c
 80078fc:	58024400 	.word	0x58024400
 8007900:	03d09000 	.word	0x03d09000
 8007904:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007908:	4b24      	ldr	r3, [pc, #144]	@ (800799c <UART_SetConfig+0xccc>)
 800790a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800790c:	e00c      	b.n	8007928 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800790e:	4b24      	ldr	r3, [pc, #144]	@ (80079a0 <UART_SetConfig+0xcd0>)
 8007910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007912:	e009      	b.n	8007928 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007914:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800791a:	e005      	b.n	8007928 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800791c:	2300      	movs	r3, #0
 800791e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007926:	bf00      	nop
    }

    if (pclk != 0U)
 8007928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800792a:	2b00      	cmp	r3, #0
 800792c:	d021      	beq.n	8007972 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007932:	4a1c      	ldr	r2, [pc, #112]	@ (80079a4 <UART_SetConfig+0xcd4>)
 8007934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007938:	461a      	mov	r2, r3
 800793a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800793c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	085b      	lsrs	r3, r3, #1
 8007946:	441a      	add	r2, r3
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007950:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007954:	2b0f      	cmp	r3, #15
 8007956:	d909      	bls.n	800796c <UART_SetConfig+0xc9c>
 8007958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800795e:	d205      	bcs.n	800796c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007962:	b29a      	uxth	r2, r3
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	60da      	str	r2, [r3, #12]
 800796a:	e002      	b.n	8007972 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2201      	movs	r2, #1
 8007976:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2201      	movs	r2, #1
 800797e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2200      	movs	r2, #0
 8007986:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	2200      	movs	r2, #0
 800798c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800798e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007992:	4618      	mov	r0, r3
 8007994:	3748      	adds	r7, #72	@ 0x48
 8007996:	46bd      	mov	sp, r7
 8007998:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800799c:	03d09000 	.word	0x03d09000
 80079a0:	003d0900 	.word	0x003d0900
 80079a4:	0800877c 	.word	0x0800877c

080079a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b4:	f003 0308 	and.w	r3, r3, #8
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00a      	beq.n	80079d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	430a      	orrs	r2, r1
 80079d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00a      	beq.n	80079f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	430a      	orrs	r2, r1
 80079f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f8:	f003 0302 	and.w	r3, r3, #2
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00a      	beq.n	8007a16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a1a:	f003 0304 	and.w	r3, r3, #4
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	430a      	orrs	r2, r1
 8007a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3c:	f003 0310 	and.w	r3, r3, #16
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00a      	beq.n	8007a5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a5e:	f003 0320 	and.w	r3, r3, #32
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00a      	beq.n	8007a7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d01a      	beq.n	8007abe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007aa6:	d10a      	bne.n	8007abe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	430a      	orrs	r2, r1
 8007abc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00a      	beq.n	8007ae0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	605a      	str	r2, [r3, #4]
  }
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b098      	sub	sp, #96	@ 0x60
 8007af0:	af02      	add	r7, sp, #8
 8007af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007afc:	f7f9 fb2a 	bl	8001154 <HAL_GetTick>
 8007b00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0308 	and.w	r3, r3, #8
 8007b0c:	2b08      	cmp	r3, #8
 8007b0e:	d12f      	bne.n	8007b70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f88e 	bl	8007c40 <UART_WaitOnFlagUntilTimeout>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d022      	beq.n	8007b70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	461a      	mov	r2, r3
 8007b46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b4a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b50:	e841 2300 	strex	r3, r2, [r1]
 8007b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e6      	bne.n	8007b2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e063      	b.n	8007c38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0304 	and.w	r3, r3, #4
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d149      	bne.n	8007c12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b7e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b86:	2200      	movs	r2, #0
 8007b88:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f857 	bl	8007c40 <UART_WaitOnFlagUntilTimeout>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d03c      	beq.n	8007c12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba0:	e853 3f00 	ldrex	r3, [r3]
 8007ba4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bbe:	e841 2300 	strex	r3, r2, [r1]
 8007bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1e6      	bne.n	8007b98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3308      	adds	r3, #8
 8007bd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	e853 3f00 	ldrex	r3, [r3]
 8007bd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f023 0301 	bic.w	r3, r3, #1
 8007be0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3308      	adds	r3, #8
 8007be8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bea:	61fa      	str	r2, [r7, #28]
 8007bec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bee:	69b9      	ldr	r1, [r7, #24]
 8007bf0:	69fa      	ldr	r2, [r7, #28]
 8007bf2:	e841 2300 	strex	r3, r2, [r1]
 8007bf6:	617b      	str	r3, [r7, #20]
   return(result);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1e5      	bne.n	8007bca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2220      	movs	r2, #32
 8007c02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e012      	b.n	8007c38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2220      	movs	r2, #32
 8007c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3758      	adds	r7, #88	@ 0x58
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	603b      	str	r3, [r7, #0]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c50:	e04f      	b.n	8007cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c58:	d04b      	beq.n	8007cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c5a:	f7f9 fa7b 	bl	8001154 <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d302      	bcc.n	8007c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c70:	2303      	movs	r3, #3
 8007c72:	e04e      	b.n	8007d12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0304 	and.w	r3, r3, #4
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d037      	beq.n	8007cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2b80      	cmp	r3, #128	@ 0x80
 8007c86:	d034      	beq.n	8007cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2b40      	cmp	r3, #64	@ 0x40
 8007c8c:	d031      	beq.n	8007cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	f003 0308 	and.w	r3, r3, #8
 8007c98:	2b08      	cmp	r3, #8
 8007c9a:	d110      	bne.n	8007cbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2208      	movs	r2, #8
 8007ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 f839 	bl	8007d1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2208      	movs	r2, #8
 8007cae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e029      	b.n	8007d12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ccc:	d111      	bne.n	8007cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007cd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 f81f 	bl	8007d1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2220      	movs	r2, #32
 8007ce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e00f      	b.n	8007d12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69da      	ldr	r2, [r3, #28]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	bf0c      	ite	eq
 8007d02:	2301      	moveq	r3, #1
 8007d04:	2300      	movne	r3, #0
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	461a      	mov	r2, r3
 8007d0a:	79fb      	ldrb	r3, [r7, #7]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d0a0      	beq.n	8007c52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b095      	sub	sp, #84	@ 0x54
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d42:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d44:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e6      	bne.n	8007d24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3308      	adds	r3, #8
 8007d5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	e853 3f00 	ldrex	r3, [r3]
 8007d64:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d66:	69fa      	ldr	r2, [r7, #28]
 8007d68:	4b1e      	ldr	r3, [pc, #120]	@ (8007de4 <UART_EndRxTransfer+0xc8>)
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3308      	adds	r3, #8
 8007d74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d7e:	e841 2300 	strex	r3, r2, [r1]
 8007d82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1e5      	bne.n	8007d56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d118      	bne.n	8007dc4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f023 0310 	bic.w	r3, r3, #16
 8007da6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	461a      	mov	r2, r3
 8007dae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007db0:	61bb      	str	r3, [r7, #24]
 8007db2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db4:	6979      	ldr	r1, [r7, #20]
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	e841 2300 	strex	r3, r2, [r1]
 8007dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1e6      	bne.n	8007d92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007dd8:	bf00      	nop
 8007dda:	3754      	adds	r7, #84	@ 0x54
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr
 8007de4:	effffffe 	.word	0xeffffffe

08007de8 <siprintf>:
 8007de8:	b40e      	push	{r1, r2, r3}
 8007dea:	b500      	push	{lr}
 8007dec:	b09c      	sub	sp, #112	@ 0x70
 8007dee:	ab1d      	add	r3, sp, #116	@ 0x74
 8007df0:	9002      	str	r0, [sp, #8]
 8007df2:	9006      	str	r0, [sp, #24]
 8007df4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007df8:	4809      	ldr	r0, [pc, #36]	@ (8007e20 <siprintf+0x38>)
 8007dfa:	9107      	str	r1, [sp, #28]
 8007dfc:	9104      	str	r1, [sp, #16]
 8007dfe:	4909      	ldr	r1, [pc, #36]	@ (8007e24 <siprintf+0x3c>)
 8007e00:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e04:	9105      	str	r1, [sp, #20]
 8007e06:	6800      	ldr	r0, [r0, #0]
 8007e08:	9301      	str	r3, [sp, #4]
 8007e0a:	a902      	add	r1, sp, #8
 8007e0c:	f000 f994 	bl	8008138 <_svfiprintf_r>
 8007e10:	9b02      	ldr	r3, [sp, #8]
 8007e12:	2200      	movs	r2, #0
 8007e14:	701a      	strb	r2, [r3, #0]
 8007e16:	b01c      	add	sp, #112	@ 0x70
 8007e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e1c:	b003      	add	sp, #12
 8007e1e:	4770      	bx	lr
 8007e20:	24000014 	.word	0x24000014
 8007e24:	ffff0208 	.word	0xffff0208

08007e28 <memset>:
 8007e28:	4402      	add	r2, r0
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d100      	bne.n	8007e32 <memset+0xa>
 8007e30:	4770      	bx	lr
 8007e32:	f803 1b01 	strb.w	r1, [r3], #1
 8007e36:	e7f9      	b.n	8007e2c <memset+0x4>

08007e38 <__errno>:
 8007e38:	4b01      	ldr	r3, [pc, #4]	@ (8007e40 <__errno+0x8>)
 8007e3a:	6818      	ldr	r0, [r3, #0]
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	24000014 	.word	0x24000014

08007e44 <__libc_init_array>:
 8007e44:	b570      	push	{r4, r5, r6, lr}
 8007e46:	4d0d      	ldr	r5, [pc, #52]	@ (8007e7c <__libc_init_array+0x38>)
 8007e48:	4c0d      	ldr	r4, [pc, #52]	@ (8007e80 <__libc_init_array+0x3c>)
 8007e4a:	1b64      	subs	r4, r4, r5
 8007e4c:	10a4      	asrs	r4, r4, #2
 8007e4e:	2600      	movs	r6, #0
 8007e50:	42a6      	cmp	r6, r4
 8007e52:	d109      	bne.n	8007e68 <__libc_init_array+0x24>
 8007e54:	4d0b      	ldr	r5, [pc, #44]	@ (8007e84 <__libc_init_array+0x40>)
 8007e56:	4c0c      	ldr	r4, [pc, #48]	@ (8007e88 <__libc_init_array+0x44>)
 8007e58:	f000 fc66 	bl	8008728 <_init>
 8007e5c:	1b64      	subs	r4, r4, r5
 8007e5e:	10a4      	asrs	r4, r4, #2
 8007e60:	2600      	movs	r6, #0
 8007e62:	42a6      	cmp	r6, r4
 8007e64:	d105      	bne.n	8007e72 <__libc_init_array+0x2e>
 8007e66:	bd70      	pop	{r4, r5, r6, pc}
 8007e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e6c:	4798      	blx	r3
 8007e6e:	3601      	adds	r6, #1
 8007e70:	e7ee      	b.n	8007e50 <__libc_init_array+0xc>
 8007e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e76:	4798      	blx	r3
 8007e78:	3601      	adds	r6, #1
 8007e7a:	e7f2      	b.n	8007e62 <__libc_init_array+0x1e>
 8007e7c:	080087d0 	.word	0x080087d0
 8007e80:	080087d0 	.word	0x080087d0
 8007e84:	080087d0 	.word	0x080087d0
 8007e88:	080087d4 	.word	0x080087d4

08007e8c <__retarget_lock_acquire_recursive>:
 8007e8c:	4770      	bx	lr

08007e8e <__retarget_lock_release_recursive>:
 8007e8e:	4770      	bx	lr

08007e90 <_free_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	4605      	mov	r5, r0
 8007e94:	2900      	cmp	r1, #0
 8007e96:	d041      	beq.n	8007f1c <_free_r+0x8c>
 8007e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e9c:	1f0c      	subs	r4, r1, #4
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	bfb8      	it	lt
 8007ea2:	18e4      	addlt	r4, r4, r3
 8007ea4:	f000 f8e0 	bl	8008068 <__malloc_lock>
 8007ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f20 <_free_r+0x90>)
 8007eaa:	6813      	ldr	r3, [r2, #0]
 8007eac:	b933      	cbnz	r3, 8007ebc <_free_r+0x2c>
 8007eae:	6063      	str	r3, [r4, #4]
 8007eb0:	6014      	str	r4, [r2, #0]
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eb8:	f000 b8dc 	b.w	8008074 <__malloc_unlock>
 8007ebc:	42a3      	cmp	r3, r4
 8007ebe:	d908      	bls.n	8007ed2 <_free_r+0x42>
 8007ec0:	6820      	ldr	r0, [r4, #0]
 8007ec2:	1821      	adds	r1, r4, r0
 8007ec4:	428b      	cmp	r3, r1
 8007ec6:	bf01      	itttt	eq
 8007ec8:	6819      	ldreq	r1, [r3, #0]
 8007eca:	685b      	ldreq	r3, [r3, #4]
 8007ecc:	1809      	addeq	r1, r1, r0
 8007ece:	6021      	streq	r1, [r4, #0]
 8007ed0:	e7ed      	b.n	8007eae <_free_r+0x1e>
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	b10b      	cbz	r3, 8007edc <_free_r+0x4c>
 8007ed8:	42a3      	cmp	r3, r4
 8007eda:	d9fa      	bls.n	8007ed2 <_free_r+0x42>
 8007edc:	6811      	ldr	r1, [r2, #0]
 8007ede:	1850      	adds	r0, r2, r1
 8007ee0:	42a0      	cmp	r0, r4
 8007ee2:	d10b      	bne.n	8007efc <_free_r+0x6c>
 8007ee4:	6820      	ldr	r0, [r4, #0]
 8007ee6:	4401      	add	r1, r0
 8007ee8:	1850      	adds	r0, r2, r1
 8007eea:	4283      	cmp	r3, r0
 8007eec:	6011      	str	r1, [r2, #0]
 8007eee:	d1e0      	bne.n	8007eb2 <_free_r+0x22>
 8007ef0:	6818      	ldr	r0, [r3, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	6053      	str	r3, [r2, #4]
 8007ef6:	4408      	add	r0, r1
 8007ef8:	6010      	str	r0, [r2, #0]
 8007efa:	e7da      	b.n	8007eb2 <_free_r+0x22>
 8007efc:	d902      	bls.n	8007f04 <_free_r+0x74>
 8007efe:	230c      	movs	r3, #12
 8007f00:	602b      	str	r3, [r5, #0]
 8007f02:	e7d6      	b.n	8007eb2 <_free_r+0x22>
 8007f04:	6820      	ldr	r0, [r4, #0]
 8007f06:	1821      	adds	r1, r4, r0
 8007f08:	428b      	cmp	r3, r1
 8007f0a:	bf04      	itt	eq
 8007f0c:	6819      	ldreq	r1, [r3, #0]
 8007f0e:	685b      	ldreq	r3, [r3, #4]
 8007f10:	6063      	str	r3, [r4, #4]
 8007f12:	bf04      	itt	eq
 8007f14:	1809      	addeq	r1, r1, r0
 8007f16:	6021      	streq	r1, [r4, #0]
 8007f18:	6054      	str	r4, [r2, #4]
 8007f1a:	e7ca      	b.n	8007eb2 <_free_r+0x22>
 8007f1c:	bd38      	pop	{r3, r4, r5, pc}
 8007f1e:	bf00      	nop
 8007f20:	24000308 	.word	0x24000308

08007f24 <sbrk_aligned>:
 8007f24:	b570      	push	{r4, r5, r6, lr}
 8007f26:	4e0f      	ldr	r6, [pc, #60]	@ (8007f64 <sbrk_aligned+0x40>)
 8007f28:	460c      	mov	r4, r1
 8007f2a:	6831      	ldr	r1, [r6, #0]
 8007f2c:	4605      	mov	r5, r0
 8007f2e:	b911      	cbnz	r1, 8007f36 <sbrk_aligned+0x12>
 8007f30:	f000 fba6 	bl	8008680 <_sbrk_r>
 8007f34:	6030      	str	r0, [r6, #0]
 8007f36:	4621      	mov	r1, r4
 8007f38:	4628      	mov	r0, r5
 8007f3a:	f000 fba1 	bl	8008680 <_sbrk_r>
 8007f3e:	1c43      	adds	r3, r0, #1
 8007f40:	d103      	bne.n	8007f4a <sbrk_aligned+0x26>
 8007f42:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007f46:	4620      	mov	r0, r4
 8007f48:	bd70      	pop	{r4, r5, r6, pc}
 8007f4a:	1cc4      	adds	r4, r0, #3
 8007f4c:	f024 0403 	bic.w	r4, r4, #3
 8007f50:	42a0      	cmp	r0, r4
 8007f52:	d0f8      	beq.n	8007f46 <sbrk_aligned+0x22>
 8007f54:	1a21      	subs	r1, r4, r0
 8007f56:	4628      	mov	r0, r5
 8007f58:	f000 fb92 	bl	8008680 <_sbrk_r>
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d1f2      	bne.n	8007f46 <sbrk_aligned+0x22>
 8007f60:	e7ef      	b.n	8007f42 <sbrk_aligned+0x1e>
 8007f62:	bf00      	nop
 8007f64:	24000304 	.word	0x24000304

08007f68 <_malloc_r>:
 8007f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f6c:	1ccd      	adds	r5, r1, #3
 8007f6e:	f025 0503 	bic.w	r5, r5, #3
 8007f72:	3508      	adds	r5, #8
 8007f74:	2d0c      	cmp	r5, #12
 8007f76:	bf38      	it	cc
 8007f78:	250c      	movcc	r5, #12
 8007f7a:	2d00      	cmp	r5, #0
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	db01      	blt.n	8007f84 <_malloc_r+0x1c>
 8007f80:	42a9      	cmp	r1, r5
 8007f82:	d904      	bls.n	8007f8e <_malloc_r+0x26>
 8007f84:	230c      	movs	r3, #12
 8007f86:	6033      	str	r3, [r6, #0]
 8007f88:	2000      	movs	r0, #0
 8007f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008064 <_malloc_r+0xfc>
 8007f92:	f000 f869 	bl	8008068 <__malloc_lock>
 8007f96:	f8d8 3000 	ldr.w	r3, [r8]
 8007f9a:	461c      	mov	r4, r3
 8007f9c:	bb44      	cbnz	r4, 8007ff0 <_malloc_r+0x88>
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f7ff ffbf 	bl	8007f24 <sbrk_aligned>
 8007fa6:	1c43      	adds	r3, r0, #1
 8007fa8:	4604      	mov	r4, r0
 8007faa:	d158      	bne.n	800805e <_malloc_r+0xf6>
 8007fac:	f8d8 4000 	ldr.w	r4, [r8]
 8007fb0:	4627      	mov	r7, r4
 8007fb2:	2f00      	cmp	r7, #0
 8007fb4:	d143      	bne.n	800803e <_malloc_r+0xd6>
 8007fb6:	2c00      	cmp	r4, #0
 8007fb8:	d04b      	beq.n	8008052 <_malloc_r+0xea>
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	4639      	mov	r1, r7
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	eb04 0903 	add.w	r9, r4, r3
 8007fc4:	f000 fb5c 	bl	8008680 <_sbrk_r>
 8007fc8:	4581      	cmp	r9, r0
 8007fca:	d142      	bne.n	8008052 <_malloc_r+0xea>
 8007fcc:	6821      	ldr	r1, [r4, #0]
 8007fce:	1a6d      	subs	r5, r5, r1
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f7ff ffa6 	bl	8007f24 <sbrk_aligned>
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d03a      	beq.n	8008052 <_malloc_r+0xea>
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	442b      	add	r3, r5
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	f8d8 3000 	ldr.w	r3, [r8]
 8007fe6:	685a      	ldr	r2, [r3, #4]
 8007fe8:	bb62      	cbnz	r2, 8008044 <_malloc_r+0xdc>
 8007fea:	f8c8 7000 	str.w	r7, [r8]
 8007fee:	e00f      	b.n	8008010 <_malloc_r+0xa8>
 8007ff0:	6822      	ldr	r2, [r4, #0]
 8007ff2:	1b52      	subs	r2, r2, r5
 8007ff4:	d420      	bmi.n	8008038 <_malloc_r+0xd0>
 8007ff6:	2a0b      	cmp	r2, #11
 8007ff8:	d917      	bls.n	800802a <_malloc_r+0xc2>
 8007ffa:	1961      	adds	r1, r4, r5
 8007ffc:	42a3      	cmp	r3, r4
 8007ffe:	6025      	str	r5, [r4, #0]
 8008000:	bf18      	it	ne
 8008002:	6059      	strne	r1, [r3, #4]
 8008004:	6863      	ldr	r3, [r4, #4]
 8008006:	bf08      	it	eq
 8008008:	f8c8 1000 	streq.w	r1, [r8]
 800800c:	5162      	str	r2, [r4, r5]
 800800e:	604b      	str	r3, [r1, #4]
 8008010:	4630      	mov	r0, r6
 8008012:	f000 f82f 	bl	8008074 <__malloc_unlock>
 8008016:	f104 000b 	add.w	r0, r4, #11
 800801a:	1d23      	adds	r3, r4, #4
 800801c:	f020 0007 	bic.w	r0, r0, #7
 8008020:	1ac2      	subs	r2, r0, r3
 8008022:	bf1c      	itt	ne
 8008024:	1a1b      	subne	r3, r3, r0
 8008026:	50a3      	strne	r3, [r4, r2]
 8008028:	e7af      	b.n	8007f8a <_malloc_r+0x22>
 800802a:	6862      	ldr	r2, [r4, #4]
 800802c:	42a3      	cmp	r3, r4
 800802e:	bf0c      	ite	eq
 8008030:	f8c8 2000 	streq.w	r2, [r8]
 8008034:	605a      	strne	r2, [r3, #4]
 8008036:	e7eb      	b.n	8008010 <_malloc_r+0xa8>
 8008038:	4623      	mov	r3, r4
 800803a:	6864      	ldr	r4, [r4, #4]
 800803c:	e7ae      	b.n	8007f9c <_malloc_r+0x34>
 800803e:	463c      	mov	r4, r7
 8008040:	687f      	ldr	r7, [r7, #4]
 8008042:	e7b6      	b.n	8007fb2 <_malloc_r+0x4a>
 8008044:	461a      	mov	r2, r3
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	42a3      	cmp	r3, r4
 800804a:	d1fb      	bne.n	8008044 <_malloc_r+0xdc>
 800804c:	2300      	movs	r3, #0
 800804e:	6053      	str	r3, [r2, #4]
 8008050:	e7de      	b.n	8008010 <_malloc_r+0xa8>
 8008052:	230c      	movs	r3, #12
 8008054:	6033      	str	r3, [r6, #0]
 8008056:	4630      	mov	r0, r6
 8008058:	f000 f80c 	bl	8008074 <__malloc_unlock>
 800805c:	e794      	b.n	8007f88 <_malloc_r+0x20>
 800805e:	6005      	str	r5, [r0, #0]
 8008060:	e7d6      	b.n	8008010 <_malloc_r+0xa8>
 8008062:	bf00      	nop
 8008064:	24000308 	.word	0x24000308

08008068 <__malloc_lock>:
 8008068:	4801      	ldr	r0, [pc, #4]	@ (8008070 <__malloc_lock+0x8>)
 800806a:	f7ff bf0f 	b.w	8007e8c <__retarget_lock_acquire_recursive>
 800806e:	bf00      	nop
 8008070:	24000300 	.word	0x24000300

08008074 <__malloc_unlock>:
 8008074:	4801      	ldr	r0, [pc, #4]	@ (800807c <__malloc_unlock+0x8>)
 8008076:	f7ff bf0a 	b.w	8007e8e <__retarget_lock_release_recursive>
 800807a:	bf00      	nop
 800807c:	24000300 	.word	0x24000300

08008080 <__ssputs_r>:
 8008080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008084:	688e      	ldr	r6, [r1, #8]
 8008086:	461f      	mov	r7, r3
 8008088:	42be      	cmp	r6, r7
 800808a:	680b      	ldr	r3, [r1, #0]
 800808c:	4682      	mov	sl, r0
 800808e:	460c      	mov	r4, r1
 8008090:	4690      	mov	r8, r2
 8008092:	d82d      	bhi.n	80080f0 <__ssputs_r+0x70>
 8008094:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008098:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800809c:	d026      	beq.n	80080ec <__ssputs_r+0x6c>
 800809e:	6965      	ldr	r5, [r4, #20]
 80080a0:	6909      	ldr	r1, [r1, #16]
 80080a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080a6:	eba3 0901 	sub.w	r9, r3, r1
 80080aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080ae:	1c7b      	adds	r3, r7, #1
 80080b0:	444b      	add	r3, r9
 80080b2:	106d      	asrs	r5, r5, #1
 80080b4:	429d      	cmp	r5, r3
 80080b6:	bf38      	it	cc
 80080b8:	461d      	movcc	r5, r3
 80080ba:	0553      	lsls	r3, r2, #21
 80080bc:	d527      	bpl.n	800810e <__ssputs_r+0x8e>
 80080be:	4629      	mov	r1, r5
 80080c0:	f7ff ff52 	bl	8007f68 <_malloc_r>
 80080c4:	4606      	mov	r6, r0
 80080c6:	b360      	cbz	r0, 8008122 <__ssputs_r+0xa2>
 80080c8:	6921      	ldr	r1, [r4, #16]
 80080ca:	464a      	mov	r2, r9
 80080cc:	f000 fae8 	bl	80086a0 <memcpy>
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80080d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080da:	81a3      	strh	r3, [r4, #12]
 80080dc:	6126      	str	r6, [r4, #16]
 80080de:	6165      	str	r5, [r4, #20]
 80080e0:	444e      	add	r6, r9
 80080e2:	eba5 0509 	sub.w	r5, r5, r9
 80080e6:	6026      	str	r6, [r4, #0]
 80080e8:	60a5      	str	r5, [r4, #8]
 80080ea:	463e      	mov	r6, r7
 80080ec:	42be      	cmp	r6, r7
 80080ee:	d900      	bls.n	80080f2 <__ssputs_r+0x72>
 80080f0:	463e      	mov	r6, r7
 80080f2:	6820      	ldr	r0, [r4, #0]
 80080f4:	4632      	mov	r2, r6
 80080f6:	4641      	mov	r1, r8
 80080f8:	f000 faa8 	bl	800864c <memmove>
 80080fc:	68a3      	ldr	r3, [r4, #8]
 80080fe:	1b9b      	subs	r3, r3, r6
 8008100:	60a3      	str	r3, [r4, #8]
 8008102:	6823      	ldr	r3, [r4, #0]
 8008104:	4433      	add	r3, r6
 8008106:	6023      	str	r3, [r4, #0]
 8008108:	2000      	movs	r0, #0
 800810a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800810e:	462a      	mov	r2, r5
 8008110:	f000 fad4 	bl	80086bc <_realloc_r>
 8008114:	4606      	mov	r6, r0
 8008116:	2800      	cmp	r0, #0
 8008118:	d1e0      	bne.n	80080dc <__ssputs_r+0x5c>
 800811a:	6921      	ldr	r1, [r4, #16]
 800811c:	4650      	mov	r0, sl
 800811e:	f7ff feb7 	bl	8007e90 <_free_r>
 8008122:	230c      	movs	r3, #12
 8008124:	f8ca 3000 	str.w	r3, [sl]
 8008128:	89a3      	ldrh	r3, [r4, #12]
 800812a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800812e:	81a3      	strh	r3, [r4, #12]
 8008130:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008134:	e7e9      	b.n	800810a <__ssputs_r+0x8a>
	...

08008138 <_svfiprintf_r>:
 8008138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813c:	4698      	mov	r8, r3
 800813e:	898b      	ldrh	r3, [r1, #12]
 8008140:	061b      	lsls	r3, r3, #24
 8008142:	b09d      	sub	sp, #116	@ 0x74
 8008144:	4607      	mov	r7, r0
 8008146:	460d      	mov	r5, r1
 8008148:	4614      	mov	r4, r2
 800814a:	d510      	bpl.n	800816e <_svfiprintf_r+0x36>
 800814c:	690b      	ldr	r3, [r1, #16]
 800814e:	b973      	cbnz	r3, 800816e <_svfiprintf_r+0x36>
 8008150:	2140      	movs	r1, #64	@ 0x40
 8008152:	f7ff ff09 	bl	8007f68 <_malloc_r>
 8008156:	6028      	str	r0, [r5, #0]
 8008158:	6128      	str	r0, [r5, #16]
 800815a:	b930      	cbnz	r0, 800816a <_svfiprintf_r+0x32>
 800815c:	230c      	movs	r3, #12
 800815e:	603b      	str	r3, [r7, #0]
 8008160:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008164:	b01d      	add	sp, #116	@ 0x74
 8008166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816a:	2340      	movs	r3, #64	@ 0x40
 800816c:	616b      	str	r3, [r5, #20]
 800816e:	2300      	movs	r3, #0
 8008170:	9309      	str	r3, [sp, #36]	@ 0x24
 8008172:	2320      	movs	r3, #32
 8008174:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008178:	f8cd 800c 	str.w	r8, [sp, #12]
 800817c:	2330      	movs	r3, #48	@ 0x30
 800817e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800831c <_svfiprintf_r+0x1e4>
 8008182:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008186:	f04f 0901 	mov.w	r9, #1
 800818a:	4623      	mov	r3, r4
 800818c:	469a      	mov	sl, r3
 800818e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008192:	b10a      	cbz	r2, 8008198 <_svfiprintf_r+0x60>
 8008194:	2a25      	cmp	r2, #37	@ 0x25
 8008196:	d1f9      	bne.n	800818c <_svfiprintf_r+0x54>
 8008198:	ebba 0b04 	subs.w	fp, sl, r4
 800819c:	d00b      	beq.n	80081b6 <_svfiprintf_r+0x7e>
 800819e:	465b      	mov	r3, fp
 80081a0:	4622      	mov	r2, r4
 80081a2:	4629      	mov	r1, r5
 80081a4:	4638      	mov	r0, r7
 80081a6:	f7ff ff6b 	bl	8008080 <__ssputs_r>
 80081aa:	3001      	adds	r0, #1
 80081ac:	f000 80a7 	beq.w	80082fe <_svfiprintf_r+0x1c6>
 80081b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081b2:	445a      	add	r2, fp
 80081b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80081b6:	f89a 3000 	ldrb.w	r3, [sl]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 809f 	beq.w	80082fe <_svfiprintf_r+0x1c6>
 80081c0:	2300      	movs	r3, #0
 80081c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80081c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081ca:	f10a 0a01 	add.w	sl, sl, #1
 80081ce:	9304      	str	r3, [sp, #16]
 80081d0:	9307      	str	r3, [sp, #28]
 80081d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80081d8:	4654      	mov	r4, sl
 80081da:	2205      	movs	r2, #5
 80081dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e0:	484e      	ldr	r0, [pc, #312]	@ (800831c <_svfiprintf_r+0x1e4>)
 80081e2:	f7f8 f89d 	bl	8000320 <memchr>
 80081e6:	9a04      	ldr	r2, [sp, #16]
 80081e8:	b9d8      	cbnz	r0, 8008222 <_svfiprintf_r+0xea>
 80081ea:	06d0      	lsls	r0, r2, #27
 80081ec:	bf44      	itt	mi
 80081ee:	2320      	movmi	r3, #32
 80081f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081f4:	0711      	lsls	r1, r2, #28
 80081f6:	bf44      	itt	mi
 80081f8:	232b      	movmi	r3, #43	@ 0x2b
 80081fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008202:	2b2a      	cmp	r3, #42	@ 0x2a
 8008204:	d015      	beq.n	8008232 <_svfiprintf_r+0xfa>
 8008206:	9a07      	ldr	r2, [sp, #28]
 8008208:	4654      	mov	r4, sl
 800820a:	2000      	movs	r0, #0
 800820c:	f04f 0c0a 	mov.w	ip, #10
 8008210:	4621      	mov	r1, r4
 8008212:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008216:	3b30      	subs	r3, #48	@ 0x30
 8008218:	2b09      	cmp	r3, #9
 800821a:	d94b      	bls.n	80082b4 <_svfiprintf_r+0x17c>
 800821c:	b1b0      	cbz	r0, 800824c <_svfiprintf_r+0x114>
 800821e:	9207      	str	r2, [sp, #28]
 8008220:	e014      	b.n	800824c <_svfiprintf_r+0x114>
 8008222:	eba0 0308 	sub.w	r3, r0, r8
 8008226:	fa09 f303 	lsl.w	r3, r9, r3
 800822a:	4313      	orrs	r3, r2
 800822c:	9304      	str	r3, [sp, #16]
 800822e:	46a2      	mov	sl, r4
 8008230:	e7d2      	b.n	80081d8 <_svfiprintf_r+0xa0>
 8008232:	9b03      	ldr	r3, [sp, #12]
 8008234:	1d19      	adds	r1, r3, #4
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	9103      	str	r1, [sp, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	bfbb      	ittet	lt
 800823e:	425b      	neglt	r3, r3
 8008240:	f042 0202 	orrlt.w	r2, r2, #2
 8008244:	9307      	strge	r3, [sp, #28]
 8008246:	9307      	strlt	r3, [sp, #28]
 8008248:	bfb8      	it	lt
 800824a:	9204      	strlt	r2, [sp, #16]
 800824c:	7823      	ldrb	r3, [r4, #0]
 800824e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008250:	d10a      	bne.n	8008268 <_svfiprintf_r+0x130>
 8008252:	7863      	ldrb	r3, [r4, #1]
 8008254:	2b2a      	cmp	r3, #42	@ 0x2a
 8008256:	d132      	bne.n	80082be <_svfiprintf_r+0x186>
 8008258:	9b03      	ldr	r3, [sp, #12]
 800825a:	1d1a      	adds	r2, r3, #4
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	9203      	str	r2, [sp, #12]
 8008260:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008264:	3402      	adds	r4, #2
 8008266:	9305      	str	r3, [sp, #20]
 8008268:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800832c <_svfiprintf_r+0x1f4>
 800826c:	7821      	ldrb	r1, [r4, #0]
 800826e:	2203      	movs	r2, #3
 8008270:	4650      	mov	r0, sl
 8008272:	f7f8 f855 	bl	8000320 <memchr>
 8008276:	b138      	cbz	r0, 8008288 <_svfiprintf_r+0x150>
 8008278:	9b04      	ldr	r3, [sp, #16]
 800827a:	eba0 000a 	sub.w	r0, r0, sl
 800827e:	2240      	movs	r2, #64	@ 0x40
 8008280:	4082      	lsls	r2, r0
 8008282:	4313      	orrs	r3, r2
 8008284:	3401      	adds	r4, #1
 8008286:	9304      	str	r3, [sp, #16]
 8008288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800828c:	4824      	ldr	r0, [pc, #144]	@ (8008320 <_svfiprintf_r+0x1e8>)
 800828e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008292:	2206      	movs	r2, #6
 8008294:	f7f8 f844 	bl	8000320 <memchr>
 8008298:	2800      	cmp	r0, #0
 800829a:	d036      	beq.n	800830a <_svfiprintf_r+0x1d2>
 800829c:	4b21      	ldr	r3, [pc, #132]	@ (8008324 <_svfiprintf_r+0x1ec>)
 800829e:	bb1b      	cbnz	r3, 80082e8 <_svfiprintf_r+0x1b0>
 80082a0:	9b03      	ldr	r3, [sp, #12]
 80082a2:	3307      	adds	r3, #7
 80082a4:	f023 0307 	bic.w	r3, r3, #7
 80082a8:	3308      	adds	r3, #8
 80082aa:	9303      	str	r3, [sp, #12]
 80082ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ae:	4433      	add	r3, r6
 80082b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80082b2:	e76a      	b.n	800818a <_svfiprintf_r+0x52>
 80082b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80082b8:	460c      	mov	r4, r1
 80082ba:	2001      	movs	r0, #1
 80082bc:	e7a8      	b.n	8008210 <_svfiprintf_r+0xd8>
 80082be:	2300      	movs	r3, #0
 80082c0:	3401      	adds	r4, #1
 80082c2:	9305      	str	r3, [sp, #20]
 80082c4:	4619      	mov	r1, r3
 80082c6:	f04f 0c0a 	mov.w	ip, #10
 80082ca:	4620      	mov	r0, r4
 80082cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082d0:	3a30      	subs	r2, #48	@ 0x30
 80082d2:	2a09      	cmp	r2, #9
 80082d4:	d903      	bls.n	80082de <_svfiprintf_r+0x1a6>
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d0c6      	beq.n	8008268 <_svfiprintf_r+0x130>
 80082da:	9105      	str	r1, [sp, #20]
 80082dc:	e7c4      	b.n	8008268 <_svfiprintf_r+0x130>
 80082de:	fb0c 2101 	mla	r1, ip, r1, r2
 80082e2:	4604      	mov	r4, r0
 80082e4:	2301      	movs	r3, #1
 80082e6:	e7f0      	b.n	80082ca <_svfiprintf_r+0x192>
 80082e8:	ab03      	add	r3, sp, #12
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	462a      	mov	r2, r5
 80082ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008328 <_svfiprintf_r+0x1f0>)
 80082f0:	a904      	add	r1, sp, #16
 80082f2:	4638      	mov	r0, r7
 80082f4:	f3af 8000 	nop.w
 80082f8:	1c42      	adds	r2, r0, #1
 80082fa:	4606      	mov	r6, r0
 80082fc:	d1d6      	bne.n	80082ac <_svfiprintf_r+0x174>
 80082fe:	89ab      	ldrh	r3, [r5, #12]
 8008300:	065b      	lsls	r3, r3, #25
 8008302:	f53f af2d 	bmi.w	8008160 <_svfiprintf_r+0x28>
 8008306:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008308:	e72c      	b.n	8008164 <_svfiprintf_r+0x2c>
 800830a:	ab03      	add	r3, sp, #12
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	462a      	mov	r2, r5
 8008310:	4b05      	ldr	r3, [pc, #20]	@ (8008328 <_svfiprintf_r+0x1f0>)
 8008312:	a904      	add	r1, sp, #16
 8008314:	4638      	mov	r0, r7
 8008316:	f000 f879 	bl	800840c <_printf_i>
 800831a:	e7ed      	b.n	80082f8 <_svfiprintf_r+0x1c0>
 800831c:	08008794 	.word	0x08008794
 8008320:	0800879e 	.word	0x0800879e
 8008324:	00000000 	.word	0x00000000
 8008328:	08008081 	.word	0x08008081
 800832c:	0800879a 	.word	0x0800879a

08008330 <_printf_common>:
 8008330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008334:	4616      	mov	r6, r2
 8008336:	4698      	mov	r8, r3
 8008338:	688a      	ldr	r2, [r1, #8]
 800833a:	690b      	ldr	r3, [r1, #16]
 800833c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008340:	4293      	cmp	r3, r2
 8008342:	bfb8      	it	lt
 8008344:	4613      	movlt	r3, r2
 8008346:	6033      	str	r3, [r6, #0]
 8008348:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800834c:	4607      	mov	r7, r0
 800834e:	460c      	mov	r4, r1
 8008350:	b10a      	cbz	r2, 8008356 <_printf_common+0x26>
 8008352:	3301      	adds	r3, #1
 8008354:	6033      	str	r3, [r6, #0]
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	0699      	lsls	r1, r3, #26
 800835a:	bf42      	ittt	mi
 800835c:	6833      	ldrmi	r3, [r6, #0]
 800835e:	3302      	addmi	r3, #2
 8008360:	6033      	strmi	r3, [r6, #0]
 8008362:	6825      	ldr	r5, [r4, #0]
 8008364:	f015 0506 	ands.w	r5, r5, #6
 8008368:	d106      	bne.n	8008378 <_printf_common+0x48>
 800836a:	f104 0a19 	add.w	sl, r4, #25
 800836e:	68e3      	ldr	r3, [r4, #12]
 8008370:	6832      	ldr	r2, [r6, #0]
 8008372:	1a9b      	subs	r3, r3, r2
 8008374:	42ab      	cmp	r3, r5
 8008376:	dc26      	bgt.n	80083c6 <_printf_common+0x96>
 8008378:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800837c:	6822      	ldr	r2, [r4, #0]
 800837e:	3b00      	subs	r3, #0
 8008380:	bf18      	it	ne
 8008382:	2301      	movne	r3, #1
 8008384:	0692      	lsls	r2, r2, #26
 8008386:	d42b      	bmi.n	80083e0 <_printf_common+0xb0>
 8008388:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800838c:	4641      	mov	r1, r8
 800838e:	4638      	mov	r0, r7
 8008390:	47c8      	blx	r9
 8008392:	3001      	adds	r0, #1
 8008394:	d01e      	beq.n	80083d4 <_printf_common+0xa4>
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	6922      	ldr	r2, [r4, #16]
 800839a:	f003 0306 	and.w	r3, r3, #6
 800839e:	2b04      	cmp	r3, #4
 80083a0:	bf02      	ittt	eq
 80083a2:	68e5      	ldreq	r5, [r4, #12]
 80083a4:	6833      	ldreq	r3, [r6, #0]
 80083a6:	1aed      	subeq	r5, r5, r3
 80083a8:	68a3      	ldr	r3, [r4, #8]
 80083aa:	bf0c      	ite	eq
 80083ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083b0:	2500      	movne	r5, #0
 80083b2:	4293      	cmp	r3, r2
 80083b4:	bfc4      	itt	gt
 80083b6:	1a9b      	subgt	r3, r3, r2
 80083b8:	18ed      	addgt	r5, r5, r3
 80083ba:	2600      	movs	r6, #0
 80083bc:	341a      	adds	r4, #26
 80083be:	42b5      	cmp	r5, r6
 80083c0:	d11a      	bne.n	80083f8 <_printf_common+0xc8>
 80083c2:	2000      	movs	r0, #0
 80083c4:	e008      	b.n	80083d8 <_printf_common+0xa8>
 80083c6:	2301      	movs	r3, #1
 80083c8:	4652      	mov	r2, sl
 80083ca:	4641      	mov	r1, r8
 80083cc:	4638      	mov	r0, r7
 80083ce:	47c8      	blx	r9
 80083d0:	3001      	adds	r0, #1
 80083d2:	d103      	bne.n	80083dc <_printf_common+0xac>
 80083d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083dc:	3501      	adds	r5, #1
 80083de:	e7c6      	b.n	800836e <_printf_common+0x3e>
 80083e0:	18e1      	adds	r1, r4, r3
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	2030      	movs	r0, #48	@ 0x30
 80083e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083ea:	4422      	add	r2, r4
 80083ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083f4:	3302      	adds	r3, #2
 80083f6:	e7c7      	b.n	8008388 <_printf_common+0x58>
 80083f8:	2301      	movs	r3, #1
 80083fa:	4622      	mov	r2, r4
 80083fc:	4641      	mov	r1, r8
 80083fe:	4638      	mov	r0, r7
 8008400:	47c8      	blx	r9
 8008402:	3001      	adds	r0, #1
 8008404:	d0e6      	beq.n	80083d4 <_printf_common+0xa4>
 8008406:	3601      	adds	r6, #1
 8008408:	e7d9      	b.n	80083be <_printf_common+0x8e>
	...

0800840c <_printf_i>:
 800840c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008410:	7e0f      	ldrb	r7, [r1, #24]
 8008412:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008414:	2f78      	cmp	r7, #120	@ 0x78
 8008416:	4691      	mov	r9, r2
 8008418:	4680      	mov	r8, r0
 800841a:	460c      	mov	r4, r1
 800841c:	469a      	mov	sl, r3
 800841e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008422:	d807      	bhi.n	8008434 <_printf_i+0x28>
 8008424:	2f62      	cmp	r7, #98	@ 0x62
 8008426:	d80a      	bhi.n	800843e <_printf_i+0x32>
 8008428:	2f00      	cmp	r7, #0
 800842a:	f000 80d2 	beq.w	80085d2 <_printf_i+0x1c6>
 800842e:	2f58      	cmp	r7, #88	@ 0x58
 8008430:	f000 80b9 	beq.w	80085a6 <_printf_i+0x19a>
 8008434:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008438:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800843c:	e03a      	b.n	80084b4 <_printf_i+0xa8>
 800843e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008442:	2b15      	cmp	r3, #21
 8008444:	d8f6      	bhi.n	8008434 <_printf_i+0x28>
 8008446:	a101      	add	r1, pc, #4	@ (adr r1, 800844c <_printf_i+0x40>)
 8008448:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800844c:	080084a5 	.word	0x080084a5
 8008450:	080084b9 	.word	0x080084b9
 8008454:	08008435 	.word	0x08008435
 8008458:	08008435 	.word	0x08008435
 800845c:	08008435 	.word	0x08008435
 8008460:	08008435 	.word	0x08008435
 8008464:	080084b9 	.word	0x080084b9
 8008468:	08008435 	.word	0x08008435
 800846c:	08008435 	.word	0x08008435
 8008470:	08008435 	.word	0x08008435
 8008474:	08008435 	.word	0x08008435
 8008478:	080085b9 	.word	0x080085b9
 800847c:	080084e3 	.word	0x080084e3
 8008480:	08008573 	.word	0x08008573
 8008484:	08008435 	.word	0x08008435
 8008488:	08008435 	.word	0x08008435
 800848c:	080085db 	.word	0x080085db
 8008490:	08008435 	.word	0x08008435
 8008494:	080084e3 	.word	0x080084e3
 8008498:	08008435 	.word	0x08008435
 800849c:	08008435 	.word	0x08008435
 80084a0:	0800857b 	.word	0x0800857b
 80084a4:	6833      	ldr	r3, [r6, #0]
 80084a6:	1d1a      	adds	r2, r3, #4
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6032      	str	r2, [r6, #0]
 80084ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084b4:	2301      	movs	r3, #1
 80084b6:	e09d      	b.n	80085f4 <_printf_i+0x1e8>
 80084b8:	6833      	ldr	r3, [r6, #0]
 80084ba:	6820      	ldr	r0, [r4, #0]
 80084bc:	1d19      	adds	r1, r3, #4
 80084be:	6031      	str	r1, [r6, #0]
 80084c0:	0606      	lsls	r6, r0, #24
 80084c2:	d501      	bpl.n	80084c8 <_printf_i+0xbc>
 80084c4:	681d      	ldr	r5, [r3, #0]
 80084c6:	e003      	b.n	80084d0 <_printf_i+0xc4>
 80084c8:	0645      	lsls	r5, r0, #25
 80084ca:	d5fb      	bpl.n	80084c4 <_printf_i+0xb8>
 80084cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084d0:	2d00      	cmp	r5, #0
 80084d2:	da03      	bge.n	80084dc <_printf_i+0xd0>
 80084d4:	232d      	movs	r3, #45	@ 0x2d
 80084d6:	426d      	negs	r5, r5
 80084d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084dc:	4859      	ldr	r0, [pc, #356]	@ (8008644 <_printf_i+0x238>)
 80084de:	230a      	movs	r3, #10
 80084e0:	e011      	b.n	8008506 <_printf_i+0xfa>
 80084e2:	6821      	ldr	r1, [r4, #0]
 80084e4:	6833      	ldr	r3, [r6, #0]
 80084e6:	0608      	lsls	r0, r1, #24
 80084e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80084ec:	d402      	bmi.n	80084f4 <_printf_i+0xe8>
 80084ee:	0649      	lsls	r1, r1, #25
 80084f0:	bf48      	it	mi
 80084f2:	b2ad      	uxthmi	r5, r5
 80084f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80084f6:	4853      	ldr	r0, [pc, #332]	@ (8008644 <_printf_i+0x238>)
 80084f8:	6033      	str	r3, [r6, #0]
 80084fa:	bf14      	ite	ne
 80084fc:	230a      	movne	r3, #10
 80084fe:	2308      	moveq	r3, #8
 8008500:	2100      	movs	r1, #0
 8008502:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008506:	6866      	ldr	r6, [r4, #4]
 8008508:	60a6      	str	r6, [r4, #8]
 800850a:	2e00      	cmp	r6, #0
 800850c:	bfa2      	ittt	ge
 800850e:	6821      	ldrge	r1, [r4, #0]
 8008510:	f021 0104 	bicge.w	r1, r1, #4
 8008514:	6021      	strge	r1, [r4, #0]
 8008516:	b90d      	cbnz	r5, 800851c <_printf_i+0x110>
 8008518:	2e00      	cmp	r6, #0
 800851a:	d04b      	beq.n	80085b4 <_printf_i+0x1a8>
 800851c:	4616      	mov	r6, r2
 800851e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008522:	fb03 5711 	mls	r7, r3, r1, r5
 8008526:	5dc7      	ldrb	r7, [r0, r7]
 8008528:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800852c:	462f      	mov	r7, r5
 800852e:	42bb      	cmp	r3, r7
 8008530:	460d      	mov	r5, r1
 8008532:	d9f4      	bls.n	800851e <_printf_i+0x112>
 8008534:	2b08      	cmp	r3, #8
 8008536:	d10b      	bne.n	8008550 <_printf_i+0x144>
 8008538:	6823      	ldr	r3, [r4, #0]
 800853a:	07df      	lsls	r7, r3, #31
 800853c:	d508      	bpl.n	8008550 <_printf_i+0x144>
 800853e:	6923      	ldr	r3, [r4, #16]
 8008540:	6861      	ldr	r1, [r4, #4]
 8008542:	4299      	cmp	r1, r3
 8008544:	bfde      	ittt	le
 8008546:	2330      	movle	r3, #48	@ 0x30
 8008548:	f806 3c01 	strble.w	r3, [r6, #-1]
 800854c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008550:	1b92      	subs	r2, r2, r6
 8008552:	6122      	str	r2, [r4, #16]
 8008554:	f8cd a000 	str.w	sl, [sp]
 8008558:	464b      	mov	r3, r9
 800855a:	aa03      	add	r2, sp, #12
 800855c:	4621      	mov	r1, r4
 800855e:	4640      	mov	r0, r8
 8008560:	f7ff fee6 	bl	8008330 <_printf_common>
 8008564:	3001      	adds	r0, #1
 8008566:	d14a      	bne.n	80085fe <_printf_i+0x1f2>
 8008568:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800856c:	b004      	add	sp, #16
 800856e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	f043 0320 	orr.w	r3, r3, #32
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	4833      	ldr	r0, [pc, #204]	@ (8008648 <_printf_i+0x23c>)
 800857c:	2778      	movs	r7, #120	@ 0x78
 800857e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	6831      	ldr	r1, [r6, #0]
 8008586:	061f      	lsls	r7, r3, #24
 8008588:	f851 5b04 	ldr.w	r5, [r1], #4
 800858c:	d402      	bmi.n	8008594 <_printf_i+0x188>
 800858e:	065f      	lsls	r7, r3, #25
 8008590:	bf48      	it	mi
 8008592:	b2ad      	uxthmi	r5, r5
 8008594:	6031      	str	r1, [r6, #0]
 8008596:	07d9      	lsls	r1, r3, #31
 8008598:	bf44      	itt	mi
 800859a:	f043 0320 	orrmi.w	r3, r3, #32
 800859e:	6023      	strmi	r3, [r4, #0]
 80085a0:	b11d      	cbz	r5, 80085aa <_printf_i+0x19e>
 80085a2:	2310      	movs	r3, #16
 80085a4:	e7ac      	b.n	8008500 <_printf_i+0xf4>
 80085a6:	4827      	ldr	r0, [pc, #156]	@ (8008644 <_printf_i+0x238>)
 80085a8:	e7e9      	b.n	800857e <_printf_i+0x172>
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	f023 0320 	bic.w	r3, r3, #32
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	e7f6      	b.n	80085a2 <_printf_i+0x196>
 80085b4:	4616      	mov	r6, r2
 80085b6:	e7bd      	b.n	8008534 <_printf_i+0x128>
 80085b8:	6833      	ldr	r3, [r6, #0]
 80085ba:	6825      	ldr	r5, [r4, #0]
 80085bc:	6961      	ldr	r1, [r4, #20]
 80085be:	1d18      	adds	r0, r3, #4
 80085c0:	6030      	str	r0, [r6, #0]
 80085c2:	062e      	lsls	r6, r5, #24
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	d501      	bpl.n	80085cc <_printf_i+0x1c0>
 80085c8:	6019      	str	r1, [r3, #0]
 80085ca:	e002      	b.n	80085d2 <_printf_i+0x1c6>
 80085cc:	0668      	lsls	r0, r5, #25
 80085ce:	d5fb      	bpl.n	80085c8 <_printf_i+0x1bc>
 80085d0:	8019      	strh	r1, [r3, #0]
 80085d2:	2300      	movs	r3, #0
 80085d4:	6123      	str	r3, [r4, #16]
 80085d6:	4616      	mov	r6, r2
 80085d8:	e7bc      	b.n	8008554 <_printf_i+0x148>
 80085da:	6833      	ldr	r3, [r6, #0]
 80085dc:	1d1a      	adds	r2, r3, #4
 80085de:	6032      	str	r2, [r6, #0]
 80085e0:	681e      	ldr	r6, [r3, #0]
 80085e2:	6862      	ldr	r2, [r4, #4]
 80085e4:	2100      	movs	r1, #0
 80085e6:	4630      	mov	r0, r6
 80085e8:	f7f7 fe9a 	bl	8000320 <memchr>
 80085ec:	b108      	cbz	r0, 80085f2 <_printf_i+0x1e6>
 80085ee:	1b80      	subs	r0, r0, r6
 80085f0:	6060      	str	r0, [r4, #4]
 80085f2:	6863      	ldr	r3, [r4, #4]
 80085f4:	6123      	str	r3, [r4, #16]
 80085f6:	2300      	movs	r3, #0
 80085f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085fc:	e7aa      	b.n	8008554 <_printf_i+0x148>
 80085fe:	6923      	ldr	r3, [r4, #16]
 8008600:	4632      	mov	r2, r6
 8008602:	4649      	mov	r1, r9
 8008604:	4640      	mov	r0, r8
 8008606:	47d0      	blx	sl
 8008608:	3001      	adds	r0, #1
 800860a:	d0ad      	beq.n	8008568 <_printf_i+0x15c>
 800860c:	6823      	ldr	r3, [r4, #0]
 800860e:	079b      	lsls	r3, r3, #30
 8008610:	d413      	bmi.n	800863a <_printf_i+0x22e>
 8008612:	68e0      	ldr	r0, [r4, #12]
 8008614:	9b03      	ldr	r3, [sp, #12]
 8008616:	4298      	cmp	r0, r3
 8008618:	bfb8      	it	lt
 800861a:	4618      	movlt	r0, r3
 800861c:	e7a6      	b.n	800856c <_printf_i+0x160>
 800861e:	2301      	movs	r3, #1
 8008620:	4632      	mov	r2, r6
 8008622:	4649      	mov	r1, r9
 8008624:	4640      	mov	r0, r8
 8008626:	47d0      	blx	sl
 8008628:	3001      	adds	r0, #1
 800862a:	d09d      	beq.n	8008568 <_printf_i+0x15c>
 800862c:	3501      	adds	r5, #1
 800862e:	68e3      	ldr	r3, [r4, #12]
 8008630:	9903      	ldr	r1, [sp, #12]
 8008632:	1a5b      	subs	r3, r3, r1
 8008634:	42ab      	cmp	r3, r5
 8008636:	dcf2      	bgt.n	800861e <_printf_i+0x212>
 8008638:	e7eb      	b.n	8008612 <_printf_i+0x206>
 800863a:	2500      	movs	r5, #0
 800863c:	f104 0619 	add.w	r6, r4, #25
 8008640:	e7f5      	b.n	800862e <_printf_i+0x222>
 8008642:	bf00      	nop
 8008644:	080087a5 	.word	0x080087a5
 8008648:	080087b6 	.word	0x080087b6

0800864c <memmove>:
 800864c:	4288      	cmp	r0, r1
 800864e:	b510      	push	{r4, lr}
 8008650:	eb01 0402 	add.w	r4, r1, r2
 8008654:	d902      	bls.n	800865c <memmove+0x10>
 8008656:	4284      	cmp	r4, r0
 8008658:	4623      	mov	r3, r4
 800865a:	d807      	bhi.n	800866c <memmove+0x20>
 800865c:	1e43      	subs	r3, r0, #1
 800865e:	42a1      	cmp	r1, r4
 8008660:	d008      	beq.n	8008674 <memmove+0x28>
 8008662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008666:	f803 2f01 	strb.w	r2, [r3, #1]!
 800866a:	e7f8      	b.n	800865e <memmove+0x12>
 800866c:	4402      	add	r2, r0
 800866e:	4601      	mov	r1, r0
 8008670:	428a      	cmp	r2, r1
 8008672:	d100      	bne.n	8008676 <memmove+0x2a>
 8008674:	bd10      	pop	{r4, pc}
 8008676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800867a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800867e:	e7f7      	b.n	8008670 <memmove+0x24>

08008680 <_sbrk_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	4d06      	ldr	r5, [pc, #24]	@ (800869c <_sbrk_r+0x1c>)
 8008684:	2300      	movs	r3, #0
 8008686:	4604      	mov	r4, r0
 8008688:	4608      	mov	r0, r1
 800868a:	602b      	str	r3, [r5, #0]
 800868c:	f7f8 fc04 	bl	8000e98 <_sbrk>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	d102      	bne.n	800869a <_sbrk_r+0x1a>
 8008694:	682b      	ldr	r3, [r5, #0]
 8008696:	b103      	cbz	r3, 800869a <_sbrk_r+0x1a>
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	bd38      	pop	{r3, r4, r5, pc}
 800869c:	240002fc 	.word	0x240002fc

080086a0 <memcpy>:
 80086a0:	440a      	add	r2, r1
 80086a2:	4291      	cmp	r1, r2
 80086a4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80086a8:	d100      	bne.n	80086ac <memcpy+0xc>
 80086aa:	4770      	bx	lr
 80086ac:	b510      	push	{r4, lr}
 80086ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086b6:	4291      	cmp	r1, r2
 80086b8:	d1f9      	bne.n	80086ae <memcpy+0xe>
 80086ba:	bd10      	pop	{r4, pc}

080086bc <_realloc_r>:
 80086bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c0:	4680      	mov	r8, r0
 80086c2:	4615      	mov	r5, r2
 80086c4:	460c      	mov	r4, r1
 80086c6:	b921      	cbnz	r1, 80086d2 <_realloc_r+0x16>
 80086c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086cc:	4611      	mov	r1, r2
 80086ce:	f7ff bc4b 	b.w	8007f68 <_malloc_r>
 80086d2:	b92a      	cbnz	r2, 80086e0 <_realloc_r+0x24>
 80086d4:	f7ff fbdc 	bl	8007e90 <_free_r>
 80086d8:	2400      	movs	r4, #0
 80086da:	4620      	mov	r0, r4
 80086dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086e0:	f000 f81a 	bl	8008718 <_malloc_usable_size_r>
 80086e4:	4285      	cmp	r5, r0
 80086e6:	4606      	mov	r6, r0
 80086e8:	d802      	bhi.n	80086f0 <_realloc_r+0x34>
 80086ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80086ee:	d8f4      	bhi.n	80086da <_realloc_r+0x1e>
 80086f0:	4629      	mov	r1, r5
 80086f2:	4640      	mov	r0, r8
 80086f4:	f7ff fc38 	bl	8007f68 <_malloc_r>
 80086f8:	4607      	mov	r7, r0
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d0ec      	beq.n	80086d8 <_realloc_r+0x1c>
 80086fe:	42b5      	cmp	r5, r6
 8008700:	462a      	mov	r2, r5
 8008702:	4621      	mov	r1, r4
 8008704:	bf28      	it	cs
 8008706:	4632      	movcs	r2, r6
 8008708:	f7ff ffca 	bl	80086a0 <memcpy>
 800870c:	4621      	mov	r1, r4
 800870e:	4640      	mov	r0, r8
 8008710:	f7ff fbbe 	bl	8007e90 <_free_r>
 8008714:	463c      	mov	r4, r7
 8008716:	e7e0      	b.n	80086da <_realloc_r+0x1e>

08008718 <_malloc_usable_size_r>:
 8008718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800871c:	1f18      	subs	r0, r3, #4
 800871e:	2b00      	cmp	r3, #0
 8008720:	bfbc      	itt	lt
 8008722:	580b      	ldrlt	r3, [r1, r0]
 8008724:	18c0      	addlt	r0, r0, r3
 8008726:	4770      	bx	lr

08008728 <_init>:
 8008728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872a:	bf00      	nop
 800872c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800872e:	bc08      	pop	{r3}
 8008730:	469e      	mov	lr, r3
 8008732:	4770      	bx	lr

08008734 <_fini>:
 8008734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008736:	bf00      	nop
 8008738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800873a:	bc08      	pop	{r3}
 800873c:	469e      	mov	lr, r3
 800873e:	4770      	bx	lr
